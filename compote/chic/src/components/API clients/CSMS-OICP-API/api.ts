/* tslint:disable */
/* eslint-disable */
/**
 * CSMS OICP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Specifies how the charging station can be accessed.  | Option | Description | | ------ | ----------- | | Free publicly accessible | EV Driver can reach the charging point without paying a fee, e.g. street, free public place, free parking lot, etc. | | Restricted access | EV Driver needs permission to reach the charging point, e.g. Campus, building complex, etc. | | Paying publicly accessible | EV Driver needs to pay a fee in order to reach the charging point, e.g. payable parking garage, etc. | | Test Station | Station is just for testing purposes. Access may be restricted. | 
 * @export
 * @enum {string}
 */

export const Accessibility = {
    FreePubliclyAccessible: 'Free publicly accessible',
    RestrictedAccess: 'Restricted access',
    PayingPubliclyAccessible: 'Paying publicly accessible',
    TestStation: 'Test Station'
} as const;

export type Accessibility = typeof Accessibility[keyof typeof Accessibility];


/**
 * AddressIso19773
 * @export
 * @interface AddressIso19773
 */
export interface AddressIso19773 {
    /**
     * The CountryCodeType allows for Alpha-3 country codes only as of OICP 2.2 and OICP 2.3  For Alpha-3 (three-letter) country codes as defined in ISO 3166-1.  __Examples:__  | Option | Description | | ------ | ----------- | | AUT | Austria | | DEU | Germany | | FRA | France | | USA | United States | 
     * @type {string}
     * @memberof AddressIso19773
     */
    'Country': string;
    /**
     * 
     * @type {string}
     * @memberof AddressIso19773
     */
    'City': string;
    /**
     * 
     * @type {string}
     * @memberof AddressIso19773
     */
    'Street': string;
    /**
     * 
     * @type {string}
     * @memberof AddressIso19773
     */
    'PostalCode': string;
    /**
     * 
     * @type {string}
     * @memberof AddressIso19773
     */
    'HouseNum': string;
    /**
     * 
     * @type {string}
     * @memberof AddressIso19773
     */
    'Floor'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressIso19773
     */
    'Region'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AddressIso19773
     */
    'ParkingFacility'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AddressIso19773
     */
    'ParkingSpot'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressIso19773
     */
    'TimeZone'?: string | null;
}
/**
 * | Option | Description | | NFC RFID Classic | Defined authentication. | | NFC RFID DESFire | Defined authentication. | | PnC | ISO/IEC 15118. | | REMOTE | App, QR-Code, Phone. | | Direct Payment | Remote use via direct payment. E.g. intercharge direct | | No Authentication Required | Not Authentication Method Required | 
 * @export
 * @enum {string}
 */

export const AuthenticationMode = {
    NfcRfidClassic: 'NFC RFID Classic',
    NfcRfidDesFire: 'NFC RFID DESFire',
    PnC: 'PnC',
    Remote: 'REMOTE',
    DirectPayment: 'Direct Payment',
    NoAuthenticationRequired: 'No Authentication Required'
} as const;

export type AuthenticationMode = typeof AuthenticationMode[keyof typeof AuthenticationMode];


/**
 * 
 * @export
 * @interface Body
 */
export interface Body {
    /**
     * 
     * @type {ChargingNotificationType}
     * @memberof Body
     */
    'Type': ChargingNotificationType;
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof Body
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    'CPOPartnerSessionID'?: string;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    'EMPPartnerSessionID'?: string;
    /**
     * 
     * @type {Identification}
     * @memberof Body
     */
    'Identification'?: Identification;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof Body
     */
    'EvseID': string;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    'ChargingStart': string;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    'SessionStart'?: string;
    /**
     * 
     * @type {Metervaluestart}
     * @memberof Body
     */
    'MeterValueStart'?: Metervaluestart | null;
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof Body
     */
    'OperatorID': string;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    'PartnerProductID'?: string;
    /**
     * The date and time at which the charging progress parameters are captured.
     * @type {string}
     * @memberof Body
     */
    'EventOccurred': string;
    /**
     * 
     * @type {number}
     * @memberof Body
     */
    'ChargingDuration'?: number;
    /**
     * 
     * @type {Consumedenergyprogress}
     * @memberof Body
     */
    'ConsumedEnergyProgress'?: Consumedenergyprogress | null;
    /**
     * 
     * @type {ERoamingChargeDetailRecordMeterValueInBetween}
     * @memberof Body
     */
    'MeterValueInBetween'?: ERoamingChargeDetailRecordMeterValueInBetween;
    /**
     * The date and time at which the charging process stoped.
     * @type {string}
     * @memberof Body
     */
    'ChargingEnd': string;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    'SessionEnd'?: string;
    /**
     * 
     * @type {Consumedenergy1}
     * @memberof Body
     */
    'ConsumedEnergy'?: Consumedenergy1 | null;
    /**
     * 
     * @type {Metervalueend}
     * @memberof Body
     */
    'MeterValueEnd'?: Metervalueend | null;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    'PenaltyTimeStart'?: string;
    /**
     * | Option | Description | | ------ | ----------- | | ConnectorError | Charging process cannot be started or stopped. EV driver needs to check if the the Plug is properly inserted or taken out from socket. | | CriticalError | Charging process stopped abruptly. Reason: Physical check at the station is required. Station cannot be reset online. <br /> Or <br /> Error with the software or hardware of the station locally. <br /> Or <br /> Communication failure with the vehicle. <br /> Or <br /> The error needs to be investigated <br /> Or <br /> Ground Failure | 
     * @type {string}
     * @memberof Body
     */
    'ErrorType': string;
    /**
     * 
     * @type {string}
     * @memberof Body
     */
    'ErrorAdditionalInfo'?: string;
}


/**
 * ChargingFacility
 * @export
 * @interface ChargingFacility
 */
export interface ChargingFacility {
    /**
     * Charging Facility power type (e.g. AC or DC)
     * @type {string}
     * @memberof ChargingFacility
     */
    'PowerType': string;
    /**
     * 
     * @type {number}
     * @memberof ChargingFacility
     */
    'Voltage'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChargingFacility
     */
    'Amperage'?: number | null;
    /**
     * Charging Facility power in kW
     * @type {number}
     * @memberof ChargingFacility
     */
    'Power': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChargingFacility
     */
    'ChargingModes'?: Array<string> | null;
}
/**
 * The type of ChargingNotification
 * @export
 * @enum {string}
 */

export const ChargingNotificationType = {
    Start: 'Start',
    Progress: 'Progress',
    End: 'End',
    Error: 'Error'
} as const;

export type ChargingNotificationType = typeof ChargingNotificationType[keyof typeof ChargingNotificationType];


/**
 * Total CO2 emited by the energy source being used by this charging station to supply energy to EV. Units are in g/kWh
 * @export
 * @interface Co2Emission
 */
export interface Co2Emission {
}
/**
 * The difference between MeterValueEnd and MeterValueStart in kWh.
 * @export
 * @interface Consumedenergy
 */
export interface Consumedenergy {
}
/**
 * The difference between MeterValueEnd and MeterValueStart in kWh.
 * @export
 * @interface Consumedenergy1
 */
export interface Consumedenergy1 {
}
/**
 * This is consumed energy when from Start of charging process till the charging progress notification generated (EventOccurred)  Either ChargingDuration or ConsumedEnergyProgress should be provided. Both can also be provided with each progress notification. 
 * @export
 * @interface Consumedenergyprogress
 */
export interface Consumedenergyprogress {
}
/**
 * The acknowledgement is a message that is sent in response to several requests.  * To `SEND` and `RECEIVE` * Implementation: `MANDATORY` 
 * @export
 * @interface ERoamingAcknowledgment
 */
export interface ERoamingAcknowledgment {
    /**
     * If result is true, the message was received and the respective operation was performed successfully.  If result is false, the message was received and the respective operation was not performed successfully. 
     * @type {boolean}
     * @memberof ERoamingAcknowledgment
     */
    'Result': boolean;
    /**
     * 
     * @type {StatusCode}
     * @memberof ERoamingAcknowledgment
     */
    'StatusCode': StatusCode;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAcknowledgment
     */
    'SessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAcknowledgment
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAcknowledgment
     */
    'EMPPartnerSessionID'?: string | null;
}
/**
 * Note:   * To `RECEIVE`   * Implementation: `MANDATORY`  eRoamingAuthorizationStart is a message that authorizes a user to charge a car. NOTE: This message describes the response which has to be receive in response to the eRoamingAuthorizeStart. 
 * @export
 * @interface ERoamingAuthorizationStart
 */
export interface ERoamingAuthorizationStart {
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizationStart
     */
    'SessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizationStart
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizationStart
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizationStart
     */
    'ProviderID'?: string | null;
    /**
     * Information specifying whether the user is authorized to charge or not.  | Option | Description | | ------ | ----------- | | Authorized | User is authorized | | NotAuthorized | User is not authorized | 
     * @type {string}
     * @memberof ERoamingAuthorizationStart
     */
    'AuthorizationStatus': string;
    /**
     * 
     * @type {StatusCode}
     * @memberof ERoamingAuthorizationStart
     */
    'StatusCode': StatusCode;
    /**
     * 
     * @type {Array<ERoamingAuthorizationStartAuthorizationStopIdentificationsInner>}
     * @memberof ERoamingAuthorizationStart
     */
    'AuthorizationStopIdentifications'?: Array<ERoamingAuthorizationStartAuthorizationStopIdentificationsInner> | null;
}
/**
 * ERoamingAuthorizationStartAuthorizationStopIdentificationsInner
 * @export
 * @interface ERoamingAuthorizationStartAuthorizationStopIdentificationsInner
 */
export interface ERoamingAuthorizationStartAuthorizationStopIdentificationsInner {
    /**
     * 
     * @type {RFIDMifareFamilyIdentification}
     * @memberof ERoamingAuthorizationStartAuthorizationStopIdentificationsInner
     */
    'RFIDMifareFamilyIdentification'?: RFIDMifareFamilyIdentification | null;
    /**
     * 
     * @type {RFIDIdentification}
     * @memberof ERoamingAuthorizationStartAuthorizationStopIdentificationsInner
     */
    'RFIDIdentification'?: RFIDIdentification | null;
    /**
     * 
     * @type {QRCodeIdentificationOutput}
     * @memberof ERoamingAuthorizationStartAuthorizationStopIdentificationsInner
     */
    'QRCodeIdentification'?: QRCodeIdentificationOutput | null;
    /**
     * 
     * @type {PlugAndChargeIdentification}
     * @memberof ERoamingAuthorizationStartAuthorizationStopIdentificationsInner
     */
    'PlugAndChargeIdentification'?: PlugAndChargeIdentification | null;
    /**
     * 
     * @type {RemoteIdentification}
     * @memberof ERoamingAuthorizationStartAuthorizationStopIdentificationsInner
     */
    'RemoteIdentification'?: RemoteIdentification | null;
}
/**
 * Note:   * To `RECEIVE`   * Implementation: `OPTIONAL`  eRoamingAuthorizeStop is a message to request an authorization for stopping a charging process.  Note:  This message describes the response which has to be received in return to the eRoamingAuthorizeStop request. 
 * @export
 * @interface ERoamingAuthorizationStop
 */
export interface ERoamingAuthorizationStop {
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizationStop
     */
    'SessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizationStop
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizationStop
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizationStop
     */
    'ProviderID'?: string | null;
    /**
     * Information specifying whether the user is authorized to charge or not.  | Option | Description | | ------ | ----------- | | Authorized | User is authorized | | NotAuthorized | User is not authorized | 
     * @type {string}
     * @memberof ERoamingAuthorizationStop
     */
    'AuthorizationStatus': string;
    /**
     * 
     * @type {StatusCode}
     * @memberof ERoamingAuthorizationStop
     */
    'StatusCode': StatusCode;
}
/**
 * ERoamingAuthorizeRemoteReservationStart
 * @export
 * @interface ERoamingAuthorizeRemoteReservationStart
 */
export interface ERoamingAuthorizeRemoteReservationStart {
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStart
     */
    'SessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStart
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStart
     */
    'EMPPartnerSessionId'?: string | null;
    /**
     * The ProviderID is defined by Hubject and is used to identify the EMP  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN  `^([A-Za-z]{2}\\-?[A-Za-z0-9]{3}|[A-Za-z]{2}[\\*|-]?[A-Za-z0-9]{3})$`  The expression validates the string as ProviderID including the preceding country code, which is part of EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the ProviderID is provided corresponding to ISO, the country code `MUST` be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ-â€ is optional.  Examples ISO: â€œDE8EOâ€, â€œDE-8EOâ€  Examples DIN: â€œDE8EOâ€, â€œDE*8EOâ€, â€œDE-8EOâ€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStart
     */
    'ProviderID': string;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStart
     */
    'EvseID': string;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingAuthorizeRemoteReservationStart
     */
    'Identification': Identification;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStart
     */
    'PartnerProductID'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ERoamingAuthorizeRemoteReservationStart
     */
    'Duration'?: number | null;
}
/**
 * ERoamingAuthorizeRemoteReservationStop
 * @export
 * @interface ERoamingAuthorizeRemoteReservationStop
 */
export interface ERoamingAuthorizeRemoteReservationStop {
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStop
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStop
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStop
     */
    'EMPPartnerSessionId'?: string | null;
    /**
     * The ProviderID is defined by Hubject and is used to identify the EMP  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN  `^([A-Za-z]{2}\\-?[A-Za-z0-9]{3}|[A-Za-z]{2}[\\*|-]?[A-Za-z0-9]{3})$`  The expression validates the string as ProviderID including the preceding country code, which is part of EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the ProviderID is provided corresponding to ISO, the country code `MUST` be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ-â€ is optional.  Examples ISO: â€œDE8EOâ€, â€œDE-8EOâ€  Examples DIN: â€œDE8EOâ€, â€œDE*8EOâ€, â€œDE-8EOâ€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStop
     */
    'ProviderID': string;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteReservationStop
     */
    'EvseID': string;
}
/**
 * ERoamingAuthorizeRemoteStart
 * @export
 * @interface ERoamingAuthorizeRemoteStart
 */
export interface ERoamingAuthorizeRemoteStart {
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStart
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStart
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStart
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * The ProviderID is defined by Hubject and is used to identify the EMP  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN  `^([A-Za-z]{2}\\-?[A-Za-z0-9]{3}|[A-Za-z]{2}[\\*|-]?[A-Za-z0-9]{3})$`  The expression validates the string as ProviderID including the preceding country code, which is part of EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the ProviderID is provided corresponding to ISO, the country code `MUST` be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ-â€ is optional.  Examples ISO: â€œDE8EOâ€, â€œDE-8EOâ€  Examples DIN: â€œDE8EOâ€, â€œDE*8EOâ€, â€œDE-8EOâ€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStart
     */
    'ProviderID': string;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStart
     */
    'EvseID': string;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingAuthorizeRemoteStart
     */
    'Identification': Identification;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStart
     */
    'PartnerProductID'?: string | null;
}
/**
 * ERoamingAuthorizeRemoteStop
 * @export
 * @interface ERoamingAuthorizeRemoteStop
 */
export interface ERoamingAuthorizeRemoteStop {
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStop
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStop
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStop
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * The ProviderID is defined by Hubject and is used to identify the EMP  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN  `^([A-Za-z]{2}\\-?[A-Za-z0-9]{3}|[A-Za-z]{2}[\\*|-]?[A-Za-z0-9]{3})$`  The expression validates the string as ProviderID including the preceding country code, which is part of EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the ProviderID is provided corresponding to ISO, the country code `MUST` be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ-â€ is optional.  Examples ISO: â€œDE8EOâ€, â€œDE-8EOâ€  Examples DIN: â€œDE8EOâ€, â€œDE*8EOâ€, â€œDE-8EOâ€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStop
     */
    'ProviderID': string;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeRemoteStop
     */
    'EvseID': string;
}
/**
 * Best Practices: * The EVSE ID is optional for this message which is e.g. defined after the RFID authorization at a charge point. If the Evse ID can be provided, we recommend to include the EVSE ID in this message; it will help for support matters. * If an authorization process could not successfully be executed, please set an error code by refering to the error code list mentioned in the OICP document. 
 * @export
 * @interface ERoamingAuthorizeStart
 */
export interface ERoamingAuthorizeStart {
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeStart
     */
    'SessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeStart
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeStart
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeStart
     */
    'OperatorID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeStart
     */
    'EvseID'?: string | null;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingAuthorizeStart
     */
    'Identification': Identification;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeStart
     */
    'PartnerProductID'?: string | null;
}
/**
 * ERoamingAuthorizeStop
 * @export
 * @interface ERoamingAuthorizeStop
 */
export interface ERoamingAuthorizeStop {
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeStop
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeStop
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeStop
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingAuthorizeStop
     */
    'OperatorID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingAuthorizeStop
     */
    'EvseID'?: string | null;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingAuthorizeStop
     */
    'Identification': Identification;
}
/**
 * eRoamingChargeDetailRecord is a message that contains charging process details (e.g. meter values).
 * @export
 * @interface ERoamingChargeDetailRecord
 */
export interface ERoamingChargeDetailRecord {
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'PartnerProductID'?: string | null;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'EvseID': string;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingChargeDetailRecord
     */
    'Identification': Identification;
    /**
     * The date and time at which the charging process started.
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'ChargingStart': string;
    /**
     * The date and time at which the charging process stoped.
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'ChargingEnd': string;
    /**
     * The date and time at which the session started, e.g. swipe of RFID or cable connected.
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'SessionStart': string;
    /**
     * The date and time at which the session started, e.g. swipe of RFID or cable connected.
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'SessionEnd': string;
    /**
     * 
     * @type {Metervaluestart}
     * @memberof ERoamingChargeDetailRecord
     */
    'MeterValueStart'?: Metervaluestart | null;
    /**
     * 
     * @type {Metervalueend}
     * @memberof ERoamingChargeDetailRecord
     */
    'MeterValueEnd'?: Metervalueend | null;
    /**
     * 
     * @type {ERoamingChargeDetailRecordMeterValueInBetween}
     * @memberof ERoamingChargeDetailRecord
     */
    'MeterValueInBetween'?: ERoamingChargeDetailRecordMeterValueInBetween | null;
    /**
     * 
     * @type {Consumedenergy}
     * @memberof ERoamingChargeDetailRecord
     */
    'ConsumedEnergy': Consumedenergy;
    /**
     * 
     * @type {Array<ERoamingChargeDetailRecordSignedMeteringValuesInner>}
     * @memberof ERoamingChargeDetailRecord
     */
    'SignedMeteringValues'?: Array<ERoamingChargeDetailRecordSignedMeteringValuesInner> | null;
    /**
     * 
     * @type {ERoamingChargeDetailRecordCalibrationLawVerificationInfo}
     * @memberof ERoamingChargeDetailRecord
     */
    'CalibrationLawVerificationInfo'?: ERoamingChargeDetailRecordCalibrationLawVerificationInfo | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'HubOperatorID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecord
     */
    'HubProviderId'?: string | null;
}
/**
 * This field provides additional information which could help directly or indirectly to verify the signed metering value by using respective Transparency Software
 * @export
 * @interface ERoamingChargeDetailRecordCalibrationLawVerificationInfo
 */
export interface ERoamingChargeDetailRecordCalibrationLawVerificationInfo {
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecordCalibrationLawVerificationInfo
     */
    'CalibrationLawCertificateID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecordCalibrationLawVerificationInfo
     */
    'PublicKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecordCalibrationLawVerificationInfo
     */
    'MeteringSignatureUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecordCalibrationLawVerificationInfo
     */
    'MeteringSignatureEncodingFormat'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecordCalibrationLawVerificationInfo
     */
    'SignedMeteringValuesVerificationInstruction'?: string | null;
}
/**
 * List of meter values that may have been taken in between (kWh).
 * @export
 * @interface ERoamingChargeDetailRecordMeterValueInBetween
 */
export interface ERoamingChargeDetailRecordMeterValueInBetween {
    /**
     * 
     * @type {Array<ERoamingChargeDetailRecordMeterValueInBetweenMeterValuesInner>}
     * @memberof ERoamingChargeDetailRecordMeterValueInBetween
     */
    'meterValues'?: Array<ERoamingChargeDetailRecordMeterValueInBetweenMeterValuesInner> | null;
}
/**
 * 
 * @export
 * @interface ERoamingChargeDetailRecordMeterValueInBetweenMeterValuesInner
 */
export interface ERoamingChargeDetailRecordMeterValueInBetweenMeterValuesInner {
}
/**
 * ERoamingChargeDetailRecordSignedMeteringValuesInner
 * @export
 * @interface ERoamingChargeDetailRecordSignedMeteringValuesInner
 */
export interface ERoamingChargeDetailRecordSignedMeteringValuesInner {
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecordSignedMeteringValuesInner
     */
    'SignedMeteringValue'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargeDetailRecordSignedMeteringValuesInner
     */
    'MeteringStatus'?: string | null;
}
/**
 * A customer of an EMP has fully charged a vehicle at a charging station of a CPO. The charging process was started with an eRoamingAuthorizeStart or an eRoamingAuthorizeRemoteStart operation. The energy flow has ended, but the process has not yet been stopped and the vehicle is blocking the charging station.  The CPOâ€™s backend system MAY send a ChargingNotification of type â€œEndâ€ after the CPO considers the charging of an EV concluded (because no energy is transmitted anymore) in order to inform the EMP that the actual charging (the energy flow) of the vehicle has stopped. The charging process has not yet been stopped by the customer and the session is still active.  The ChargingNotification of type â€œEndâ€ is a message that contains information about the charging end of a session (e.g. ConsumedEnergy, ChargingEnd). 
 * @export
 * @interface ERoamingChargingNotificationEnd
 */
export interface ERoamingChargingNotificationEnd {
    /**
     * 
     * @type {ChargingNotificationType}
     * @memberof ERoamingChargingNotificationEnd
     */
    'Type': ChargingNotificationType;
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingChargingNotificationEnd
     */
    'Identification'?: Identification | null;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'EvseID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'ChargingStart'?: string | null;
    /**
     * The date and time at which the charging process stoped.
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'ChargingEnd': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'SessionStart'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'SessionEnd'?: string | null;
    /**
     * 
     * @type {Consumedenergy1}
     * @memberof ERoamingChargingNotificationEnd
     */
    'ConsumedEnergy'?: Consumedenergy1 | null;
    /**
     * 
     * @type {Metervaluestart}
     * @memberof ERoamingChargingNotificationEnd
     */
    'MeterValueStart'?: Metervaluestart | null;
    /**
     * 
     * @type {Metervalueend}
     * @memberof ERoamingChargingNotificationEnd
     */
    'MeterValueEnd'?: Metervalueend | null;
    /**
     * 
     * @type {ERoamingChargeDetailRecordMeterValueInBetween}
     * @memberof ERoamingChargingNotificationEnd
     */
    'MeterValueInBetween'?: ERoamingChargeDetailRecordMeterValueInBetween | null;
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'OperatorID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'PartnerProductID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationEnd
     */
    'PenaltyTimeStart'?: string | null;
}


/**
 * A customer of EMP Authorizes the charging session at particular charging station (via any means for eg REFID card, Mobile etc). Due to some errors sometime, it is possible that charging does not start or charging process is abruptly stopped or fluctuations in the charging process. It is really important for Customer as well as EMP to know what exactly is happening at the charging process. This notification eventually helps EMPs well informed about the problem occurred with the charging process. This information can be easily passed onto Customer so that he/she can take appropriate action.  The CPOâ€™s backend system MAY send a ChargingNotification of type â€œErrorâ€ after the CPO gets an information about the error at the charging station. The CPO can transmit one of the ErrorClass defined by Hubject along with the additional information which elaborated the Error. The customer has to take one of the three action EV needs to be charged at some different station, Cables is properly attached or the error is for information only no action required by customer.  The ChargingNotification of type â€œErrorâ€ is a message that contains information about the charging end of a session (e.g. ErrorClass, ErrorAdditionalInfo). 
 * @export
 * @interface ERoamingChargingNotificationError
 */
export interface ERoamingChargingNotificationError {
    /**
     * 
     * @type {ChargingNotificationType}
     * @memberof ERoamingChargingNotificationError
     */
    'Type': ChargingNotificationType;
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationError
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationError
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationError
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingChargingNotificationError
     */
    'Identification'?: Identification | null;
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationError
     */
    'OperatorID': string;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationError
     */
    'EvseID': string;
    /**
     * | Option | Description | | ------ | ----------- | | ConnectorError | Charging process cannot be started or stopped. EV driver needs to check if the the Plug is properly inserted or taken out from socket. | | CriticalError | Charging process stopped abruptly. Reason: Physical check at the station is required. Station cannot be reset online. <br /> Or <br /> Error with the software or hardware of the station locally. <br /> Or <br /> Communication failure with the vehicle. <br /> Or <br /> The error needs to be investigated <br /> Or <br /> Ground Failure | 
     * @type {string}
     * @memberof ERoamingChargingNotificationError
     */
    'ErrorType': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationError
     */
    'ErrorAdditionalInfo'?: string | null;
}


/**
 * A customer of EMP has started the charging session. Just like as that of regular gasoline stations customer would like to know either how much charging Duration have passed or how much energy is consumed by the EV so far. This information will help Customer to decide if he/she wants to stop the charging session as per their affordability or journey planning.  The CPOâ€™s backend system MAY send a ChargingNotification of type â€œProgessâ€ after the CPO gets the charging energy or time information from EVSEID. This is required in order to inform the EMP that the progress energy or chargingduration for a perticular charging session.  The ChargingNotification of type â€œProgressâ€ is a message that contains information about the charging Duration or energy consumed during charging process (e.g. EventOccurred, ChargingDuration, ConsumedEnergyProgress). 
 * @export
 * @interface ERoamingChargingNotificationProgress
 */
export interface ERoamingChargingNotificationProgress {
    /**
     * 
     * @type {ChargingNotificationType}
     * @memberof ERoamingChargingNotificationProgress
     */
    'Type': ChargingNotificationType;
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingChargingNotificationProgress
     */
    'Identification'?: Identification | null;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'EvseID': string;
    /**
     * The date and time at which the charging process started.
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'ChargingStart': string;
    /**
     * The date and time at which the charging progress parameters are captured.
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'EventOccurred': string;
    /**
     * 
     * @type {number}
     * @memberof ERoamingChargingNotificationProgress
     */
    'ChargingDuration'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'SessionStart'?: string | null;
    /**
     * 
     * @type {Consumedenergyprogress}
     * @memberof ERoamingChargingNotificationProgress
     */
    'ConsumedEnergyProgress'?: Consumedenergyprogress | null;
    /**
     * 
     * @type {Metervaluestart}
     * @memberof ERoamingChargingNotificationProgress
     */
    'MeterValueStart'?: Metervaluestart | null;
    /**
     * 
     * @type {ERoamingChargeDetailRecordMeterValueInBetween}
     * @memberof ERoamingChargingNotificationProgress
     */
    'MeterValueInBetween'?: ERoamingChargeDetailRecordMeterValueInBetween | null;
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'OperatorID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationProgress
     */
    'PartnerProductID'?: string | null;
}


/**
 * A customer of EMP Authorizes the charging session at particular charging station (via any means for eg REFID card, Mobile etc). The charging session is authorized by Hubject / CPO system. The authorization of charging process and plugging the cable in EV does not guarantee that energy flow into the Vehicle is initiated. It is really important for for EMP and its end consumer to know if the charging has started.  The CPOâ€™s backend system MAY send a ChargingNotification of type â€œStartâ€ after the CPO considers the charging of an EV is started (since energy flow have started) in order to inform the EMP that the actual charging (the energy flow) of the vehicle has started.  The ChargingNotification of type â€œStartâ€ is a message that contains information about the charging start of a session (e.g. ChargingStart). 
 * @export
 * @interface ERoamingChargingNotificationStart
 */
export interface ERoamingChargingNotificationStart {
    /**
     * 
     * @type {ChargingNotificationType}
     * @memberof ERoamingChargingNotificationStart
     */
    'Type': ChargingNotificationType;
    /**
     * The Hubject SessionID that identifies the process  A string that `MUST` be valid with respect to the following regular expression:  `^[A-Za-z0-9]{8}(-[A-Za-z0-9]{4}){3}-[A-Za-z0-9]{12}$`  The expression validates the string as a GUID.  Example: â€œb2688855-7f00-0002-6d8e-48d883f6abb6â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationStart
     */
    'SessionID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationStart
     */
    'CPOPartnerSessionID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationStart
     */
    'EMPPartnerSessionID'?: string | null;
    /**
     * 
     * @type {Identification}
     * @memberof ERoamingChargingNotificationStart
     */
    'Identification'?: Identification | null;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationStart
     */
    'EvseID': string;
    /**
     * The date and time at which the charging process started.
     * @type {string}
     * @memberof ERoamingChargingNotificationStart
     */
    'ChargingStart': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationStart
     */
    'SessionStart'?: string | null;
    /**
     * 
     * @type {Metervaluestart}
     * @memberof ERoamingChargingNotificationStart
     */
    'MeterValueStart'?: Metervaluestart | null;
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingChargingNotificationStart
     */
    'OperatorID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingChargingNotificationStart
     */
    'PartnerProductID'?: string | null;
}


/**
 * eRoamingPushEVSEPricing is a message that is sent in order to upload a list of EVSEs and the pricing products (i.e. tarrifs) applicable for (charging or reservation) sessions at these EVSEs.
 * @export
 * @interface ERoamingPushEVSEPricing
 */
export interface ERoamingPushEVSEPricing {
    /**
     * Describes the action that has to be performed by Hubject with the provided data.
     * @type {string}
     * @memberof ERoamingPushEVSEPricing
     */
    'ActionType': string;
    /**
     * A list of EVSEs and their respective pricing product relation
     * @type {Array<ERoamingPushEVSEPricingEVSEPricingInner>}
     * @memberof ERoamingPushEVSEPricing
     */
    'EVSEPricing': Array<ERoamingPushEVSEPricingEVSEPricingInner>;
}
/**
 * ERoamingPushEVSEPricingEVSEPricingInner
 * @export
 * @interface ERoamingPushEVSEPricingEVSEPricingInner
 */
export interface ERoamingPushEVSEPricingEVSEPricingInner {
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingPushEVSEPricingEVSEPricingInner
     */
    'EvseID': string;
    /**
     * The ProviderID is defined by Hubject and is used to identify the EMP  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN  `^([A-Za-z]{2}\\-?[A-Za-z0-9]{3}|[A-Za-z]{2}[\\*|-]?[A-Za-z0-9]{3})$`  The expression validates the string as ProviderID including the preceding country code, which is part of EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the ProviderID is provided corresponding to ISO, the country code `MUST` be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ-â€ is optional.  Examples ISO: â€œDE8EOâ€, â€œDE-8EOâ€  Examples DIN: â€œDE8EOâ€, â€œDE*8EOâ€, â€œDE-8EOâ€   In case the data is to be made available for all EMPs (e.g. for Offer-to-All prices), the asterix character (*) can be set as the value in this field.   
     * @type {string}
     * @memberof ERoamingPushEVSEPricingEVSEPricingInner
     */
    'ProviderID': string;
    /**
     * A list of pricing products applicable per EvseID
     * @type {Array<string>}
     * @memberof ERoamingPushEVSEPricingEVSEPricingInner
     */
    'EvseIDProductList': Array<string>;
}
/**
 * ERoamingPushEvseData
 * @export
 * @interface ERoamingPushEvseData
 */
export interface ERoamingPushEvseData {
    /**
     * Describes the action that has to be performed by Hubject with the provided data.
     * @type {string}
     * @memberof ERoamingPushEvseData
     */
    'ActionType': string;
    /**
     * 
     * @type {ERoamingPushEvseDataOperatorEvseData}
     * @memberof ERoamingPushEvseData
     */
    'OperatorEvseData': ERoamingPushEvseDataOperatorEvseData;
}
/**
 * ERoamingPushEvseDataOperatorEvseData
 * @export
 * @interface ERoamingPushEvseDataOperatorEvseData
 */
export interface ERoamingPushEvseDataOperatorEvseData {
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingPushEvseDataOperatorEvseData
     */
    'OperatorID': string;
    /**
     * Free text for operator
     * @type {string}
     * @memberof ERoamingPushEvseDataOperatorEvseData
     */
    'OperatorName': string;
    /**
     * EVSE entries
     * @type {Array<EvseDataRecord>}
     * @memberof ERoamingPushEvseDataOperatorEvseData
     */
    'EvseDataRecord': Array<EvseDataRecord>;
}
/**
 * eRoamingPushEvseStatus is a message that is sent in order to upload EVSE status data to Hubject.
 * @export
 * @interface ERoamingPushEvseStatus
 */
export interface ERoamingPushEvseStatus {
    /**
     * Describes the action that has to be performed by Hubject with the provided data.
     * @type {string}
     * @memberof ERoamingPushEvseStatus
     */
    'ActionType': string;
    /**
     * 
     * @type {ERoamingPushEvseStatusOperatorEvseStatus}
     * @memberof ERoamingPushEvseStatus
     */
    'OperatorEvseStatus': ERoamingPushEvseStatusOperatorEvseStatus;
}
/**
 * Indicates the Eves status
 * @export
 * @interface ERoamingPushEvseStatusOperatorEvseStatus
 */
export interface ERoamingPushEvseStatusOperatorEvseStatus {
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingPushEvseStatusOperatorEvseStatus
     */
    'OperatorID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingPushEvseStatusOperatorEvseStatus
     */
    'OperatorName'?: string | null;
    /**
     * EvseStatus list
     * @type {Array<ERoamingPushEvseStatusOperatorEvseStatusEvseStatusRecordInner>}
     * @memberof ERoamingPushEvseStatusOperatorEvseStatus
     */
    'EvseStatusRecord': Array<ERoamingPushEvseStatusOperatorEvseStatusEvseStatusRecordInner>;
}
/**
 * ERoamingPushEvseStatusOperatorEvseStatusEvseStatusRecordInner
 * @export
 * @interface ERoamingPushEvseStatusOperatorEvseStatusEvseStatusRecordInner
 */
export interface ERoamingPushEvseStatusOperatorEvseStatusEvseStatusRecordInner {
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof ERoamingPushEvseStatusOperatorEvseStatusEvseStatusRecordInner
     */
    'EvseID': string;
    /**
     * | Option | Description |                 | ------ | ----------- | | Available | Charging Spot is available for charging. | | Reserved | Charging Spot is reserved and not available for charging. | | Occupied | Charging Spot is busy. | | OutOfService | Charging Spot is out of service and not available for charging. | | EvseNotFound | The requested EvseID and EVSE status does not exist within the Hubject database. | | Unknown | No status information available. | 
     * @type {string}
     * @memberof ERoamingPushEvseStatusOperatorEvseStatusEvseStatusRecordInner
     */
    'EvseStatus': string;
}
/**
 * eRoamingPushPricingProductData is a message that is sent in order to upload data pertaining to a CPOâ€™s pricing products (i.e. tarrifs) to the Hubject system.
 * @export
 * @interface ERoamingPushPricingProductData
 */
export interface ERoamingPushPricingProductData {
    /**
     * Describes the action that has to be performed by Hubject with the provided data.
     * @type {string}
     * @memberof ERoamingPushPricingProductData
     */
    'ActionType': string;
    /**
     * 
     * @type {ERoamingPushPricingProductDataPricingProductData}
     * @memberof ERoamingPushPricingProductData
     */
    'PricingProductData': ERoamingPushPricingProductDataPricingProductData;
}
/**
 * Details of pricing products offered by a particular operator for a specific provider
 * @export
 * @interface ERoamingPushPricingProductDataPricingProductData
 */
export interface ERoamingPushPricingProductDataPricingProductData {
    /**
     * A string that MUST be valid with respect to the following regular expression: ISO | DIN  ^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3})|(\\+?[0-9]{1,3}\\*[0-9]{3}))$ The expression validates the string as OperatorID including the preceding country code, which is part of EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118. In case the OperatorID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional.  In case the OperatorID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*A36â€, â€œDEA36â€  Example DIN: â€œ+49*536â€ 
     * @type {string}
     * @memberof ERoamingPushPricingProductDataPricingProductData
     */
    'OperatorID': string;
    /**
     * 
     * @type {string}
     * @memberof ERoamingPushPricingProductDataPricingProductData
     */
    'OperatorName'?: string | null;
    /**
     * The ProviderID is defined by Hubject and is used to identify the EMP  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN  `^([A-Za-z]{2}\\-?[A-Za-z0-9]{3}|[A-Za-z]{2}[\\*|-]?[A-Za-z0-9]{3})$`  The expression validates the string as ProviderID including the preceding country code, which is part of EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the ProviderID is provided corresponding to ISO, the country code `MUST` be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ-â€ is optional.  Examples ISO: â€œDE8EOâ€, â€œDE-8EOâ€  Examples DIN: â€œDE8EOâ€, â€œDE*8EOâ€, â€œDE-8EOâ€   In case the data is to be made available for all EMPs (e.g. for Offer-to-All prices), the asterix character (*) can be set as the value in this field.   
     * @type {string}
     * @memberof ERoamingPushPricingProductDataPricingProductData
     */
    'ProviderID': string;
    /**
     * 
     * @type {Pricingdefaultprice}
     * @memberof ERoamingPushPricingProductDataPricingProductData
     */
    'PricingDefaultPrice': Pricingdefaultprice;
    /**
     * The ProductPriceCurrencyType allows for the list of active codes of the official ISO 4217 currency names.  For the full list of active codes of the official ISO 4217 currencies, see: [https://www.iso.org/iso-4217-currency-codes.html](https://www.iso.org/iso-4217-currency-codes.html)  Examples:  | Option | Description | | ------ | ----------- | | EUR | Euro | | CHF | Swiss franc | | CAD | Canadian Dollar | | GBP | Pound sterling 
     * @type {string}
     * @memberof ERoamingPushPricingProductDataPricingProductData
     */
    'PricingDefaultPriceCurrency': string;
    /**
     * Default Reference Unit in time or kWh  | Option | Description | | ------ | ----------- | | HOUR | Defined Reference Unit Type | | KILOWATT_HOUR | Defined Reference Unit Type | | MINUTE | Defined Reference Unit Type | 
     * @type {string}
     * @memberof ERoamingPushPricingProductDataPricingProductData
     */
    'PricingDefaultReferenceUnit': string;
    /**
     * A list of pricing products
     * @type {Array<PricingProductDataRecord>}
     * @memberof ERoamingPushPricingProductDataPricingProductData
     */
    'PricingProductDataRecords': Array<PricingProductDataRecord>;
}
/**
 * energy source that the charging station uses to supply electric energy
 * @export
 * @interface EnergySource
 */
export interface EnergySource {
    /**
     * 
     * @type {string}
     * @memberof EnergySource
     */
    'Energy'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EnergySource
     */
    'Percentage'?: number | null;
}
/**
 * EvseDataRecord
 * @export
 * @interface EvseDataRecord
 */
export interface EvseDataRecord {
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'deltaType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'lastUpdate'?: string | null;
    /**
     * The ID that identifies the charging spot.  A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  `^(([A-Za-z]{2}\\*?[A-Za-z0-9]{3}\\*?E[A-Za-z0-9\\*]{1,30})|(\\+?[0-9]{1,3}\\*[0-9]{3}\\*[0-9\\*]{1,32}))$` The expression validates the string as EvseID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvseID is provided corresponding to ISO, the country code MUST be provided as Alpha-2-Code (DIN EN ISO-3166-1) and the separator character â€œ*â€ is optional. Furthermore the ID MUST provide an â€œEâ€ after the OperatorID in order to identify the ID as ISO EvseID without doubt.  In case the EvseID is provided corresponding to DIN, the country code MUST be provided according to the international telecommunication numbering plan (ITU-T E.164:11/2010) and the separator character â€œ*â€ is mandatory.  Examples ISO: â€œDE*AB7*E840*6487â€, â€œDEAB7E8406487â€  Example DIN: â€œ+49*810*000*438â€ 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'EvseID': string;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'ChargingPoolID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'ChargingStationId'?: string | null;
    /**
     * Name of the charging station
     * @type {Array<InfoTextType>}
     * @memberof EvseDataRecord
     */
    'ChargingStationNames': Array<InfoTextType>;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'HardwareManufacturer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'ChargingStationImage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'SubOperatorName'?: string | null;
    /**
     * 
     * @type {AddressIso19773}
     * @memberof EvseDataRecord
     */
    'Address': AddressIso19773;
    /**
     * 
     * @type {GeoCoordinates}
     * @memberof EvseDataRecord
     */
    'GeoCoordinates': GeoCoordinates;
    /**
     * List of plugs that are supported.
     * @type {Array<Plug>}
     * @memberof EvseDataRecord
     */
    'Plugs': Array<Plug>;
    /**
     * 
     * @type {boolean}
     * @memberof EvseDataRecord
     */
    'DynamicPowerLevel'?: boolean | null;
    /**
     * List of facilities that are supported.
     * @type {Array<ChargingFacility>}
     * @memberof EvseDataRecord
     */
    'ChargingFacilities': Array<ChargingFacility>;
    /**
     * If the Charging Station provides only renewable energy then the value `MUST` be â€trueâ€, if it use grey energy then value `MUST` be â€œfalseâ€. 
     * @type {boolean}
     * @memberof EvseDataRecord
     */
    'RenewableEnergy': boolean;
    /**
     * 
     * @type {Array<EnergySource>}
     * @memberof EvseDataRecord
     */
    'EnergySource'?: Array<EnergySource> | null;
    /**
     * 
     * @type {PullEvseDataRecordEnvironmentalImpact}
     * @memberof EvseDataRecord
     */
    'EnvironmentalImpact'?: PullEvseDataRecordEnvironmentalImpact | null;
    /**
     * | Option | Description | | Local | Calibration law data is shown at the charging station. | | External | Calibration law data is provided externaly. | | Not Available | Calibration law data is not provided. | 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'CalibrationLawDataAvailability': string;
    /**
     * List of authentication modes that are supported.
     * @type {Array<AuthenticationMode>}
     * @memberof EvseDataRecord
     */
    'AuthenticationModes': Array<AuthenticationMode>;
    /**
     * 
     * @type {number}
     * @memberof EvseDataRecord
     */
    'MaxCapacity'?: number | null;
    /**
     * List of payment options that are supported.
     * @type {Array<PaymentOption>}
     * @memberof EvseDataRecord
     */
    'PaymentOptions': Array<PaymentOption>;
    /**
     * List of value added services that are supported.
     * @type {Array<ValueAddedService>}
     * @memberof EvseDataRecord
     */
    'ValueAddedServices': Array<ValueAddedService>;
    /**
     * 
     * @type {Accessibility}
     * @memberof EvseDataRecord
     */
    'Accessibility': Accessibility;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'AccessibilityLocation'?: string | null;
    /**
     * `^\\+[0-9]{5,15}$` The expression validates the string as a telephone number starting with â€œ+â€ and containing only numbers.  Example: â€œ+0305132787â€ 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'HotlinePhoneNumber': string;
    /**
     * 
     * @type {Array<InfoTextType>}
     * @memberof EvseDataRecord
     */
    'AdditionalInfo'?: Array<InfoTextType> | null;
    /**
     * 
     * @type {Array<InfoTextType>}
     * @memberof EvseDataRecord
     */
    'ChargingStationLocationReference'?: Array<InfoTextType> | null;
    /**
     * 
     * @type {GeoCoordinates}
     * @memberof EvseDataRecord
     */
    'GeoChargingPointEntrance'?: GeoCoordinates | null;
    /**
     * Set in case the charging spot is open 24 hours.
     * @type {boolean}
     * @memberof EvseDataRecord
     */
    'IsOpen24Hours': boolean;
    /**
     * 
     * @type {Array<OpeningTimes>}
     * @memberof EvseDataRecord
     */
    'OpeningTimes'?: Array<OpeningTimes> | null;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'HubOperatorID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EvseDataRecord
     */
    'ClearinghouseID'?: string | null;
    /**
     * Is eRoaming via intercharge at this charging station possible? If set to \"false\" the charge spot will not be started/stopped remotely via Hubject.
     * @type {boolean}
     * @memberof EvseDataRecord
     */
    'IsHubjectCompatible': boolean;
    /**
     * Values: true / false / auto This attribute indicates whether a CPO provides (dynamic) EVSE Status info in addition to the (static) EVSE Data for this EVSERecord. Value auto is set to true by Hubject if the operator offers Hubject EVSEStatus data.
     * @type {string}
     * @memberof EvseDataRecord
     */
    'DynamicInfoAvailable': string;
}


/**
 * Important  __One of the following three options `MUST` be provided__ 
 * @export
 * @interface GeoCoordinates
 */
export interface GeoCoordinates {
    /**
     * 
     * @type {GeoCoordinatesGoogle}
     * @memberof GeoCoordinates
     */
    'Google'?: GeoCoordinatesGoogle | null;
    /**
     * 
     * @type {GeoCoordinatesDecimalDegree}
     * @memberof GeoCoordinates
     */
    'DecimalDegree'?: GeoCoordinatesDecimalDegree | null;
    /**
     * 
     * @type {GeoCoordinatesDegreeMinuteSeconds}
     * @memberof GeoCoordinates
     */
    'DegreeMinuteSeconds'?: GeoCoordinatesDegreeMinuteSeconds | null;
}
/**
 * Geocoordinates using DecimalDegree Structure
 * @export
 * @interface GeoCoordinatesDecimalDegree
 */
export interface GeoCoordinatesDecimalDegree {
    /**
     * A string that `MUST` be valid with respect to the following regular expression:  `^-?1?\\d{1,2}\\.\\d{1,6}$` The expression validates the string as a geo coordinate (longitude or latitude) with decimal degree syntax.  Examples: â€œ9.360922â€, â€œ-21.568201â€ 
     * @type {string}
     * @memberof GeoCoordinatesDecimalDegree
     */
    'Longitude': string;
    /**
     * A string that `MUST` be valid with respect to the following regular expression:  `^-?1?\\d{1,2}\\.\\d{1,6}$` The expression validates the string as a geo coordinate (longitude or latitude) with decimal degree syntax.  Examples: â€œ9.360922â€, â€œ-21.568201â€ 
     * @type {string}
     * @memberof GeoCoordinatesDecimalDegree
     */
    'Latitude': string;
}
/**
 * Geocoordinates using DegreeMinutesSeconds Structure
 * @export
 * @interface GeoCoordinatesDegreeMinuteSeconds
 */
export interface GeoCoordinatesDegreeMinuteSeconds {
    /**
     * A string that `MUST` be valid with respect to the following regular expression:  `^-?1?\\d{1,2}Â°[ ]?\\d{1,2}\'[ ]?\\d{1,2}\\.\\d+\'\'$` The expression validates the string as a geo coordinate (longitude or latitude) consisting of degree, minutes, and seconds  Examples: â€œ9Â°21\'39.32\'\'â€, â€œ-21Â°34\'23.16\'\' 
     * @type {string}
     * @memberof GeoCoordinatesDegreeMinuteSeconds
     */
    'Longitude': string;
    /**
     * A string that `MUST` be valid with respect to the following regular expression:  `^-?1?\\d{1,2}Â°[ ]?\\d{1,2}\'[ ]?\\d{1,2}\\.\\d+\'\'$` The expression validates the string as a geo coordinate (longitude or latitude) consisting of degree, minutes, and seconds  Examples: â€œ9Â°21\'39.32\'\'â€, â€œ-21Â°34\'23.16\'\' 
     * @type {string}
     * @memberof GeoCoordinatesDegreeMinuteSeconds
     */
    'Latitude': string;
}
/**
 * Geocoordinates using Google Structure Based on WGS84 
 * @export
 * @interface GeoCoordinatesGoogle
 */
export interface GeoCoordinatesGoogle {
    /**
     * A string that `MUST` be valid with respect to the following regular expression:  `^-?1?\\d{1,2}\\.\\d{1,6}\\s*\\,?\\s*-?1?\\d{1,2}\\.\\d{1,6}$` The expression validates the string as geo coordinates with respect to the Google standard. The string contains latitude and longitude (in this sequence) separated by a space.  Example: â€œ47.662249 9.360922â€ 
     * @type {string}
     * @memberof GeoCoordinatesGoogle
     */
    'Coordinates': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Authentication data  1. The option RFIDIdentification `MUST` not be used in the eRoamingAuthorization process. For RFID Authorization, only the option RFIDMifareFamilyIdentification `SHOULD` be used in the respective eRoamingAuthorization messages. 2. For the Remote Authorization process, only the option RemoteIdentification MUST be used in the respective messages. 
 * @export
 * @interface Identification
 */
export interface Identification {
    /**
     * 
     * @type {RFIDMifareFamilyIdentification}
     * @memberof Identification
     */
    'RFIDMifareFamilyIdentification'?: RFIDMifareFamilyIdentification | null;
    /**
     * 
     * @type {RFIDIdentification}
     * @memberof Identification
     */
    'RFIDIdentification'?: RFIDIdentification | null;
    /**
     * 
     * @type {QRCodeIdentificationInput}
     * @memberof Identification
     */
    'QRCodeIdentification'?: QRCodeIdentificationInput | null;
    /**
     * 
     * @type {PlugAndChargeIdentification}
     * @memberof Identification
     */
    'PlugAndChargeIdentification'?: PlugAndChargeIdentification | null;
    /**
     * 
     * @type {RemoteIdentification}
     * @memberof Identification
     */
    'RemoteIdentification'?: RemoteIdentification | null;
}
/**
 * InfoTextType
 * @export
 * @interface InfoTextType
 */
export interface InfoTextType {
    /**
     * `^[a-z]{2,3}(?:-[A-Z]{2,3}(?:-[a-zA-Z]{4})?)?(?:-x-[a-zA-Z0-9]{1,8})?$`  The language in which the additional info text is provided  The expression validates the string as a language code as per ISO-639-1 or ISO-639-2/T  The LanguageCodeType is used in the AdditionalInfo field, which is part of the EvseDataRecordType. 
     * @type {string}
     * @memberof InfoTextType
     */
    'lang': string;
    /**
     * The Additional Info text
     * @type {string}
     * @memberof InfoTextType
     */
    'value': string;
}
/**
 * A value in kWh
 * @export
 * @interface Maximumproductchargingpower
 */
export interface Maximumproductchargingpower {
}
/**
 * The ending meter value in kWh.
 * @export
 * @interface Metervalueend
 */
export interface Metervalueend {
}
/**
 * The starting meter value in kWh.
 * @export
 * @interface Metervaluestart
 */
export interface Metervaluestart {
}
/**
 * Total NuclearWaste emited by the energy source being used by this charging station to supply energy to EV. Units are in g/kWh
 * @export
 * @interface Nuclearwaste
 */
export interface Nuclearwaste {
}
/**
 * OpeningTimes
 * @export
 * @interface OpeningTimes
 */
export interface OpeningTimes {
    /**
     * The starting and end time for pricing product applicability in the specified period 
     * @type {Array<OpeningTimesPeriodInner>}
     * @memberof OpeningTimes
     */
    'Period': Array<OpeningTimesPeriodInner>;
    /**
     * Day values to be used in specifying periods on which the product is available. Workdays = Monday â€“ Friday, Weekend = Saturday â€“ Sunday
     * @type {string}
     * @memberof OpeningTimes
     */
    'on': string;
}
/**
 * OpeningTimesPeriodInner
 * @export
 * @interface OpeningTimesPeriodInner
 */
export interface OpeningTimesPeriodInner {
    /**
     * The opening time
     * @type {string}
     * @memberof OpeningTimesPeriodInner
     */
    'begin': string;
    /**
     * The closing time
     * @type {string}
     * @memberof OpeningTimesPeriodInner
     */
    'end': string;
}
/**
 * | Option | Description | | ------ | ----------- | | No payment | Free. | | Direct | e. g. Cash, Card, SMS, ... | | Contract | i. e. Subscription  |  Note  `No Payment` can not be combined with other payment option 
 * @export
 * @enum {string}
 */

export const PaymentOption = {
    NoPayment: 'No Payment',
    Direct: 'Direct',
    Contract: 'Contract'
} as const;

export type PaymentOption = typeof PaymentOption[keyof typeof PaymentOption];


/**
 * | Option | Description | |Small Paddle Inductive | Defined plug type. | | Large Paddle Inductive | Defined plug type.| | AVCON Connector | Defined plug type.| | Tesla Connector | Defined plug type.| | NEMA 5-20 | Defined plug type.| | Type E French Standard | CEE 7/5. | | Type F Schuko | CEE 7/4. | | Type G British Standard | BS 1363. | | Type J Swiss Standard | SEV 1011. | | Type 1 Connector (Cable Attached) | Cable attached to IEC 62196-1 type 1, SAE J1772 connector. | | Type 2 Outlet | IEC 62196-1 type 2. | | Type 2 Connector (Cable Attached) | Cable attached to IEC 62196-1 type 2 connector. | | Type 3 Outlet | IEC 62196-1 type 3. | | IEC 60309 Single Phase | IEC 60309. | | IEC 60309 Three Phase | IEC 60309. | | CCS Combo 2 Plug (Cable Attached) | IEC 62196-3 CDV DC Combined Charging Connector DIN SPEC 70121 refers to ISO / IEC 15118-1 DIS, -2 DIS and 15118-3. | | CCS Combo 1 Plug (Cable Attached) | IEC 62196-3 CDV DC Combined Charging Connector with IEC 62196-1 type 2 SAE J1772 connector. | | CHAdeMO | DC CHAdeMO Connector. | 
 * @export
 * @enum {string}
 */

export const Plug = {
    SmallPaddleInductive: 'Small Paddle Inductive',
    LargePaddleInductive: 'Large Paddle Inductive',
    AvconConnector: 'AVCON Connector',
    TeslaConnector: 'Tesla Connector',
    Nema520: 'NEMA 5-20',
    TypeEFrenchStandard: 'Type E French Standard',
    TypeFSchuko: 'Type F Schuko',
    TypeGBritishStandard: 'Type G British Standard',
    TypeJSwissStandard: 'Type J Swiss Standard',
    Type1ConnectorCableAttached: 'Type 1 Connector (Cable Attached)',
    Type2Outlet: 'Type 2 Outlet',
    Type2ConnectorCableAttached: 'Type 2 Connector (Cable Attached)',
    Type3Outlet: 'Type 3 Outlet',
    Iec60309SinglePhase: 'IEC 60309 Single Phase',
    Iec60309ThreePhase: 'IEC 60309 Three Phase',
    CcsCombo2PlugCableAttached: 'CCS Combo 2 Plug (Cable Attached)',
    CcsCombo1PlugCableAttached: 'CCS Combo 1 Plug (Cable Attached)',
    ChAdeMo: 'CHAdeMO'
} as const;

export type Plug = typeof Plug[keyof typeof Plug];


/**
 * Authentication required for Plug&Charge (EMAID/EVCOID) 
 * @export
 * @interface PlugAndChargeIdentification
 */
export interface PlugAndChargeIdentification {
    /**
     * A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  ^(([A-Za-z]{2}\\-?[A-Za-z0-9]{3}\\-?C[A-Za-z0-9]{8}\\-?[\\d|A-Za-z])|([A-Za-z]{2}[\\*|\\-]?[A-Za-z0-9]{3}[\\*|\\-]?[A-Za-z0-9]{6}[\\*|\\-]?[\\d|X]))$ The expression validates the string as EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvcoID is provided corresponding to ISO, the instance part MUST be eight characters long and MUST be provided with a prepended â€œCâ€. The optional separating character MUST be â€œ-â€œ.  In case the EvcoID is provided corresponding to DIN, the instance part MUST be six characters long. The optional separating character can either be â€œ*â€ or â€œ-â€œ.  Examples ISO: â€œDE-8EO-CAet5e4XY-3â€, â€œDE8EOCAet5e43X1â€  Examples DIN: â€œDE*8EO*Aet5e4*3â€, â€œDE-8EO-Aet5e4-3â€, â€œDE8EOAet5e43â€ 
     * @type {string}
     * @memberof PlugAndChargeIdentification
     */
    'EvcoID': string;
}
/**
 * A price in the given currency
 * @export
 * @interface Priceperadditionalreferenceunit
 */
export interface Priceperadditionalreferenceunit {
}
/**
 * A price per reference unit
 * @export
 * @interface Priceperreferenceunit
 */
export interface Priceperreferenceunit {
}
/**
 * PricingProductDataRecord
 * @export
 * @interface PricingProductDataRecord
 */
export interface PricingProductDataRecord {
    /**
     * The ProductIDType defines some standard values (see below). The type however also supports custom ProductIDs that can be specified by partners (as a string of 50 characters maximum length). | Option | Description | |--------|-------------| | Standard Price | Standard Price | | AC1 | Product for AC 1 Phase charging | | AC3 | Product for AC 3 Phase charging | | DC | Product for DC charging | | CustomProductID | There is no option â€œCustomProductIDâ€, this sample option is meant to indicates that custom product ID specifications by partners (as a string of 50 characters maximum length) are allowed as well.| 
     * @type {string}
     * @memberof PricingProductDataRecord
     */
    'ProductID': string;
    /**
     * Default Reference Unit in time or kWh  | Option | Description | | ------ | ----------- | | HOUR | Defined Reference Unit Type | | KILOWATT_HOUR | Defined Reference Unit Type | | MINUTE | Defined Reference Unit Type | 
     * @type {string}
     * @memberof PricingProductDataRecord
     */
    'ReferenceUnit': string;
    /**
     * The ProductPriceCurrencyType allows for the list of active codes of the official ISO 4217 currency names.  For the full list of active codes of the official ISO 4217 currencies, see: [https://www.iso.org/iso-4217-currency-codes.html](https://www.iso.org/iso-4217-currency-codes.html)  Examples:  | Option | Description | | ------ | ----------- | | EUR | Euro | | CHF | Swiss franc | | CAD | Canadian Dollar | | GBP | Pound sterling 
     * @type {string}
     * @memberof PricingProductDataRecord
     */
    'ProductPriceCurrency': string;
    /**
     * 
     * @type {Priceperreferenceunit}
     * @memberof PricingProductDataRecord
     */
    'PricePerReferenceUnit': Priceperreferenceunit;
    /**
     * 
     * @type {Maximumproductchargingpower}
     * @memberof PricingProductDataRecord
     */
    'MaximumProductChargingPower': Maximumproductchargingpower;
    /**
     * Set to TRUE if the respective pricing product is applicable 24 hours a day. If FALSE, the respective applicability times `SHOULD` be provided in the field â€œProductAvailabilityTimesâ€. 
     * @type {boolean}
     * @memberof PricingProductDataRecord
     */
    'IsValid24hours': boolean;
    /**
     * A list indicating when the pricing product is applicable
     * @type {Array<PricingProductDataRecordProductAvailabilityTimesInner>}
     * @memberof PricingProductDataRecord
     */
    'ProductAvailabilityTimes': Array<PricingProductDataRecordProductAvailabilityTimesInner>;
    /**
     * 
     * @type {Array<PricingProductDataRecordAdditionalReferencesInner>}
     * @memberof PricingProductDataRecord
     */
    'AdditionalReferences'?: Array<PricingProductDataRecordAdditionalReferencesInner> | null;
}
/**
 * PricingProductDataRecordAdditionalReferencesInner
 * @export
 * @interface PricingProductDataRecordAdditionalReferencesInner
 */
export interface PricingProductDataRecordAdditionalReferencesInner {
    /**
     * Additional pricing components to be considered in addition to the base pricing  | Option | Description | | ------ | ----------- | | START FEE | Can be used in case a fixed fee is charged for the initiation of the charging session. This is a fee charged on top of the main base price defined in the field \"PricePerReferenceUnit\" for any particular pricing product. | | FIXED FEE | Can be used if a single price is charged irrespective of charging duration or energy consumption (for instance if all sessions are to be charged a single fixed fee). When used, the value set in the field \"PricePerReferenceUnit\" for the main base price of respective pricing product SHOULD be set to zero. | | PARKING FEE | Can be used in case sessions are to be charged for both parking and charging. When used, it needs to be specified in the corresponding service offer on the HBS Portal when parking applies (e.g. from session start to charging start and charging end to session end or for the entire session duration, or x-minutes after charging end, etc) | | MINIMUM FEE | Can be used in case there is a minimum fee to be paid for all charging sessions. When used, this implies that the eventual price to be paid cannot be less than this minimum fee but can however be a price above/greater than the minimum fee. | | MAXIMUM FEE | Can be used in case there is a maximum fee to be charged for all charging sessions. When used, this implies that the eventual price to be paid cannot be more than this maximum fee but can however be a price below/lower than the maximum fee. | 
     * @type {string}
     * @memberof PricingProductDataRecordAdditionalReferencesInner
     */
    'AdditionalReference': string;
    /**
     * Default Reference Unit in time or kWh  | Option | Description | | ------ | ----------- | | HOUR | Defined Reference Unit Type | | KILOWATT_HOUR | Defined Reference Unit Type | | MINUTE | Defined Reference Unit Type | 
     * @type {string}
     * @memberof PricingProductDataRecordAdditionalReferencesInner
     */
    'AdditionalReferenceUnit': string;
    /**
     * 
     * @type {Priceperadditionalreferenceunit}
     * @memberof PricingProductDataRecordAdditionalReferencesInner
     */
    'PricePerAdditionalReferenceUnit': Priceperadditionalreferenceunit;
}
/**
 * PricingProductDataRecordProductAvailabilityTimesInner
 * @export
 * @interface PricingProductDataRecordProductAvailabilityTimesInner
 */
export interface PricingProductDataRecordProductAvailabilityTimesInner {
    /**
     * 
     * @type {Array<PricingProductDataRecordProductAvailabilityTimesInnerPeriodsInner>}
     * @memberof PricingProductDataRecordProductAvailabilityTimesInner
     */
    'Periods': Array<PricingProductDataRecordProductAvailabilityTimesInnerPeriodsInner>;
    /**
     * Day values to be used in specifying periods on which the product is available. Workdays = Monday â€“ Friday, Weekend = Saturday â€“ Sunday
     * @type {string}
     * @memberof PricingProductDataRecordProductAvailabilityTimesInner
     */
    'on': string;
}
/**
 * The starting and end time for pricing product applicability in the specified period 
 * @export
 * @interface PricingProductDataRecordProductAvailabilityTimesInnerPeriodsInner
 */
export interface PricingProductDataRecordProductAvailabilityTimesInnerPeriodsInner {
    /**
     * The opening time
     * @type {string}
     * @memberof PricingProductDataRecordProductAvailabilityTimesInnerPeriodsInner
     */
    'begin': string;
    /**
     * The closing time
     * @type {string}
     * @memberof PricingProductDataRecordProductAvailabilityTimesInnerPeriodsInner
     */
    'end': string;
}
/**
 * A default price for pricing sessions at undefined EVSEs
 * @export
 * @interface Pricingdefaultprice
 */
export interface Pricingdefaultprice {
}
/**
 * PullEvseDataRecordEnvironmentalImpact
 * @export
 * @interface PullEvseDataRecordEnvironmentalImpact
 */
export interface PullEvseDataRecordEnvironmentalImpact {
    /**
     * 
     * @type {Co2Emission}
     * @memberof PullEvseDataRecordEnvironmentalImpact
     */
    'CO2Emission'?: Co2Emission | null;
    /**
     * 
     * @type {Nuclearwaste}
     * @memberof PullEvseDataRecordEnvironmentalImpact
     */
    'NuclearWaste'?: Nuclearwaste | null;
}
/**
 * QRCodeIdentificationHashedPIN
 * @export
 * @interface QRCodeIdentificationHashedPIN
 */
export interface QRCodeIdentificationHashedPIN {
    /**
     * Hash value created by partner  The expression validates the string as a hash function result value with a length between 10 and 100 characters  Example: â€œa5ghdhf73hâ€ 
     * @type {string}
     * @memberof QRCodeIdentificationHashedPIN
     */
    'Value': string;
    /**
     * Function that was used to generate the hash value.
     * @type {string}
     * @memberof QRCodeIdentificationHashedPIN
     */
    'Function': string;
    /**
     * 
     * @type {QRCodeIdentificationHashedPINLegacyHashData}
     * @memberof QRCodeIdentificationHashedPIN
     */
    'LegacyHashData'?: QRCodeIdentificationHashedPINLegacyHashData | null;
}
/**
 * QRCodeIdentificationHashedPINLegacyHashData
 * @export
 * @interface QRCodeIdentificationHashedPINLegacyHashData
 */
export interface QRCodeIdentificationHashedPINLegacyHashData {
    /**
     * Function used for hashing of the PIN at the partner.
     * @type {string}
     * @memberof QRCodeIdentificationHashedPINLegacyHashData
     */
    'Function': string;
    /**
     * 
     * @type {string}
     * @memberof QRCodeIdentificationHashedPINLegacyHashData
     */
    'Salt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QRCodeIdentificationHashedPINLegacyHashData
     */
    'Value'?: string | null;
}
/**
 * QRCodeIdentification
 * @export
 * @interface QRCodeIdentificationInput
 */
export interface QRCodeIdentificationInput {
    /**
     * A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  ^(([A-Za-z]{2}\\-?[A-Za-z0-9]{3}\\-?C[A-Za-z0-9]{8}\\-?[\\d|A-Za-z])|([A-Za-z]{2}[\\*|\\-]?[A-Za-z0-9]{3}[\\*|\\-]?[A-Za-z0-9]{6}[\\*|\\-]?[\\d|X]))$ The expression validates the string as EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvcoID is provided corresponding to ISO, the instance part MUST be eight characters long and MUST be provided with a prepended â€œCâ€. The optional separating character MUST be â€œ-â€œ.  In case the EvcoID is provided corresponding to DIN, the instance part MUST be six characters long. The optional separating character can either be â€œ*â€ or â€œ-â€œ.  Examples ISO: â€œDE-8EO-CAet5e4XY-3â€, â€œDE8EOCAet5e43X1â€  Examples DIN: â€œDE*8EO*Aet5e4*3â€, â€œDE-8EO-Aet5e4-3â€, â€œDE8EOAet5e43â€ 
     * @type {string}
     * @memberof QRCodeIdentificationInput
     */
    'EvcoID': string;
    /**
     * 
     * @type {QRCodeIdentificationHashedPIN}
     * @memberof QRCodeIdentificationInput
     */
    'HashedPIN'?: QRCodeIdentificationHashedPIN | null;
    /**
     * 
     * @type {string}
     * @memberof QRCodeIdentificationInput
     */
    'PIN'?: string | null;
}
/**
 * QRCodeIdentification
 * @export
 * @interface QRCodeIdentificationOutput
 */
export interface QRCodeIdentificationOutput {
    /**
     * A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  ^(([A-Za-z]{2}\\-?[A-Za-z0-9]{3}\\-?C[A-Za-z0-9]{8}\\-?[\\d|A-Za-z])|([A-Za-z]{2}[\\*|\\-]?[A-Za-z0-9]{3}[\\*|\\-]?[A-Za-z0-9]{6}[\\*|\\-]?[\\d|X]))$ The expression validates the string as EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvcoID is provided corresponding to ISO, the instance part MUST be eight characters long and MUST be provided with a prepended â€œCâ€. The optional separating character MUST be â€œ-â€œ.  In case the EvcoID is provided corresponding to DIN, the instance part MUST be six characters long. The optional separating character can either be â€œ*â€ or â€œ-â€œ.  Examples ISO: â€œDE-8EO-CAet5e4XY-3â€, â€œDE8EOCAet5e43X1â€  Examples DIN: â€œDE*8EO*Aet5e4*3â€, â€œDE-8EO-Aet5e4-3â€, â€œDE8EOAet5e43â€ 
     * @type {string}
     * @memberof QRCodeIdentificationOutput
     */
    'EvcoID': string;
    /**
     * 
     * @type {QRCodeIdentificationHashedPIN}
     * @memberof QRCodeIdentificationOutput
     */
    'HashedPIN'?: QRCodeIdentificationHashedPIN | null;
    /**
     * 
     * @type {string}
     * @memberof QRCodeIdentificationOutput
     */
    'PIN'?: string | null;
}
/**
 * Authentication data details. The data structure differs depending on the authentication technology 
 * @export
 * @interface RFIDIdentification
 */
export interface RFIDIdentification {
    /**
     * Authentication data details. The data structure differs depending on the authentication technology  The expression validates the string as a unique RFID with a length of 8, 14 or 20 characters.  Examples: â€œ7568290FFF765Fâ€ 
     * @type {string}
     * @memberof RFIDIdentification
     */
    'UID': string;
    /**
     * 
     * @type {string}
     * @memberof RFIDIdentification
     */
    'EvcoID'?: string | null;
    /**
     * Defined RFID Type 
     * @type {string}
     * @memberof RFIDIdentification
     */
    'RFID': string;
    /**
     * 
     * @type {string}
     * @memberof RFIDIdentification
     */
    'PrintedNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RFIDIdentification
     */
    'ExpiryDate'?: string | null;
}
/**
 * Authentication data details. The data structure differs depending on the authentication technology 
 * @export
 * @interface RFIDMifareFamilyIdentification
 */
export interface RFIDMifareFamilyIdentification {
    /**
     * Authentication data details. The data structure differs depending on the authentication technology  The expression validates the string as a unique RFID with a length of 8, 14 or 20 characters.  Examples: â€œ7568290FFF765Fâ€ 
     * @type {string}
     * @memberof RFIDMifareFamilyIdentification
     */
    'UID': string;
}
/**
 * Authentication data details. The data structure differs depending on the authentication technology 
 * @export
 * @interface RemoteIdentification
 */
export interface RemoteIdentification {
    /**
     * A string that `MUST` be valid with respect to the following regular expression: ISO | DIN.  ^(([A-Za-z]{2}\\-?[A-Za-z0-9]{3}\\-?C[A-Za-z0-9]{8}\\-?[\\d|A-Za-z])|([A-Za-z]{2}[\\*|\\-]?[A-Za-z0-9]{3}[\\*|\\-]?[A-Za-z0-9]{6}[\\*|\\-]?[\\d|X]))$ The expression validates the string as EvcoID. It supports both definitions DIN SPEC 91286:2011-11 as well as ISO 15118-1.  In case the EvcoID is provided corresponding to ISO, the instance part MUST be eight characters long and MUST be provided with a prepended â€œCâ€. The optional separating character MUST be â€œ-â€œ.  In case the EvcoID is provided corresponding to DIN, the instance part MUST be six characters long. The optional separating character can either be â€œ*â€ or â€œ-â€œ.  Examples ISO: â€œDE-8EO-CAet5e4XY-3â€, â€œDE8EOCAet5e43X1â€  Examples DIN: â€œDE*8EO*Aet5e4*3â€, â€œDE-8EO-Aet5e4-3â€, â€œDE8EOAet5e43â€ 
     * @type {string}
     * @memberof RemoteIdentification
     */
    'EvcoID': string;
}
/**
 * The structure consists of a defined code, an optional functional description of the status, and optional additional information. It can be used e.g. to send error details or detailed reasons for a certain process or system behavior. The optional AdditionalInfo field can be used in order to provide further individual (non-standardized) information. 
 * @export
 * @interface StatusCode
 */
export interface StatusCode {
    /**
     * | Option | Description | Area of Usage | | -------|-------------|---------------| | 000 | Success. | General codes | | 001 | Hubject system error. | Internal system codes | | 002 | Hubject database error. |Internal system codes| | 009 |Data transaction error. | Internal system codes| |017 |Unauthorized Access. |Internal system codes | |018 |Inconsistent EvseID. |Internal system codes | |019 |Inconsistent EvcoID. |Internal system codes | |021 |System error. |General codes | |022 |Data error. |General codes | |101 |QR Code Authentication failed â€“ Invalid Credentials. |Authentication codes | |102 |RFID Authentication failed â€“ invalid UID. |Authentication codes | |103 |RFID Authentication failed â€“ card not readable. |Authentication codes | |105 |PLC Authentication failed - invalid EvcoID. |Authentication codes | |106 |No positive authentication response. |Authentication codes / Internal system codes | |110 |QR Code App Authentication failed â€“ time out error. |Authentication codes | |120 |PLC (ISO/ IEC 15118) Authentication failed â€“ invalid underlying EvcoID. |Authentication codes | |121 |PLC (ISO/ IEC 15118) Authentication failed â€“ invalid certificate. |Authentication codes | |122 |PLC (ISO/ IEC 15118) Authentication failed â€“ time out error. |Authentication codes | |200 |EvcoID locked. |Authentication codes | |210 |No valid contract. |Session codes | |300 |Partner not found. |Session codes | |310 |Partner did not respond. |Session codes | |320 |Service not available. |Session codes | |400 |Session is invalid. |Session codes | |501 |Communication to EVSE failed. |EVSE codes | |510 |No EV connected to EVSE. |EVSE codes | |601 |EVSE already reserved. |EVSE codes | |602 |EVSE already in use/ wrong token. |EVSE codes | |603 |Unknown EVSE ID. |EVSE codes | |604 |EVSE ID is not Hubject compatible. |EVSE codes | |700 |EVSE out of service. |EVSE codes | 
     * @type {string}
     * @memberof StatusCode
     */
    'Code': string;
    /**
     * 
     * @type {string}
     * @memberof StatusCode
     */
    'Description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StatusCode
     */
    'AdditionalInfo'?: string | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * | Option | Description | | ------ | ----------- | | Reservation | Can an EV driver reserve the charging sport via remote services? | | DynamicPricing | Does the EVSE ID support dynamic pricing? | | ParkingSensors | Is dynamic status info on the parking area in front of the EVSE-ID available? | | MaximumPowerCharging | Does the EVSE-ID offer a dynamic maximum power charging? | | PredictiveChargePointUsage | Is predictive charge Point usage info available for the EVSE-ID? | | ChargingPlans | Does the EVSE-ID offer charging plans, e.g. As described in ISO15118-2? | | RoofProvided | Indicates if the charging station is under a roof | | None | There are no value-added services available. | 
 * @export
 * @enum {string}
 */

export const ValueAddedService = {
    Reservation: 'Reservation',
    DynamicPricing: 'DynamicPricing',
    ParkingSensors: 'ParkingSensors',
    MaximumPowerCharging: 'MaximumPowerCharging',
    PredictiveChargePointUsage: 'PredictiveChargePointUsage',
    ChargingPlans: 'ChargingPlans',
    RoofProvided: 'RoofProvided',
    None: 'None'
} as const;

export type ValueAddedService = typeof ValueAddedService[keyof typeof ValueAddedService];



/**
 * CPOOICPClientAPIApi - axios parameter creator
 * @export
 */
export const CPOOICPClientAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  __Functional Description:__  Scenario:  A customer of an EMP wants to charge a vehicle at a charging point of a CPO. The customer authenticates at the charging point. The CPOâ€™s operator system does not recognize the customerâ€™s authentication data. In order to authorize the charging process, the CPOâ€™s system can send an eRoamingAuthorizeStart request to Hubject. The request MUST contain the OperatorID and the identification data (e.g. UID or EvcoID) and MAY contain the EvseID.  Hubject generates a SessionID for the charging process and persists important session data (SessionID, EvseID, identification data).  Regarding the further service processing, there are three different options:  a. Hubject first tries to authorize the customer offline by checking authentication master data. Authentication data can be uploaded by EMPs using the eRoamingAuthenticationData service. ![Authorize Start offline diagram](images/authorizestart_offline.png)  b. In case offline authorization is not possible, Hubject tries to derive the EMP from the provided identification data. QR Code and Plug&amp;Charge identification data contain the EvcoID. Hubject can derive the EMPâ€™s ProviderID from the EvcoID. Hubject will directly forward eRoamingAuthorizeStart requests to the EMP. The EMP provider system checks the requested authentication data and responds accordingly, either by authorizing or not authorizing the request. The response `MUST` contain the ProviderID and the AuthorizationStatus and `MAY` contain a list of identification data that is authorized to stop the charging process. In case that the EMP provider system cannot be addressed (e.g. due to technical problems), the corresponding provider will be dealt with as if responding â€œNotAuthorizedâ€. ![Authorize evco diagram](images/authorize_evco.png)  c. In case that Hubject cannot derive the EMP from the identification data (e.g. with RFID identification), Hubject identifies all EMPs that are under contract with the CPO (EMPs must be the service subscriber) and forwards the eRoamingAuthorizeStart request to all these EMPs (broadcast). Hubject consolidates all EMP responses and creates an overall response, authorizing the request in case that one EMP authorized the request.  ![Authorize Start online diagram](images/authorizestart_online.png)  __Pin Security:__  The eRoamingAuthorizeStart request contains one of the defined identification types (see IdentificationType). The identification type â€œQRCodeIdentificationTypeâ€ (see QRCodeIdentificationType) contains - besides the â€œEvcoIDâ€ field - a â€œPINâ€ field or a â€œHashedPINâ€ field (only one of the two options must be provided).  For security reasons and as a general rule, Hubject does not store PINs in clear text, but always as encrypted hash values. In order to prevent hashed PIN values that may have been picked illegally from being used to request the authorization for charging processes, the PIN value `MUST` always be provided in clear text within the eRoamingAuthorizeStart request. This means that this operation `MUST` always provide the â€œPINâ€ field (clear text). Hubject will always generate a hash value of the provided PIN before checking the offline authentication data. So, in case that a PIN is provided by mistake as hashed value, Hubject automatically generates a hash of a hash, which eventually leads to a denial of authorization  In order to create hash values, Hubject applies the hash algorithm that the EMP has assigned to the QR Code identification record
         * @summary Eroamingauthorizestart V21
         * @param {string} operatorID 
         * @param {ERoamingAuthorizeStart} [eRoamingAuthorizeStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeStartV21Authorizestartv21Post: async (operatorID: string, eRoamingAuthorizeStart?: ERoamingAuthorizeStart, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorID' is not null or undefined
            assertParamExists('eRoamingAuthorizeStartV21Authorizestartv21Post', 'operatorID', operatorID)
            const localVarPath = `/authorizestartv21`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingAuthorizeStart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`  ![Authorize stop diagram](images/authorizestop.png)  eRoamingAuthorizeStop basically works in a similar way to the operation eRoamingAuthorizeStart. The request is sent in order to authorize the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeStart request. In most cases, Hubject can derive the EMP that authorized the charging process from the SessionID and can directly and offline authorize the request or forward the request for stopping to the EMP. In case the charging session was originally authorized offline by the HBS, the session `MUST` only be stopped with the same medium, which was used for starting the session
         * @summary Eroamingauthorizestop V21
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeStop} [eRoamingAuthorizeStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeStopV21Authorizestopv21Post: async (operatorID?: string, eRoamingAuthorizeStop?: ERoamingAuthorizeStop, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authorizestopv21`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingAuthorizeStop, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  ![Charge Detail Record diagram](images/cdr.png)  __Functional Description:__  Scenario:  A customer of an EMP has charged a vehicle at a charging station of a CPO. The charging process was started with an eRoamingAuthorizeStart or an eRoamingAuthorizeRemoteStart operation. The process may have been stopped with an eRoamingAuthorizeStop or an eRoamingAuthorizeRemoteStop operation. A preceding stop request is not a necessary precondition for the processing of an eRoamingChargeDetailRecord request. The CPOâ€™s provider system `MUST` send an eRoamingChargeDetailRecord (CDR) after the end of the charging process in order to inform the EMP of the charging session data (e.g. meter values and consumed energy) and further charging process details.  Note:  The CPO `MUST` provide the same SessionID that was assigned to the corresponding charging process. Based on this information Hubject will be able to assign the session data to the correct process.  Hubject will identify the receiving EMP and will forward the CDR to the corresponding EMP. The EMP `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the session data was received successfully and that `MAY` contain a status code for further information.  Hubject will accept only one CDR per SessionID.  In addition to forwarding the CDR to the EMP, Hubject also stores the CDR. In case that the recipient providerâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will nevertheless return to the requestor a positive result provided that storing the CDR was successful.  Note:  Please note that in case of EMP role this part of the URL \'/api/oicp/cdrmgmt/v21/operators/{operatorID}/charge-detail-record\' will be added to your URL endpoint when sending the request through our HBS platform.
         * @summary Eroamingchargedetailrecord V22
         * @param {string} operatorID 
         * @param {ERoamingChargeDetailRecord} [eRoamingChargeDetailRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingChargeDetailRecordV22Chargedetailrecordv22Post: async (operatorID: string, eRoamingChargeDetailRecord?: ERoamingChargeDetailRecord, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorID' is not null or undefined
            assertParamExists('eRoamingChargeDetailRecordV22Chargedetailrecordv22Post', 'operatorID', operatorID)
            const localVarPath = `/chargedetailrecordv22`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingChargeDetailRecord, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`  __Functional Description:__  ![Charging notifications diagram](images/chargingnotifications.png) The ChargingNotification feature enables CPOs to notify EMPs about the end of charge  The ChargingNotification feature basically increases the transparency between CPO - EMP - End Consumer to the level of each charging session.  This feature enables CPO to send various notifications during a single Charging Session. These notifications give the details like  1. When the charging session has started. The CPO can send ChargingNotification of type â€œStartâ€ to Hubject containing information like ChargingStart, MeterStartValue, EVSEID etc.  2. Consumed Energy values during the charging process or duration of successful charging process that has lapsed. The CPO can send ChargingNotification of type â€œProgressâ€ to Hubject containing information like ChargingStart, EventOccurred, ChargingDuration, ConsumedEnergyProgress, EVSEID etc. The frequency between two progress notifications for one charging session should be at least 5 minutes.  3. When the charging session has ended (because no energy is transmitted anymore). The CPO can send a ChargingNotification of type â€œEndâ€ to Hubject containing information such as ChargingEnd, ConsumedEnergy, EVSEID etc.  4. Error occurred before charging starts or during charging process or abrupt changing end. The CPO can send a ChargingNotification of type â€œErrorâ€ to Hubject containing information such as ErrorClass, ErrorAdditionalInfo, EVSEID etc.  Hubject will forward Start, Progress, End and Error notification requests to the EMP. The EMP responds with an eRoamingAcknowledgement. This acknowledgement is then being forwarded to the CPO.  This feature should cover all the notifications that could happen between Session Start and Session End in future. Each bit of information increases transparency to the customer of EMP.
         * @summary Eroamingchargingnotifications V11
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingChargingNotificationsV11Chargingnotificationsv11Post: async (body?: Body, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/chargingnotificationsv11`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL` When a CPO sends an eRoamingPushEVSEPricing request, Hubject checks whether there is a valid flexible/dynamic pricing service offer (for the service type Authorization) created by the CPO. If so, the operation allows the upload of a list containing pricing product assignment to EvseIDs to Hubject. In addition, it is also possible to update or delete EVSE pricing data previously pushed with an upload operation request. How the transferred data is to be processed `MUST` be defined in the â€œActionTypeâ€ field of the request. Four processing options (i.e. Action Types) exist, details of which can be seen in section eRoamingPushEVSEPricing).  The EVSE pricing data to be processed `MUST` be provided in the â€œEVSEPricingâ€ field, which consists of â€œEvseIDProductListâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE pricing data for every point in time in the past.  EVSE consistency:  EvseIDs contain the ID of the corresponding CPO (With every EVSE pricing data upload operation, Hubject checks whether the given CPOâ€™s OperatorID or Sub-OperatorIDs if necessary) matches every given EvseID sent in the request. If not, Hubject refuses the data upload and responds with the status code 018.  Note  The eRoamingPushEVSEPricing operation `MUST` always be used sequentially.
         * @summary Eroamingpushevsepricing V10
         * @param {string} operatorID 
         * @param {ERoamingPushEVSEPricing} [eRoamingPushEVSEPricing] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingPushEVSEPricingV10Pushevsepricingv10Post: async (operatorID: string, eRoamingPushEVSEPricing?: ERoamingPushEVSEPricing, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorID' is not null or undefined
            assertParamExists('eRoamingPushEVSEPricingV10Pushevsepricingv10Post', 'operatorID', operatorID)
            const localVarPath = `/pushevsepricingv10`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingPushEVSEPricing, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  ![Push evse data diagram](images/pushevsedata.png)  When a CPO sends an eRoamingPushEvseData request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE data to Hubject. Furthermore, it is possible to update or delete EVSE data that has been pushed with an earlier operation request. How Hubject handles the transferred data `MUST` be defined in the request field &quot;ActionType&quot;, which offers four options.  The EvseData that will be inserted or updated `MUST` be provided in the OperatorEvseData field, which consists of EvseDataRecord structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EvseData for every point in time in the past.  EVSE consistency:  EvseIDs contain the ID of the corresponding CPO (With every data upload operation Hubject checks whether the given CPOâ€™s OperatorID or Sub-OperatorIDs if necessary) matches every given EvseID. If not, Hubject refuses the data upload and responds with the status code 018.  Note: * The eRoamingPushEvseData operation `MUST` always be used sequentially as described in Data Push Operations.
         * @summary Eroamingpushevsedata V23
         * @param {string} operatorID 
         * @param {ERoamingPushEvseData} [eRoamingPushEvseData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingPushEvseDataV23Pushevsedatav23Post: async (operatorID: string, eRoamingPushEvseData?: ERoamingPushEvseData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorID' is not null or undefined
            assertParamExists('eRoamingPushEvseDataV23Pushevsedatav23Post', 'operatorID', operatorID)
            const localVarPath = `/pushevsedatav23`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingPushEvseData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `Mandatory`  ![Push EVSE status](images/pushevsestatus.png)  When a CPO sends an eRoamingPushEvseStatus request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE status data to Hubject. Furthermore, it is possible to update EVSE status data that has been pushed with an earlier operation request.  The way how Hubject handles the transferred data `MUST` be defined in the request field &quot;ActionType2, which offers four options. This option works in the same way as the eRoamingAuthenticationData service. The EVSE status data that will be inserted or updated MUST be provided with the field â€œOperatorEvseStatusâ€, which consists of â€œEvseStatusRecordâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE status data for every point in time in the past.  Note:  The eRoamingPushEvseStatus operation `MUST` always be used sequentiallyas described in Data Push Operations  Best Practices:  Please try to avoid race conditions by sending multiple status simultaneously. Status should be sent one by one.
         * @summary Eroamingpushevsestatus V21
         * @param {string} operatorId 
         * @param {ERoamingPushEvseStatus} [eRoamingPushEvseStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingPushEvseStatusV21Pushevsestatusv21Post: async (operatorId: string, eRoamingPushEvseStatus?: ERoamingPushEvseStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('eRoamingPushEvseStatusV21Pushevsestatusv21Post', 'operatorId', operatorId)
            const localVarPath = `/pushevsestatusv21`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorId !== undefined) {
                localVarQueryParameter['operatorId'] = operatorId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingPushEvseStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`    When a CPO sends an eRoamingPushPricingProductData request, Hubject checks whether there is a valid flexible/dynamic pricing service offer (for the service type Authorization) created by the CPO. If so, the operation allows the upload of pricing product data to Hubject. In addition, it is also possible to update or delete pricing data previously pushed with an upload operation request. How the transferred data is to be processed `MUST` be defined in the â€œActionTypeâ€ field of the request. Four processing options (i.e. Action Types) exist, details of which can be seen in eRoamingPushPricingProductData message    The pricing product data to be processed `MUST` be provided in the â€œPricingProductDataâ€ field, which consists of â€œPricingProductDataRecordâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of pricing data for every point in time in the past.
         * @summary Eroamingpushpricingproductdata V10
         * @param {string} operatorID 
         * @param {ERoamingPushPricingProductData} [eRoamingPushPricingProductData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post: async (operatorID: string, eRoamingPushPricingProductData?: ERoamingPushPricingProductData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorID' is not null or undefined
            assertParamExists('eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post', 'operatorID', operatorID)
            const localVarPath = `/pushpricingproductdatav10`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingPushPricingProductData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CPOOICPClientAPIApi - functional programming interface
 * @export
 */
export const CPOOICPClientAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CPOOICPClientAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  __Functional Description:__  Scenario:  A customer of an EMP wants to charge a vehicle at a charging point of a CPO. The customer authenticates at the charging point. The CPOâ€™s operator system does not recognize the customerâ€™s authentication data. In order to authorize the charging process, the CPOâ€™s system can send an eRoamingAuthorizeStart request to Hubject. The request MUST contain the OperatorID and the identification data (e.g. UID or EvcoID) and MAY contain the EvseID.  Hubject generates a SessionID for the charging process and persists important session data (SessionID, EvseID, identification data).  Regarding the further service processing, there are three different options:  a. Hubject first tries to authorize the customer offline by checking authentication master data. Authentication data can be uploaded by EMPs using the eRoamingAuthenticationData service. ![Authorize Start offline diagram](images/authorizestart_offline.png)  b. In case offline authorization is not possible, Hubject tries to derive the EMP from the provided identification data. QR Code and Plug&amp;Charge identification data contain the EvcoID. Hubject can derive the EMPâ€™s ProviderID from the EvcoID. Hubject will directly forward eRoamingAuthorizeStart requests to the EMP. The EMP provider system checks the requested authentication data and responds accordingly, either by authorizing or not authorizing the request. The response `MUST` contain the ProviderID and the AuthorizationStatus and `MAY` contain a list of identification data that is authorized to stop the charging process. In case that the EMP provider system cannot be addressed (e.g. due to technical problems), the corresponding provider will be dealt with as if responding â€œNotAuthorizedâ€. ![Authorize evco diagram](images/authorize_evco.png)  c. In case that Hubject cannot derive the EMP from the identification data (e.g. with RFID identification), Hubject identifies all EMPs that are under contract with the CPO (EMPs must be the service subscriber) and forwards the eRoamingAuthorizeStart request to all these EMPs (broadcast). Hubject consolidates all EMP responses and creates an overall response, authorizing the request in case that one EMP authorized the request.  ![Authorize Start online diagram](images/authorizestart_online.png)  __Pin Security:__  The eRoamingAuthorizeStart request contains one of the defined identification types (see IdentificationType). The identification type â€œQRCodeIdentificationTypeâ€ (see QRCodeIdentificationType) contains - besides the â€œEvcoIDâ€ field - a â€œPINâ€ field or a â€œHashedPINâ€ field (only one of the two options must be provided).  For security reasons and as a general rule, Hubject does not store PINs in clear text, but always as encrypted hash values. In order to prevent hashed PIN values that may have been picked illegally from being used to request the authorization for charging processes, the PIN value `MUST` always be provided in clear text within the eRoamingAuthorizeStart request. This means that this operation `MUST` always provide the â€œPINâ€ field (clear text). Hubject will always generate a hash value of the provided PIN before checking the offline authentication data. So, in case that a PIN is provided by mistake as hashed value, Hubject automatically generates a hash of a hash, which eventually leads to a denial of authorization  In order to create hash values, Hubject applies the hash algorithm that the EMP has assigned to the QR Code identification record
         * @summary Eroamingauthorizestart V21
         * @param {string} operatorID 
         * @param {ERoamingAuthorizeStart} [eRoamingAuthorizeStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingAuthorizeStartV21Authorizestartv21Post(operatorID: string, eRoamingAuthorizeStart?: ERoamingAuthorizeStart, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAuthorizationStart>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingAuthorizeStartV21Authorizestartv21Post(operatorID, eRoamingAuthorizeStart, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPClientAPIApi.eRoamingAuthorizeStartV21Authorizestartv21Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`  ![Authorize stop diagram](images/authorizestop.png)  eRoamingAuthorizeStop basically works in a similar way to the operation eRoamingAuthorizeStart. The request is sent in order to authorize the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeStart request. In most cases, Hubject can derive the EMP that authorized the charging process from the SessionID and can directly and offline authorize the request or forward the request for stopping to the EMP. In case the charging session was originally authorized offline by the HBS, the session `MUST` only be stopped with the same medium, which was used for starting the session
         * @summary Eroamingauthorizestop V21
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeStop} [eRoamingAuthorizeStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingAuthorizeStopV21Authorizestopv21Post(operatorID?: string, eRoamingAuthorizeStop?: ERoamingAuthorizeStop, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAuthorizationStop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingAuthorizeStopV21Authorizestopv21Post(operatorID, eRoamingAuthorizeStop, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPClientAPIApi.eRoamingAuthorizeStopV21Authorizestopv21Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  ![Charge Detail Record diagram](images/cdr.png)  __Functional Description:__  Scenario:  A customer of an EMP has charged a vehicle at a charging station of a CPO. The charging process was started with an eRoamingAuthorizeStart or an eRoamingAuthorizeRemoteStart operation. The process may have been stopped with an eRoamingAuthorizeStop or an eRoamingAuthorizeRemoteStop operation. A preceding stop request is not a necessary precondition for the processing of an eRoamingChargeDetailRecord request. The CPOâ€™s provider system `MUST` send an eRoamingChargeDetailRecord (CDR) after the end of the charging process in order to inform the EMP of the charging session data (e.g. meter values and consumed energy) and further charging process details.  Note:  The CPO `MUST` provide the same SessionID that was assigned to the corresponding charging process. Based on this information Hubject will be able to assign the session data to the correct process.  Hubject will identify the receiving EMP and will forward the CDR to the corresponding EMP. The EMP `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the session data was received successfully and that `MAY` contain a status code for further information.  Hubject will accept only one CDR per SessionID.  In addition to forwarding the CDR to the EMP, Hubject also stores the CDR. In case that the recipient providerâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will nevertheless return to the requestor a positive result provided that storing the CDR was successful.  Note:  Please note that in case of EMP role this part of the URL \'/api/oicp/cdrmgmt/v21/operators/{operatorID}/charge-detail-record\' will be added to your URL endpoint when sending the request through our HBS platform.
         * @summary Eroamingchargedetailrecord V22
         * @param {string} operatorID 
         * @param {ERoamingChargeDetailRecord} [eRoamingChargeDetailRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingChargeDetailRecordV22Chargedetailrecordv22Post(operatorID: string, eRoamingChargeDetailRecord?: ERoamingChargeDetailRecord, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingChargeDetailRecordV22Chargedetailrecordv22Post(operatorID, eRoamingChargeDetailRecord, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPClientAPIApi.eRoamingChargeDetailRecordV22Chargedetailrecordv22Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`  __Functional Description:__  ![Charging notifications diagram](images/chargingnotifications.png) The ChargingNotification feature enables CPOs to notify EMPs about the end of charge  The ChargingNotification feature basically increases the transparency between CPO - EMP - End Consumer to the level of each charging session.  This feature enables CPO to send various notifications during a single Charging Session. These notifications give the details like  1. When the charging session has started. The CPO can send ChargingNotification of type â€œStartâ€ to Hubject containing information like ChargingStart, MeterStartValue, EVSEID etc.  2. Consumed Energy values during the charging process or duration of successful charging process that has lapsed. The CPO can send ChargingNotification of type â€œProgressâ€ to Hubject containing information like ChargingStart, EventOccurred, ChargingDuration, ConsumedEnergyProgress, EVSEID etc. The frequency between two progress notifications for one charging session should be at least 5 minutes.  3. When the charging session has ended (because no energy is transmitted anymore). The CPO can send a ChargingNotification of type â€œEndâ€ to Hubject containing information such as ChargingEnd, ConsumedEnergy, EVSEID etc.  4. Error occurred before charging starts or during charging process or abrupt changing end. The CPO can send a ChargingNotification of type â€œErrorâ€ to Hubject containing information such as ErrorClass, ErrorAdditionalInfo, EVSEID etc.  Hubject will forward Start, Progress, End and Error notification requests to the EMP. The EMP responds with an eRoamingAcknowledgement. This acknowledgement is then being forwarded to the CPO.  This feature should cover all the notifications that could happen between Session Start and Session End in future. Each bit of information increases transparency to the customer of EMP.
         * @summary Eroamingchargingnotifications V11
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingChargingNotificationsV11Chargingnotificationsv11Post(body?: Body, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingChargingNotificationsV11Chargingnotificationsv11Post(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPClientAPIApi.eRoamingChargingNotificationsV11Chargingnotificationsv11Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL` When a CPO sends an eRoamingPushEVSEPricing request, Hubject checks whether there is a valid flexible/dynamic pricing service offer (for the service type Authorization) created by the CPO. If so, the operation allows the upload of a list containing pricing product assignment to EvseIDs to Hubject. In addition, it is also possible to update or delete EVSE pricing data previously pushed with an upload operation request. How the transferred data is to be processed `MUST` be defined in the â€œActionTypeâ€ field of the request. Four processing options (i.e. Action Types) exist, details of which can be seen in section eRoamingPushEVSEPricing).  The EVSE pricing data to be processed `MUST` be provided in the â€œEVSEPricingâ€ field, which consists of â€œEvseIDProductListâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE pricing data for every point in time in the past.  EVSE consistency:  EvseIDs contain the ID of the corresponding CPO (With every EVSE pricing data upload operation, Hubject checks whether the given CPOâ€™s OperatorID or Sub-OperatorIDs if necessary) matches every given EvseID sent in the request. If not, Hubject refuses the data upload and responds with the status code 018.  Note  The eRoamingPushEVSEPricing operation `MUST` always be used sequentially.
         * @summary Eroamingpushevsepricing V10
         * @param {string} operatorID 
         * @param {ERoamingPushEVSEPricing} [eRoamingPushEVSEPricing] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingPushEVSEPricingV10Pushevsepricingv10Post(operatorID: string, eRoamingPushEVSEPricing?: ERoamingPushEVSEPricing, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingPushEVSEPricingV10Pushevsepricingv10Post(operatorID, eRoamingPushEVSEPricing, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPClientAPIApi.eRoamingPushEVSEPricingV10Pushevsepricingv10Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  ![Push evse data diagram](images/pushevsedata.png)  When a CPO sends an eRoamingPushEvseData request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE data to Hubject. Furthermore, it is possible to update or delete EVSE data that has been pushed with an earlier operation request. How Hubject handles the transferred data `MUST` be defined in the request field &quot;ActionType&quot;, which offers four options.  The EvseData that will be inserted or updated `MUST` be provided in the OperatorEvseData field, which consists of EvseDataRecord structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EvseData for every point in time in the past.  EVSE consistency:  EvseIDs contain the ID of the corresponding CPO (With every data upload operation Hubject checks whether the given CPOâ€™s OperatorID or Sub-OperatorIDs if necessary) matches every given EvseID. If not, Hubject refuses the data upload and responds with the status code 018.  Note: * The eRoamingPushEvseData operation `MUST` always be used sequentially as described in Data Push Operations.
         * @summary Eroamingpushevsedata V23
         * @param {string} operatorID 
         * @param {ERoamingPushEvseData} [eRoamingPushEvseData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingPushEvseDataV23Pushevsedatav23Post(operatorID: string, eRoamingPushEvseData?: ERoamingPushEvseData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingPushEvseDataV23Pushevsedatav23Post(operatorID, eRoamingPushEvseData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPClientAPIApi.eRoamingPushEvseDataV23Pushevsedatav23Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `Mandatory`  ![Push EVSE status](images/pushevsestatus.png)  When a CPO sends an eRoamingPushEvseStatus request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE status data to Hubject. Furthermore, it is possible to update EVSE status data that has been pushed with an earlier operation request.  The way how Hubject handles the transferred data `MUST` be defined in the request field &quot;ActionType2, which offers four options. This option works in the same way as the eRoamingAuthenticationData service. The EVSE status data that will be inserted or updated MUST be provided with the field â€œOperatorEvseStatusâ€, which consists of â€œEvseStatusRecordâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE status data for every point in time in the past.  Note:  The eRoamingPushEvseStatus operation `MUST` always be used sequentiallyas described in Data Push Operations  Best Practices:  Please try to avoid race conditions by sending multiple status simultaneously. Status should be sent one by one.
         * @summary Eroamingpushevsestatus V21
         * @param {string} operatorId 
         * @param {ERoamingPushEvseStatus} [eRoamingPushEvseStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingPushEvseStatusV21Pushevsestatusv21Post(operatorId: string, eRoamingPushEvseStatus?: ERoamingPushEvseStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingPushEvseStatusV21Pushevsestatusv21Post(operatorId, eRoamingPushEvseStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPClientAPIApi.eRoamingPushEvseStatusV21Pushevsestatusv21Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`    When a CPO sends an eRoamingPushPricingProductData request, Hubject checks whether there is a valid flexible/dynamic pricing service offer (for the service type Authorization) created by the CPO. If so, the operation allows the upload of pricing product data to Hubject. In addition, it is also possible to update or delete pricing data previously pushed with an upload operation request. How the transferred data is to be processed `MUST` be defined in the â€œActionTypeâ€ field of the request. Four processing options (i.e. Action Types) exist, details of which can be seen in eRoamingPushPricingProductData message    The pricing product data to be processed `MUST` be provided in the â€œPricingProductDataâ€ field, which consists of â€œPricingProductDataRecordâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of pricing data for every point in time in the past.
         * @summary Eroamingpushpricingproductdata V10
         * @param {string} operatorID 
         * @param {ERoamingPushPricingProductData} [eRoamingPushPricingProductData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post(operatorID: string, eRoamingPushPricingProductData?: ERoamingPushPricingProductData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post(operatorID, eRoamingPushPricingProductData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPClientAPIApi.eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CPOOICPClientAPIApi - factory interface
 * @export
 */
export const CPOOICPClientAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CPOOICPClientAPIApiFp(configuration)
    return {
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  __Functional Description:__  Scenario:  A customer of an EMP wants to charge a vehicle at a charging point of a CPO. The customer authenticates at the charging point. The CPOâ€™s operator system does not recognize the customerâ€™s authentication data. In order to authorize the charging process, the CPOâ€™s system can send an eRoamingAuthorizeStart request to Hubject. The request MUST contain the OperatorID and the identification data (e.g. UID or EvcoID) and MAY contain the EvseID.  Hubject generates a SessionID for the charging process and persists important session data (SessionID, EvseID, identification data).  Regarding the further service processing, there are three different options:  a. Hubject first tries to authorize the customer offline by checking authentication master data. Authentication data can be uploaded by EMPs using the eRoamingAuthenticationData service. ![Authorize Start offline diagram](images/authorizestart_offline.png)  b. In case offline authorization is not possible, Hubject tries to derive the EMP from the provided identification data. QR Code and Plug&amp;Charge identification data contain the EvcoID. Hubject can derive the EMPâ€™s ProviderID from the EvcoID. Hubject will directly forward eRoamingAuthorizeStart requests to the EMP. The EMP provider system checks the requested authentication data and responds accordingly, either by authorizing or not authorizing the request. The response `MUST` contain the ProviderID and the AuthorizationStatus and `MAY` contain a list of identification data that is authorized to stop the charging process. In case that the EMP provider system cannot be addressed (e.g. due to technical problems), the corresponding provider will be dealt with as if responding â€œNotAuthorizedâ€. ![Authorize evco diagram](images/authorize_evco.png)  c. In case that Hubject cannot derive the EMP from the identification data (e.g. with RFID identification), Hubject identifies all EMPs that are under contract with the CPO (EMPs must be the service subscriber) and forwards the eRoamingAuthorizeStart request to all these EMPs (broadcast). Hubject consolidates all EMP responses and creates an overall response, authorizing the request in case that one EMP authorized the request.  ![Authorize Start online diagram](images/authorizestart_online.png)  __Pin Security:__  The eRoamingAuthorizeStart request contains one of the defined identification types (see IdentificationType). The identification type â€œQRCodeIdentificationTypeâ€ (see QRCodeIdentificationType) contains - besides the â€œEvcoIDâ€ field - a â€œPINâ€ field or a â€œHashedPINâ€ field (only one of the two options must be provided).  For security reasons and as a general rule, Hubject does not store PINs in clear text, but always as encrypted hash values. In order to prevent hashed PIN values that may have been picked illegally from being used to request the authorization for charging processes, the PIN value `MUST` always be provided in clear text within the eRoamingAuthorizeStart request. This means that this operation `MUST` always provide the â€œPINâ€ field (clear text). Hubject will always generate a hash value of the provided PIN before checking the offline authentication data. So, in case that a PIN is provided by mistake as hashed value, Hubject automatically generates a hash of a hash, which eventually leads to a denial of authorization  In order to create hash values, Hubject applies the hash algorithm that the EMP has assigned to the QR Code identification record
         * @summary Eroamingauthorizestart V21
         * @param {string} operatorID 
         * @param {ERoamingAuthorizeStart} [eRoamingAuthorizeStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeStartV21Authorizestartv21Post(operatorID: string, eRoamingAuthorizeStart?: ERoamingAuthorizeStart, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAuthorizationStart> {
            return localVarFp.eRoamingAuthorizeStartV21Authorizestartv21Post(operatorID, eRoamingAuthorizeStart, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`  ![Authorize stop diagram](images/authorizestop.png)  eRoamingAuthorizeStop basically works in a similar way to the operation eRoamingAuthorizeStart. The request is sent in order to authorize the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeStart request. In most cases, Hubject can derive the EMP that authorized the charging process from the SessionID and can directly and offline authorize the request or forward the request for stopping to the EMP. In case the charging session was originally authorized offline by the HBS, the session `MUST` only be stopped with the same medium, which was used for starting the session
         * @summary Eroamingauthorizestop V21
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeStop} [eRoamingAuthorizeStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeStopV21Authorizestopv21Post(operatorID?: string, eRoamingAuthorizeStop?: ERoamingAuthorizeStop, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAuthorizationStop> {
            return localVarFp.eRoamingAuthorizeStopV21Authorizestopv21Post(operatorID, eRoamingAuthorizeStop, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  ![Charge Detail Record diagram](images/cdr.png)  __Functional Description:__  Scenario:  A customer of an EMP has charged a vehicle at a charging station of a CPO. The charging process was started with an eRoamingAuthorizeStart or an eRoamingAuthorizeRemoteStart operation. The process may have been stopped with an eRoamingAuthorizeStop or an eRoamingAuthorizeRemoteStop operation. A preceding stop request is not a necessary precondition for the processing of an eRoamingChargeDetailRecord request. The CPOâ€™s provider system `MUST` send an eRoamingChargeDetailRecord (CDR) after the end of the charging process in order to inform the EMP of the charging session data (e.g. meter values and consumed energy) and further charging process details.  Note:  The CPO `MUST` provide the same SessionID that was assigned to the corresponding charging process. Based on this information Hubject will be able to assign the session data to the correct process.  Hubject will identify the receiving EMP and will forward the CDR to the corresponding EMP. The EMP `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the session data was received successfully and that `MAY` contain a status code for further information.  Hubject will accept only one CDR per SessionID.  In addition to forwarding the CDR to the EMP, Hubject also stores the CDR. In case that the recipient providerâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will nevertheless return to the requestor a positive result provided that storing the CDR was successful.  Note:  Please note that in case of EMP role this part of the URL \'/api/oicp/cdrmgmt/v21/operators/{operatorID}/charge-detail-record\' will be added to your URL endpoint when sending the request through our HBS platform.
         * @summary Eroamingchargedetailrecord V22
         * @param {string} operatorID 
         * @param {ERoamingChargeDetailRecord} [eRoamingChargeDetailRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingChargeDetailRecordV22Chargedetailrecordv22Post(operatorID: string, eRoamingChargeDetailRecord?: ERoamingChargeDetailRecord, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingChargeDetailRecordV22Chargedetailrecordv22Post(operatorID, eRoamingChargeDetailRecord, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`  __Functional Description:__  ![Charging notifications diagram](images/chargingnotifications.png) The ChargingNotification feature enables CPOs to notify EMPs about the end of charge  The ChargingNotification feature basically increases the transparency between CPO - EMP - End Consumer to the level of each charging session.  This feature enables CPO to send various notifications during a single Charging Session. These notifications give the details like  1. When the charging session has started. The CPO can send ChargingNotification of type â€œStartâ€ to Hubject containing information like ChargingStart, MeterStartValue, EVSEID etc.  2. Consumed Energy values during the charging process or duration of successful charging process that has lapsed. The CPO can send ChargingNotification of type â€œProgressâ€ to Hubject containing information like ChargingStart, EventOccurred, ChargingDuration, ConsumedEnergyProgress, EVSEID etc. The frequency between two progress notifications for one charging session should be at least 5 minutes.  3. When the charging session has ended (because no energy is transmitted anymore). The CPO can send a ChargingNotification of type â€œEndâ€ to Hubject containing information such as ChargingEnd, ConsumedEnergy, EVSEID etc.  4. Error occurred before charging starts or during charging process or abrupt changing end. The CPO can send a ChargingNotification of type â€œErrorâ€ to Hubject containing information such as ErrorClass, ErrorAdditionalInfo, EVSEID etc.  Hubject will forward Start, Progress, End and Error notification requests to the EMP. The EMP responds with an eRoamingAcknowledgement. This acknowledgement is then being forwarded to the CPO.  This feature should cover all the notifications that could happen between Session Start and Session End in future. Each bit of information increases transparency to the customer of EMP.
         * @summary Eroamingchargingnotifications V11
         * @param {Body} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingChargingNotificationsV11Chargingnotificationsv11Post(body?: Body, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingChargingNotificationsV11Chargingnotificationsv11Post(body, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL` When a CPO sends an eRoamingPushEVSEPricing request, Hubject checks whether there is a valid flexible/dynamic pricing service offer (for the service type Authorization) created by the CPO. If so, the operation allows the upload of a list containing pricing product assignment to EvseIDs to Hubject. In addition, it is also possible to update or delete EVSE pricing data previously pushed with an upload operation request. How the transferred data is to be processed `MUST` be defined in the â€œActionTypeâ€ field of the request. Four processing options (i.e. Action Types) exist, details of which can be seen in section eRoamingPushEVSEPricing).  The EVSE pricing data to be processed `MUST` be provided in the â€œEVSEPricingâ€ field, which consists of â€œEvseIDProductListâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE pricing data for every point in time in the past.  EVSE consistency:  EvseIDs contain the ID of the corresponding CPO (With every EVSE pricing data upload operation, Hubject checks whether the given CPOâ€™s OperatorID or Sub-OperatorIDs if necessary) matches every given EvseID sent in the request. If not, Hubject refuses the data upload and responds with the status code 018.  Note  The eRoamingPushEVSEPricing operation `MUST` always be used sequentially.
         * @summary Eroamingpushevsepricing V10
         * @param {string} operatorID 
         * @param {ERoamingPushEVSEPricing} [eRoamingPushEVSEPricing] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingPushEVSEPricingV10Pushevsepricingv10Post(operatorID: string, eRoamingPushEVSEPricing?: ERoamingPushEVSEPricing, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingPushEVSEPricingV10Pushevsepricingv10Post(operatorID, eRoamingPushEVSEPricing, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  ![Push evse data diagram](images/pushevsedata.png)  When a CPO sends an eRoamingPushEvseData request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE data to Hubject. Furthermore, it is possible to update or delete EVSE data that has been pushed with an earlier operation request. How Hubject handles the transferred data `MUST` be defined in the request field &quot;ActionType&quot;, which offers four options.  The EvseData that will be inserted or updated `MUST` be provided in the OperatorEvseData field, which consists of EvseDataRecord structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EvseData for every point in time in the past.  EVSE consistency:  EvseIDs contain the ID of the corresponding CPO (With every data upload operation Hubject checks whether the given CPOâ€™s OperatorID or Sub-OperatorIDs if necessary) matches every given EvseID. If not, Hubject refuses the data upload and responds with the status code 018.  Note: * The eRoamingPushEvseData operation `MUST` always be used sequentially as described in Data Push Operations.
         * @summary Eroamingpushevsedata V23
         * @param {string} operatorID 
         * @param {ERoamingPushEvseData} [eRoamingPushEvseData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingPushEvseDataV23Pushevsedatav23Post(operatorID: string, eRoamingPushEvseData?: ERoamingPushEvseData, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingPushEvseDataV23Pushevsedatav23Post(operatorID, eRoamingPushEvseData, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `Mandatory`  ![Push EVSE status](images/pushevsestatus.png)  When a CPO sends an eRoamingPushEvseStatus request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE status data to Hubject. Furthermore, it is possible to update EVSE status data that has been pushed with an earlier operation request.  The way how Hubject handles the transferred data `MUST` be defined in the request field &quot;ActionType2, which offers four options. This option works in the same way as the eRoamingAuthenticationData service. The EVSE status data that will be inserted or updated MUST be provided with the field â€œOperatorEvseStatusâ€, which consists of â€œEvseStatusRecordâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE status data for every point in time in the past.  Note:  The eRoamingPushEvseStatus operation `MUST` always be used sequentiallyas described in Data Push Operations  Best Practices:  Please try to avoid race conditions by sending multiple status simultaneously. Status should be sent one by one.
         * @summary Eroamingpushevsestatus V21
         * @param {string} operatorId 
         * @param {ERoamingPushEvseStatus} [eRoamingPushEvseStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingPushEvseStatusV21Pushevsestatusv21Post(operatorId: string, eRoamingPushEvseStatus?: ERoamingPushEvseStatus, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingPushEvseStatusV21Pushevsestatusv21Post(operatorId, eRoamingPushEvseStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`    When a CPO sends an eRoamingPushPricingProductData request, Hubject checks whether there is a valid flexible/dynamic pricing service offer (for the service type Authorization) created by the CPO. If so, the operation allows the upload of pricing product data to Hubject. In addition, it is also possible to update or delete pricing data previously pushed with an upload operation request. How the transferred data is to be processed `MUST` be defined in the â€œActionTypeâ€ field of the request. Four processing options (i.e. Action Types) exist, details of which can be seen in eRoamingPushPricingProductData message    The pricing product data to be processed `MUST` be provided in the â€œPricingProductDataâ€ field, which consists of â€œPricingProductDataRecordâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of pricing data for every point in time in the past.
         * @summary Eroamingpushpricingproductdata V10
         * @param {string} operatorID 
         * @param {ERoamingPushPricingProductData} [eRoamingPushPricingProductData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post(operatorID: string, eRoamingPushPricingProductData?: ERoamingPushPricingProductData, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post(operatorID, eRoamingPushPricingProductData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CPOOICPClientAPIApi - object-oriented interface
 * @export
 * @class CPOOICPClientAPIApi
 * @extends {BaseAPI}
 */
export class CPOOICPClientAPIApi extends BaseAPI {
    /**
     * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  __Functional Description:__  Scenario:  A customer of an EMP wants to charge a vehicle at a charging point of a CPO. The customer authenticates at the charging point. The CPOâ€™s operator system does not recognize the customerâ€™s authentication data. In order to authorize the charging process, the CPOâ€™s system can send an eRoamingAuthorizeStart request to Hubject. The request MUST contain the OperatorID and the identification data (e.g. UID or EvcoID) and MAY contain the EvseID.  Hubject generates a SessionID for the charging process and persists important session data (SessionID, EvseID, identification data).  Regarding the further service processing, there are three different options:  a. Hubject first tries to authorize the customer offline by checking authentication master data. Authentication data can be uploaded by EMPs using the eRoamingAuthenticationData service. ![Authorize Start offline diagram](images/authorizestart_offline.png)  b. In case offline authorization is not possible, Hubject tries to derive the EMP from the provided identification data. QR Code and Plug&amp;Charge identification data contain the EvcoID. Hubject can derive the EMPâ€™s ProviderID from the EvcoID. Hubject will directly forward eRoamingAuthorizeStart requests to the EMP. The EMP provider system checks the requested authentication data and responds accordingly, either by authorizing or not authorizing the request. The response `MUST` contain the ProviderID and the AuthorizationStatus and `MAY` contain a list of identification data that is authorized to stop the charging process. In case that the EMP provider system cannot be addressed (e.g. due to technical problems), the corresponding provider will be dealt with as if responding â€œNotAuthorizedâ€. ![Authorize evco diagram](images/authorize_evco.png)  c. In case that Hubject cannot derive the EMP from the identification data (e.g. with RFID identification), Hubject identifies all EMPs that are under contract with the CPO (EMPs must be the service subscriber) and forwards the eRoamingAuthorizeStart request to all these EMPs (broadcast). Hubject consolidates all EMP responses and creates an overall response, authorizing the request in case that one EMP authorized the request.  ![Authorize Start online diagram](images/authorizestart_online.png)  __Pin Security:__  The eRoamingAuthorizeStart request contains one of the defined identification types (see IdentificationType). The identification type â€œQRCodeIdentificationTypeâ€ (see QRCodeIdentificationType) contains - besides the â€œEvcoIDâ€ field - a â€œPINâ€ field or a â€œHashedPINâ€ field (only one of the two options must be provided).  For security reasons and as a general rule, Hubject does not store PINs in clear text, but always as encrypted hash values. In order to prevent hashed PIN values that may have been picked illegally from being used to request the authorization for charging processes, the PIN value `MUST` always be provided in clear text within the eRoamingAuthorizeStart request. This means that this operation `MUST` always provide the â€œPINâ€ field (clear text). Hubject will always generate a hash value of the provided PIN before checking the offline authentication data. So, in case that a PIN is provided by mistake as hashed value, Hubject automatically generates a hash of a hash, which eventually leads to a denial of authorization  In order to create hash values, Hubject applies the hash algorithm that the EMP has assigned to the QR Code identification record
     * @summary Eroamingauthorizestart V21
     * @param {string} operatorID 
     * @param {ERoamingAuthorizeStart} [eRoamingAuthorizeStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPClientAPIApi
     */
    public eRoamingAuthorizeStartV21Authorizestartv21Post(operatorID: string, eRoamingAuthorizeStart?: ERoamingAuthorizeStart, options?: RawAxiosRequestConfig) {
        return CPOOICPClientAPIApiFp(this.configuration).eRoamingAuthorizeStartV21Authorizestartv21Post(operatorID, eRoamingAuthorizeStart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`  ![Authorize stop diagram](images/authorizestop.png)  eRoamingAuthorizeStop basically works in a similar way to the operation eRoamingAuthorizeStart. The request is sent in order to authorize the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeStart request. In most cases, Hubject can derive the EMP that authorized the charging process from the SessionID and can directly and offline authorize the request or forward the request for stopping to the EMP. In case the charging session was originally authorized offline by the HBS, the session `MUST` only be stopped with the same medium, which was used for starting the session
     * @summary Eroamingauthorizestop V21
     * @param {string} [operatorID] 
     * @param {ERoamingAuthorizeStop} [eRoamingAuthorizeStop] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPClientAPIApi
     */
    public eRoamingAuthorizeStopV21Authorizestopv21Post(operatorID?: string, eRoamingAuthorizeStop?: ERoamingAuthorizeStop, options?: RawAxiosRequestConfig) {
        return CPOOICPClientAPIApiFp(this.configuration).eRoamingAuthorizeStopV21Authorizestopv21Post(operatorID, eRoamingAuthorizeStop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  ![Charge Detail Record diagram](images/cdr.png)  __Functional Description:__  Scenario:  A customer of an EMP has charged a vehicle at a charging station of a CPO. The charging process was started with an eRoamingAuthorizeStart or an eRoamingAuthorizeRemoteStart operation. The process may have been stopped with an eRoamingAuthorizeStop or an eRoamingAuthorizeRemoteStop operation. A preceding stop request is not a necessary precondition for the processing of an eRoamingChargeDetailRecord request. The CPOâ€™s provider system `MUST` send an eRoamingChargeDetailRecord (CDR) after the end of the charging process in order to inform the EMP of the charging session data (e.g. meter values and consumed energy) and further charging process details.  Note:  The CPO `MUST` provide the same SessionID that was assigned to the corresponding charging process. Based on this information Hubject will be able to assign the session data to the correct process.  Hubject will identify the receiving EMP and will forward the CDR to the corresponding EMP. The EMP `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the session data was received successfully and that `MAY` contain a status code for further information.  Hubject will accept only one CDR per SessionID.  In addition to forwarding the CDR to the EMP, Hubject also stores the CDR. In case that the recipient providerâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will nevertheless return to the requestor a positive result provided that storing the CDR was successful.  Note:  Please note that in case of EMP role this part of the URL \'/api/oicp/cdrmgmt/v21/operators/{operatorID}/charge-detail-record\' will be added to your URL endpoint when sending the request through our HBS platform.
     * @summary Eroamingchargedetailrecord V22
     * @param {string} operatorID 
     * @param {ERoamingChargeDetailRecord} [eRoamingChargeDetailRecord] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPClientAPIApi
     */
    public eRoamingChargeDetailRecordV22Chargedetailrecordv22Post(operatorID: string, eRoamingChargeDetailRecord?: ERoamingChargeDetailRecord, options?: RawAxiosRequestConfig) {
        return CPOOICPClientAPIApiFp(this.configuration).eRoamingChargeDetailRecordV22Chargedetailrecordv22Post(operatorID, eRoamingChargeDetailRecord, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`  __Functional Description:__  ![Charging notifications diagram](images/chargingnotifications.png) The ChargingNotification feature enables CPOs to notify EMPs about the end of charge  The ChargingNotification feature basically increases the transparency between CPO - EMP - End Consumer to the level of each charging session.  This feature enables CPO to send various notifications during a single Charging Session. These notifications give the details like  1. When the charging session has started. The CPO can send ChargingNotification of type â€œStartâ€ to Hubject containing information like ChargingStart, MeterStartValue, EVSEID etc.  2. Consumed Energy values during the charging process or duration of successful charging process that has lapsed. The CPO can send ChargingNotification of type â€œProgressâ€ to Hubject containing information like ChargingStart, EventOccurred, ChargingDuration, ConsumedEnergyProgress, EVSEID etc. The frequency between two progress notifications for one charging session should be at least 5 minutes.  3. When the charging session has ended (because no energy is transmitted anymore). The CPO can send a ChargingNotification of type â€œEndâ€ to Hubject containing information such as ChargingEnd, ConsumedEnergy, EVSEID etc.  4. Error occurred before charging starts or during charging process or abrupt changing end. The CPO can send a ChargingNotification of type â€œErrorâ€ to Hubject containing information such as ErrorClass, ErrorAdditionalInfo, EVSEID etc.  Hubject will forward Start, Progress, End and Error notification requests to the EMP. The EMP responds with an eRoamingAcknowledgement. This acknowledgement is then being forwarded to the CPO.  This feature should cover all the notifications that could happen between Session Start and Session End in future. Each bit of information increases transparency to the customer of EMP.
     * @summary Eroamingchargingnotifications V11
     * @param {Body} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPClientAPIApi
     */
    public eRoamingChargingNotificationsV11Chargingnotificationsv11Post(body?: Body, options?: RawAxiosRequestConfig) {
        return CPOOICPClientAPIApiFp(this.configuration).eRoamingChargingNotificationsV11Chargingnotificationsv11Post(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `SEND`   * Implementation: `OPTIONAL` When a CPO sends an eRoamingPushEVSEPricing request, Hubject checks whether there is a valid flexible/dynamic pricing service offer (for the service type Authorization) created by the CPO. If so, the operation allows the upload of a list containing pricing product assignment to EvseIDs to Hubject. In addition, it is also possible to update or delete EVSE pricing data previously pushed with an upload operation request. How the transferred data is to be processed `MUST` be defined in the â€œActionTypeâ€ field of the request. Four processing options (i.e. Action Types) exist, details of which can be seen in section eRoamingPushEVSEPricing).  The EVSE pricing data to be processed `MUST` be provided in the â€œEVSEPricingâ€ field, which consists of â€œEvseIDProductListâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE pricing data for every point in time in the past.  EVSE consistency:  EvseIDs contain the ID of the corresponding CPO (With every EVSE pricing data upload operation, Hubject checks whether the given CPOâ€™s OperatorID or Sub-OperatorIDs if necessary) matches every given EvseID sent in the request. If not, Hubject refuses the data upload and responds with the status code 018.  Note  The eRoamingPushEVSEPricing operation `MUST` always be used sequentially.
     * @summary Eroamingpushevsepricing V10
     * @param {string} operatorID 
     * @param {ERoamingPushEVSEPricing} [eRoamingPushEVSEPricing] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPClientAPIApi
     */
    public eRoamingPushEVSEPricingV10Pushevsepricingv10Post(operatorID: string, eRoamingPushEVSEPricing?: ERoamingPushEVSEPricing, options?: RawAxiosRequestConfig) {
        return CPOOICPClientAPIApiFp(this.configuration).eRoamingPushEVSEPricingV10Pushevsepricingv10Post(operatorID, eRoamingPushEVSEPricing, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `SEND`   * Implementation: `MANDATORY`  ![Push evse data diagram](images/pushevsedata.png)  When a CPO sends an eRoamingPushEvseData request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE data to Hubject. Furthermore, it is possible to update or delete EVSE data that has been pushed with an earlier operation request. How Hubject handles the transferred data `MUST` be defined in the request field &quot;ActionType&quot;, which offers four options.  The EvseData that will be inserted or updated `MUST` be provided in the OperatorEvseData field, which consists of EvseDataRecord structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EvseData for every point in time in the past.  EVSE consistency:  EvseIDs contain the ID of the corresponding CPO (With every data upload operation Hubject checks whether the given CPOâ€™s OperatorID or Sub-OperatorIDs if necessary) matches every given EvseID. If not, Hubject refuses the data upload and responds with the status code 018.  Note: * The eRoamingPushEvseData operation `MUST` always be used sequentially as described in Data Push Operations.
     * @summary Eroamingpushevsedata V23
     * @param {string} operatorID 
     * @param {ERoamingPushEvseData} [eRoamingPushEvseData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPClientAPIApi
     */
    public eRoamingPushEvseDataV23Pushevsedatav23Post(operatorID: string, eRoamingPushEvseData?: ERoamingPushEvseData, options?: RawAxiosRequestConfig) {
        return CPOOICPClientAPIApiFp(this.configuration).eRoamingPushEvseDataV23Pushevsedatav23Post(operatorID, eRoamingPushEvseData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `SEND`   * Implementation: `Mandatory`  ![Push EVSE status](images/pushevsestatus.png)  When a CPO sends an eRoamingPushEvseStatus request, Hubject checks whether there is a valid contract between Hubject and the CPO for the service type (Hubject must be the subscriber). If so, the operation allows uploading EVSE status data to Hubject. Furthermore, it is possible to update EVSE status data that has been pushed with an earlier operation request.  The way how Hubject handles the transferred data `MUST` be defined in the request field &quot;ActionType2, which offers four options. This option works in the same way as the eRoamingAuthenticationData service. The EVSE status data that will be inserted or updated MUST be provided with the field â€œOperatorEvseStatusâ€, which consists of â€œEvseStatusRecordâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of EVSE status data for every point in time in the past.  Note:  The eRoamingPushEvseStatus operation `MUST` always be used sequentiallyas described in Data Push Operations  Best Practices:  Please try to avoid race conditions by sending multiple status simultaneously. Status should be sent one by one.
     * @summary Eroamingpushevsestatus V21
     * @param {string} operatorId 
     * @param {ERoamingPushEvseStatus} [eRoamingPushEvseStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPClientAPIApi
     */
    public eRoamingPushEvseStatusV21Pushevsestatusv21Post(operatorId: string, eRoamingPushEvseStatus?: ERoamingPushEvseStatus, options?: RawAxiosRequestConfig) {
        return CPOOICPClientAPIApiFp(this.configuration).eRoamingPushEvseStatusV21Pushevsestatusv21Post(operatorId, eRoamingPushEvseStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `SEND`   * Implementation: `OPTIONAL`    When a CPO sends an eRoamingPushPricingProductData request, Hubject checks whether there is a valid flexible/dynamic pricing service offer (for the service type Authorization) created by the CPO. If so, the operation allows the upload of pricing product data to Hubject. In addition, it is also possible to update or delete pricing data previously pushed with an upload operation request. How the transferred data is to be processed `MUST` be defined in the â€œActionTypeâ€ field of the request. Four processing options (i.e. Action Types) exist, details of which can be seen in eRoamingPushPricingProductData message    The pricing product data to be processed `MUST` be provided in the â€œPricingProductDataâ€ field, which consists of â€œPricingProductDataRecordâ€ structures. Hubject keeps a history of all updated and changed data records. Every successful push operation â€“ irrespective of the performed action â€“ leads to a new version of currently valid data records. Furthermore, every operation is logged with the current timestamp. Thus, Hubject can reconstruct the status of pricing data for every point in time in the past.
     * @summary Eroamingpushpricingproductdata V10
     * @param {string} operatorID 
     * @param {ERoamingPushPricingProductData} [eRoamingPushPricingProductData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPClientAPIApi
     */
    public eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post(operatorID: string, eRoamingPushPricingProductData?: ERoamingPushPricingProductData, options?: RawAxiosRequestConfig) {
        return CPOOICPClientAPIApiFp(this.configuration).eRoamingPushPricingProductDataV10Pushpricingproductdatav10Post(operatorID, eRoamingPushPricingProductData, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CPOOICPServerAPIApi - axios parameter creator
 * @export
 */
export const CPOOICPServerAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `OPTIONAL`   * This operation is used by EMPs in order to remotely reserve a charging point.  ![Reservation start diagram](images/reservationstart.png)  __Functional Description:__  Scenario:  A customer of an EMP wants to reserve a charging point of a CPO for a later charging process. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMPâ€™s provider system can then initiate a reservation of the CPOâ€™s charging point by sending an eRoamingAuthorizeRemoteReservationStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID. The demanded reservation product can be specified using the field PartnerProductID.  Hubject will derive the CPOâ€™s OperatorID from the EvseID.  Hubject will check whether there is a valid contract between the two partners for the service Reservation (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 â€œUnknown EvseIDâ€. If yes, Hubject will check whether the charging spotâ€™s property â€œIsHubjectCompatibleâ€ is set â€œtrueâ€. If the property is false, Hubject will respond with the status code 604 â€œEvseID is not Hubject compatibleâ€.  In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the reservation process and forwards the request (including the SessionID) to the CPO. The CPO MUST return an eRoamingAcknowledgement message that MUST contain the result indicating whether the reservation was successful and that MAY contain a status code for further information.  In case that the CPOâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a â€œfalseâ€ result and a message indicating the connection error.
         * @summary Eroamingauthorizeremotereservationstart V11
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteReservationStart} [eRoamingAuthorizeRemoteReservationStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeRemoteReservationStartV11Authorizeremotereservationstartv11Post: async (operatorID?: string, eRoamingAuthorizeRemoteReservationStart?: ERoamingAuthorizeRemoteReservationStart, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authorizeremotereservationstartv11`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingAuthorizeRemoteReservationStart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `OPTIONAL`  ![Reservation stop diagram](images/reservationstop.png)  eRoamingAuthorizeRemoteReservationStop basically works in the same way as eRoamingAuthorizeRemoteReservationStart. The only difference is that this request is sent in order to end the reservation of a charging spot. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteReservationStart request. After the eRoamingAuthorizeRemoteReservationStop the CPO `MUST` provide a CDR.
         * @summary Eroamingauthorizeremotereservationstop V1
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteReservationStop} [eRoamingAuthorizeRemoteReservationStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeRemoteReservationStopV1Authorizeremotereservationstopv1Post: async (operatorID?: string, eRoamingAuthorizeRemoteReservationStop?: ERoamingAuthorizeRemoteReservationStop, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authorizeremotereservationstopv1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingAuthorizeRemoteReservationStop, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `MANDATORY`   * This operation is used by EMPs in order to remotely start a charging process  The service that is offered by Hubject in order to allow customers to directly start a charging process via mobile app.  ![Remote start diagram](images/remotestart.png)   __Functional Description:__  __Scenario:__  A customer of an EMP wants to charge a vehicle at a charging station of a CPO. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMPâ€™s provider system can then initiate a charging process at the CPOâ€™s charging station by sending an eRoamingAuthorizeRemoteStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID.  Hubject will derive the CPOâ€™s OperatorID from the EvseID.  Hubject will check whether there is a valid contract between the two partners for the service (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 â€œUnknown EvseIDâ€. If yes, Hubject will check whether the charging spotâ€™s property â€œIsHubjectCompatibleâ€ is set â€œtrueâ€. If the property is false, Hubject will respond with the status code 604 â€œEvseID is not Hubject compatibleâ€.  In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the following process and forwards the request (including the SessionID) to the CPO. The CPO `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the charging process will be started and that `MAY` contain a status code for further information.  In case that the CPOâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a â€œfalseâ€ result and a message indicating the connection error.  Best Practices:   * Please ensure a request run time of under 10 seconds including network roundtrip.
         * @summary Eroamingauthorizeremotestart V21
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteStart} [eRoamingAuthorizeRemoteStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeRemoteStartV21Authorizeremotestartv21Post: async (operatorID?: string, eRoamingAuthorizeRemoteStart?: ERoamingAuthorizeRemoteStart, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authorizeremotestartv21`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operatorID !== undefined) {
                localVarQueryParameter['operatorID'] = operatorID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingAuthorizeRemoteStart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `MANDATORY`  ![Remote stop diagram](images/remotestop.png)  eRoamingAuthorizeRemoteStop basically works in the same way as eRoamingAuthorizeRemoteStart. The only difference is that this request is sent in order to initiate the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteStart request.
         * @summary Eroamingauthorizeremotestop V21
         * @param {string} [externalID] 
         * @param {ERoamingAuthorizeRemoteStop} [eRoamingAuthorizeRemoteStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeRemoteStopV21Authorizeremotestopv21Post: async (externalID?: string, eRoamingAuthorizeRemoteStop?: ERoamingAuthorizeRemoteStop, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authorizeremotestopv21`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (externalID !== undefined) {
                localVarQueryParameter['externalID'] = externalID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRoamingAuthorizeRemoteStop, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CPOOICPServerAPIApi - functional programming interface
 * @export
 */
export const CPOOICPServerAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CPOOICPServerAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `OPTIONAL`   * This operation is used by EMPs in order to remotely reserve a charging point.  ![Reservation start diagram](images/reservationstart.png)  __Functional Description:__  Scenario:  A customer of an EMP wants to reserve a charging point of a CPO for a later charging process. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMPâ€™s provider system can then initiate a reservation of the CPOâ€™s charging point by sending an eRoamingAuthorizeRemoteReservationStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID. The demanded reservation product can be specified using the field PartnerProductID.  Hubject will derive the CPOâ€™s OperatorID from the EvseID.  Hubject will check whether there is a valid contract between the two partners for the service Reservation (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 â€œUnknown EvseIDâ€. If yes, Hubject will check whether the charging spotâ€™s property â€œIsHubjectCompatibleâ€ is set â€œtrueâ€. If the property is false, Hubject will respond with the status code 604 â€œEvseID is not Hubject compatibleâ€.  In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the reservation process and forwards the request (including the SessionID) to the CPO. The CPO MUST return an eRoamingAcknowledgement message that MUST contain the result indicating whether the reservation was successful and that MAY contain a status code for further information.  In case that the CPOâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a â€œfalseâ€ result and a message indicating the connection error.
         * @summary Eroamingauthorizeremotereservationstart V11
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteReservationStart} [eRoamingAuthorizeRemoteReservationStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingAuthorizeRemoteReservationStartV11Authorizeremotereservationstartv11Post(operatorID?: string, eRoamingAuthorizeRemoteReservationStart?: ERoamingAuthorizeRemoteReservationStart, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingAuthorizeRemoteReservationStartV11Authorizeremotereservationstartv11Post(operatorID, eRoamingAuthorizeRemoteReservationStart, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPServerAPIApi.eRoamingAuthorizeRemoteReservationStartV11Authorizeremotereservationstartv11Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `OPTIONAL`  ![Reservation stop diagram](images/reservationstop.png)  eRoamingAuthorizeRemoteReservationStop basically works in the same way as eRoamingAuthorizeRemoteReservationStart. The only difference is that this request is sent in order to end the reservation of a charging spot. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteReservationStart request. After the eRoamingAuthorizeRemoteReservationStop the CPO `MUST` provide a CDR.
         * @summary Eroamingauthorizeremotereservationstop V1
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteReservationStop} [eRoamingAuthorizeRemoteReservationStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingAuthorizeRemoteReservationStopV1Authorizeremotereservationstopv1Post(operatorID?: string, eRoamingAuthorizeRemoteReservationStop?: ERoamingAuthorizeRemoteReservationStop, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingAuthorizeRemoteReservationStopV1Authorizeremotereservationstopv1Post(operatorID, eRoamingAuthorizeRemoteReservationStop, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPServerAPIApi.eRoamingAuthorizeRemoteReservationStopV1Authorizeremotereservationstopv1Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `MANDATORY`   * This operation is used by EMPs in order to remotely start a charging process  The service that is offered by Hubject in order to allow customers to directly start a charging process via mobile app.  ![Remote start diagram](images/remotestart.png)   __Functional Description:__  __Scenario:__  A customer of an EMP wants to charge a vehicle at a charging station of a CPO. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMPâ€™s provider system can then initiate a charging process at the CPOâ€™s charging station by sending an eRoamingAuthorizeRemoteStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID.  Hubject will derive the CPOâ€™s OperatorID from the EvseID.  Hubject will check whether there is a valid contract between the two partners for the service (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 â€œUnknown EvseIDâ€. If yes, Hubject will check whether the charging spotâ€™s property â€œIsHubjectCompatibleâ€ is set â€œtrueâ€. If the property is false, Hubject will respond with the status code 604 â€œEvseID is not Hubject compatibleâ€.  In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the following process and forwards the request (including the SessionID) to the CPO. The CPO `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the charging process will be started and that `MAY` contain a status code for further information.  In case that the CPOâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a â€œfalseâ€ result and a message indicating the connection error.  Best Practices:   * Please ensure a request run time of under 10 seconds including network roundtrip.
         * @summary Eroamingauthorizeremotestart V21
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteStart} [eRoamingAuthorizeRemoteStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingAuthorizeRemoteStartV21Authorizeremotestartv21Post(operatorID?: string, eRoamingAuthorizeRemoteStart?: ERoamingAuthorizeRemoteStart, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingAuthorizeRemoteStartV21Authorizeremotestartv21Post(operatorID, eRoamingAuthorizeRemoteStart, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPServerAPIApi.eRoamingAuthorizeRemoteStartV21Authorizeremotestartv21Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `MANDATORY`  ![Remote stop diagram](images/remotestop.png)  eRoamingAuthorizeRemoteStop basically works in the same way as eRoamingAuthorizeRemoteStart. The only difference is that this request is sent in order to initiate the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteStart request.
         * @summary Eroamingauthorizeremotestop V21
         * @param {string} [externalID] 
         * @param {ERoamingAuthorizeRemoteStop} [eRoamingAuthorizeRemoteStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRoamingAuthorizeRemoteStopV21Authorizeremotestopv21Post(externalID?: string, eRoamingAuthorizeRemoteStop?: ERoamingAuthorizeRemoteStop, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERoamingAcknowledgment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRoamingAuthorizeRemoteStopV21Authorizeremotestopv21Post(externalID, eRoamingAuthorizeRemoteStop, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CPOOICPServerAPIApi.eRoamingAuthorizeRemoteStopV21Authorizeremotestopv21Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CPOOICPServerAPIApi - factory interface
 * @export
 */
export const CPOOICPServerAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CPOOICPServerAPIApiFp(configuration)
    return {
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `OPTIONAL`   * This operation is used by EMPs in order to remotely reserve a charging point.  ![Reservation start diagram](images/reservationstart.png)  __Functional Description:__  Scenario:  A customer of an EMP wants to reserve a charging point of a CPO for a later charging process. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMPâ€™s provider system can then initiate a reservation of the CPOâ€™s charging point by sending an eRoamingAuthorizeRemoteReservationStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID. The demanded reservation product can be specified using the field PartnerProductID.  Hubject will derive the CPOâ€™s OperatorID from the EvseID.  Hubject will check whether there is a valid contract between the two partners for the service Reservation (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 â€œUnknown EvseIDâ€. If yes, Hubject will check whether the charging spotâ€™s property â€œIsHubjectCompatibleâ€ is set â€œtrueâ€. If the property is false, Hubject will respond with the status code 604 â€œEvseID is not Hubject compatibleâ€.  In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the reservation process and forwards the request (including the SessionID) to the CPO. The CPO MUST return an eRoamingAcknowledgement message that MUST contain the result indicating whether the reservation was successful and that MAY contain a status code for further information.  In case that the CPOâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a â€œfalseâ€ result and a message indicating the connection error.
         * @summary Eroamingauthorizeremotereservationstart V11
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteReservationStart} [eRoamingAuthorizeRemoteReservationStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeRemoteReservationStartV11Authorizeremotereservationstartv11Post(operatorID?: string, eRoamingAuthorizeRemoteReservationStart?: ERoamingAuthorizeRemoteReservationStart, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingAuthorizeRemoteReservationStartV11Authorizeremotereservationstartv11Post(operatorID, eRoamingAuthorizeRemoteReservationStart, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `OPTIONAL`  ![Reservation stop diagram](images/reservationstop.png)  eRoamingAuthorizeRemoteReservationStop basically works in the same way as eRoamingAuthorizeRemoteReservationStart. The only difference is that this request is sent in order to end the reservation of a charging spot. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteReservationStart request. After the eRoamingAuthorizeRemoteReservationStop the CPO `MUST` provide a CDR.
         * @summary Eroamingauthorizeremotereservationstop V1
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteReservationStop} [eRoamingAuthorizeRemoteReservationStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeRemoteReservationStopV1Authorizeremotereservationstopv1Post(operatorID?: string, eRoamingAuthorizeRemoteReservationStop?: ERoamingAuthorizeRemoteReservationStop, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingAuthorizeRemoteReservationStopV1Authorizeremotereservationstopv1Post(operatorID, eRoamingAuthorizeRemoteReservationStop, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `MANDATORY`   * This operation is used by EMPs in order to remotely start a charging process  The service that is offered by Hubject in order to allow customers to directly start a charging process via mobile app.  ![Remote start diagram](images/remotestart.png)   __Functional Description:__  __Scenario:__  A customer of an EMP wants to charge a vehicle at a charging station of a CPO. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMPâ€™s provider system can then initiate a charging process at the CPOâ€™s charging station by sending an eRoamingAuthorizeRemoteStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID.  Hubject will derive the CPOâ€™s OperatorID from the EvseID.  Hubject will check whether there is a valid contract between the two partners for the service (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 â€œUnknown EvseIDâ€. If yes, Hubject will check whether the charging spotâ€™s property â€œIsHubjectCompatibleâ€ is set â€œtrueâ€. If the property is false, Hubject will respond with the status code 604 â€œEvseID is not Hubject compatibleâ€.  In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the following process and forwards the request (including the SessionID) to the CPO. The CPO `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the charging process will be started and that `MAY` contain a status code for further information.  In case that the CPOâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a â€œfalseâ€ result and a message indicating the connection error.  Best Practices:   * Please ensure a request run time of under 10 seconds including network roundtrip.
         * @summary Eroamingauthorizeremotestart V21
         * @param {string} [operatorID] 
         * @param {ERoamingAuthorizeRemoteStart} [eRoamingAuthorizeRemoteStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeRemoteStartV21Authorizeremotestartv21Post(operatorID?: string, eRoamingAuthorizeRemoteStart?: ERoamingAuthorizeRemoteStart, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingAuthorizeRemoteStartV21Authorizeremotestartv21Post(operatorID, eRoamingAuthorizeRemoteStart, options).then((request) => request(axios, basePath));
        },
        /**
         * __Note:__   * To `RECEIVE`   * Implementation: `MANDATORY`  ![Remote stop diagram](images/remotestop.png)  eRoamingAuthorizeRemoteStop basically works in the same way as eRoamingAuthorizeRemoteStart. The only difference is that this request is sent in order to initiate the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteStart request.
         * @summary Eroamingauthorizeremotestop V21
         * @param {string} [externalID] 
         * @param {ERoamingAuthorizeRemoteStop} [eRoamingAuthorizeRemoteStop] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRoamingAuthorizeRemoteStopV21Authorizeremotestopv21Post(externalID?: string, eRoamingAuthorizeRemoteStop?: ERoamingAuthorizeRemoteStop, options?: RawAxiosRequestConfig): AxiosPromise<ERoamingAcknowledgment> {
            return localVarFp.eRoamingAuthorizeRemoteStopV21Authorizeremotestopv21Post(externalID, eRoamingAuthorizeRemoteStop, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CPOOICPServerAPIApi - object-oriented interface
 * @export
 * @class CPOOICPServerAPIApi
 * @extends {BaseAPI}
 */
export class CPOOICPServerAPIApi extends BaseAPI {
    /**
     * __Note:__   * To `RECEIVE`   * Implementation: `OPTIONAL`   * This operation is used by EMPs in order to remotely reserve a charging point.  ![Reservation start diagram](images/reservationstart.png)  __Functional Description:__  Scenario:  A customer of an EMP wants to reserve a charging point of a CPO for a later charging process. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMPâ€™s provider system can then initiate a reservation of the CPOâ€™s charging point by sending an eRoamingAuthorizeRemoteReservationStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID. The demanded reservation product can be specified using the field PartnerProductID.  Hubject will derive the CPOâ€™s OperatorID from the EvseID.  Hubject will check whether there is a valid contract between the two partners for the service Reservation (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 â€œUnknown EvseIDâ€. If yes, Hubject will check whether the charging spotâ€™s property â€œIsHubjectCompatibleâ€ is set â€œtrueâ€. If the property is false, Hubject will respond with the status code 604 â€œEvseID is not Hubject compatibleâ€.  In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the reservation process and forwards the request (including the SessionID) to the CPO. The CPO MUST return an eRoamingAcknowledgement message that MUST contain the result indicating whether the reservation was successful and that MAY contain a status code for further information.  In case that the CPOâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a â€œfalseâ€ result and a message indicating the connection error.
     * @summary Eroamingauthorizeremotereservationstart V11
     * @param {string} [operatorID] 
     * @param {ERoamingAuthorizeRemoteReservationStart} [eRoamingAuthorizeRemoteReservationStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPServerAPIApi
     */
    public eRoamingAuthorizeRemoteReservationStartV11Authorizeremotereservationstartv11Post(operatorID?: string, eRoamingAuthorizeRemoteReservationStart?: ERoamingAuthorizeRemoteReservationStart, options?: RawAxiosRequestConfig) {
        return CPOOICPServerAPIApiFp(this.configuration).eRoamingAuthorizeRemoteReservationStartV11Authorizeremotereservationstartv11Post(operatorID, eRoamingAuthorizeRemoteReservationStart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `RECEIVE`   * Implementation: `OPTIONAL`  ![Reservation stop diagram](images/reservationstop.png)  eRoamingAuthorizeRemoteReservationStop basically works in the same way as eRoamingAuthorizeRemoteReservationStart. The only difference is that this request is sent in order to end the reservation of a charging spot. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteReservationStart request. After the eRoamingAuthorizeRemoteReservationStop the CPO `MUST` provide a CDR.
     * @summary Eroamingauthorizeremotereservationstop V1
     * @param {string} [operatorID] 
     * @param {ERoamingAuthorizeRemoteReservationStop} [eRoamingAuthorizeRemoteReservationStop] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPServerAPIApi
     */
    public eRoamingAuthorizeRemoteReservationStopV1Authorizeremotereservationstopv1Post(operatorID?: string, eRoamingAuthorizeRemoteReservationStop?: ERoamingAuthorizeRemoteReservationStop, options?: RawAxiosRequestConfig) {
        return CPOOICPServerAPIApiFp(this.configuration).eRoamingAuthorizeRemoteReservationStopV1Authorizeremotereservationstopv1Post(operatorID, eRoamingAuthorizeRemoteReservationStop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `RECEIVE`   * Implementation: `MANDATORY`   * This operation is used by EMPs in order to remotely start a charging process  The service that is offered by Hubject in order to allow customers to directly start a charging process via mobile app.  ![Remote start diagram](images/remotestart.png)   __Functional Description:__  __Scenario:__  A customer of an EMP wants to charge a vehicle at a charging station of a CPO. The customer informs his EMP of his intention, e.g. via mobile phone or smart phone application. The EMPâ€™s provider system can then initiate a charging process at the CPOâ€™s charging station by sending an eRoamingAuthorizeRemoteStart request to Hubject. The request `MUST` contain the ProviderID and the EvseID.  Hubject will derive the CPOâ€™s OperatorID from the EvseID.  Hubject will check whether there is a valid contract between the two partners for the service (EMP must be the subscriber). If so, Hubject continues with checking the charging point compatibility. In case that the CPO has uploaded at least one charging point data record, Hubject will check whether the requested EvseID is among the uploaded data. If not, Hubject will respond with the status code 603 â€œUnknown EvseIDâ€. If yes, Hubject will check whether the charging spotâ€™s property â€œIsHubjectCompatibleâ€ is set â€œtrueâ€. If the property is false, Hubject will respond with the status code 604 â€œEvseID is not Hubject compatibleâ€.  In case that the requested EvseID is compatible or the CPO has not uploaded any EVSE records at all, Hubject generates a SessionID for the following process and forwards the request (including the SessionID) to the CPO. The CPO `MUST` return an eRoamingAcknowledgement message that `MUST` contain the result indicating whether the charging process will be started and that `MAY` contain a status code for further information.  In case that the CPOâ€™s system cannot be addressed (e.g. due to technical problems), Hubject will return to the requestor a â€œfalseâ€ result and a message indicating the connection error.  Best Practices:   * Please ensure a request run time of under 10 seconds including network roundtrip.
     * @summary Eroamingauthorizeremotestart V21
     * @param {string} [operatorID] 
     * @param {ERoamingAuthorizeRemoteStart} [eRoamingAuthorizeRemoteStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPServerAPIApi
     */
    public eRoamingAuthorizeRemoteStartV21Authorizeremotestartv21Post(operatorID?: string, eRoamingAuthorizeRemoteStart?: ERoamingAuthorizeRemoteStart, options?: RawAxiosRequestConfig) {
        return CPOOICPServerAPIApiFp(this.configuration).eRoamingAuthorizeRemoteStartV21Authorizeremotestartv21Post(operatorID, eRoamingAuthorizeRemoteStart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * __Note:__   * To `RECEIVE`   * Implementation: `MANDATORY`  ![Remote stop diagram](images/remotestop.png)  eRoamingAuthorizeRemoteStop basically works in the same way as eRoamingAuthorizeRemoteStart. The only difference is that this request is sent in order to initiate the stopping of a charging process. The request `MUST` contain the SessionID that was created by Hubject after the initial eRoamingAuthorizeRemoteStart request.
     * @summary Eroamingauthorizeremotestop V21
     * @param {string} [externalID] 
     * @param {ERoamingAuthorizeRemoteStop} [eRoamingAuthorizeRemoteStop] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CPOOICPServerAPIApi
     */
    public eRoamingAuthorizeRemoteStopV21Authorizeremotestopv21Post(externalID?: string, eRoamingAuthorizeRemoteStop?: ERoamingAuthorizeRemoteStop, options?: RawAxiosRequestConfig) {
        return CPOOICPServerAPIApiFp(this.configuration).eRoamingAuthorizeRemoteStopV21Authorizeremotestopv21Post(externalID, eRoamingAuthorizeRemoteStop, options).then((request) => request(this.axios, this.basePath));
    }
}



