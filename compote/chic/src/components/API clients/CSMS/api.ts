/* tslint:disable */
/* eslint-disable */
/**
 * CSMS API Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 * In load balancing scenarios, the Charge Point has one or more local charging profiles that limit the power or current to be shared by all connectors of the Charge Point. The Central System SHALL configure such a profile with ChargingProfilePurpose set to “ChargePointMaxProfile”. ChargePointMaxProfile can only be set at Charge Point ConnectorId 0.  Default schedules for new transactions MAY be used to impose charging policies. An example could be a policy that prevents charging during the day. For schedules of this purpose, ChargingProfilePurpose SHALL be set to TxDefaultProfile. If TxDefaultProfile is set to ConnectorId 0, the TxDefaultProfile is applicable to all Connectors. If ConnectorId is set >0, it only applies to that specific connector. In the event a TxDefaultProfile for connector 0 is installed, and the Central System sends a new profile with ConnectorId >0, the TxDefaultProfile SHALL be replaced only for that specific connector.  If a transaction-specific profile with purpose TxProfile is present, it SHALL overrule the default charging profile with purpose TxDefaultProfile for the duration of the current transaction only. After the transaction is stopped, the profile SHOULD be deleted. If there is no transaction active on the connector specified in a charging profile of type TxProfile, then the Charge Point SHALL discard it and return an error status in SetChargingProfile.conf. TxProfile SHALL only be set at Charge Point ConnectorId >0.  It is not possible to set a ChargingProfile with purpose set to TxProfile without presence of an active transaction, or in advance of a transaction.  In order to ensure that the updated charging profile applies only to the current transaction, the chargingProfilePurpose of the ChargingProfile MUST be set to TxProfile.
 * @export
 * @enum {string}
 */

export const ChargingProfilePurposeType = {
  ChargePointMaxProfile: "ChargePointMaxProfile",
  TxDefaultProfile: "TxDefaultProfile",
  TxProfile: "TxProfile",
  ChargePointMaxProfile2: "ChargePointMaxProfile",
  TxDefaultProfile2: "TxDefaultProfile",
  TxProfile2: "TxProfile",
} as const;

export type ChargingProfilePurposeType =
  (typeof ChargingProfilePurposeType)[keyof typeof ChargingProfilePurposeType];

/**
 * Unit in which a charging schedule is defined, as used in: GetCompositeSchedule.req and ChargingSchedule
 * @export
 * @enum {string}
 */

export const ChargingRateUnitType = {
  W: "W",
  A: "A",
} as const;

export type ChargingRateUnitType =
  (typeof ChargingRateUnitType)[keyof typeof ChargingRateUnitType];

/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>;
}
/**
 * Type of request to be triggered in a TriggerMessage.req
 * @export
 * @enum {string}
 */

export const MessageTrigger = {
  BootNotification: "BootNotification",
  FirmwareStatusNotification: "FirmwareStatusNotification",
  Heartbeat: "Heartbeat",
  MeterValues: "MeterValues",
  StatusNotification: "StatusNotification",
  DiagnosticsStatusNotification: "DiagnosticsStatusNotification",
  LogStatusNotification: "LogStatusNotification",
  SignChargePointCertificate: "SignChargePointCertificate",
  BootNotification2: "BootNotification",
  DiagnosticsStatusNotification2: "DiagnosticsStatusNotification",
  FirmwareStatusNotification2: "FirmwareStatusNotification",
  MeterValues2: "MeterValues",
  StatusNotification2: "StatusNotification",
} as const;

export type MessageTrigger =
  (typeof MessageTrigger)[keyof typeof MessageTrigger];

/**
 *
 * @export
 * @interface OCPP16CancelReservationProcessorBody
 */
export interface OCPP16CancelReservationProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP16CancelReservationProcessorBody
   */
  reservation_id: number;
}
/**
 *
 * @export
 * @interface OCPP16ChangeAvailabilityProcessorBody
 */
export interface OCPP16ChangeAvailabilityProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP16ChangeAvailabilityProcessorBody
   */
  connector_id: number;
  /**
   *
   * @type {any}
   * @memberof OCPP16ChangeAvailabilityProcessorBody
   */
  type?: any;
}
/**
 *
 * @export
 * @interface OCPP16ChangeConfigurationAuthenticationProcessorBody
 */
export interface OCPP16ChangeConfigurationAuthenticationProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16ChangeConfigurationAuthenticationProcessorBody
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16ChangeConfigurationAuthenticationProcessorBody
   */
  value?: string;
}
/**
 *
 * @export
 * @interface OCPP16ChangeConfigurationProcessorBody
 */
export interface OCPP16ChangeConfigurationProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16ChangeConfigurationProcessorBody
   */
  key: string;
  /**
   *
   * @type {any}
   * @memberof OCPP16ChangeConfigurationProcessorBody
   */
  value: any;
}
/**
 *
 * @export
 * @interface OCPP16ClearChargingProfileProcessorBody
 */
export interface OCPP16ClearChargingProfileProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP16ClearChargingProfileProcessorBody
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof OCPP16ClearChargingProfileProcessorBody
   */
  connector_id: number;
  /**
   *
   * @type {ChargingProfilePurposeType}
   * @memberof OCPP16ClearChargingProfileProcessorBody
   */
  charging_profile_purpose: ChargingProfilePurposeType;
  /**
   *
   * @type {number}
   * @memberof OCPP16ClearChargingProfileProcessorBody
   */
  stack_level: number;
}

/**
 *
 * @export
 * @interface OCPP16ExtendedTriggerMessageProcessorBody
 */
export interface OCPP16ExtendedTriggerMessageProcessorBody {
  /**
   *
   * @type {MessageTrigger}
   * @memberof OCPP16ExtendedTriggerMessageProcessorBody
   */
  requested_message: MessageTrigger;
  /**
   *
   * @type {number}
   * @memberof OCPP16ExtendedTriggerMessageProcessorBody
   */
  connector_id: number;
}

/**
 *
 * @export
 * @interface OCPP16GetCompositeScheduleProcessorBody
 */
export interface OCPP16GetCompositeScheduleProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP16GetCompositeScheduleProcessorBody
   */
  connector_id: number;
  /**
   *
   * @type {number}
   * @memberof OCPP16GetCompositeScheduleProcessorBody
   */
  duration: number;
  /**
   *
   * @type {ChargingRateUnitType}
   * @memberof OCPP16GetCompositeScheduleProcessorBody
   */
  charging_rate_unit?: ChargingRateUnitType;
}

/**
 *
 * @export
 * @interface OCPP16GetConfigurationAuthenticationProcessorBody
 */
export interface OCPP16GetConfigurationAuthenticationProcessorBody {
  /**
   *
   * @type {Array<any>}
   * @memberof OCPP16GetConfigurationAuthenticationProcessorBody
   */
  key?: Array<any>;
}
/**
 *
 * @export
 * @interface OCPP16GetConfigurationProcessorBody
 */
export interface OCPP16GetConfigurationProcessorBody {
  /**
   *
   * @type {Array<any>}
   * @memberof OCPP16GetConfigurationProcessorBody
   */
  key?: Array<any>;
}
/**
 *
 * @export
 * @interface OCPP16GetDiagnosticsProcessorBody
 */
export interface OCPP16GetDiagnosticsProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16GetDiagnosticsProcessorBody
   */
  location: string;
  /**
   *
   * @type {number}
   * @memberof OCPP16GetDiagnosticsProcessorBody
   */
  retries?: number;
  /**
   *
   * @type {number}
   * @memberof OCPP16GetDiagnosticsProcessorBody
   */
  retry_interval?: number;
  /**
   *
   * @type {string}
   * @memberof OCPP16GetDiagnosticsProcessorBody
   */
  start_time?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16GetDiagnosticsProcessorBody
   */
  stop_time?: string;
}
/**
 *
 * @export
 * @interface OCPP16RemoteStartTransactionProcessorBody
 */
export interface OCPP16RemoteStartTransactionProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16RemoteStartTransactionProcessorBody
   */
  id_tag: string;
  /**
   *
   * @type {number}
   * @memberof OCPP16RemoteStartTransactionProcessorBody
   */
  connector_id?: number;
  /**
   *
   * @type {object}
   * @memberof OCPP16RemoteStartTransactionProcessorBody
   */
  charging_profile?: object;
}
/**
 *
 * @export
 * @interface OCPP16RemoteStopTransactionProcessorBody
 */
export interface OCPP16RemoteStopTransactionProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP16RemoteStopTransactionProcessorBody
   */
  transaction_id: number;
}
/**
 *
 * @export
 * @interface OCPP16ReserveNowProcessorBody
 */
export interface OCPP16ReserveNowProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP16ReserveNowProcessorBody
   */
  connector_id: number;
  /**
   *
   * @type {string}
   * @memberof OCPP16ReserveNowProcessorBody
   */
  expiry_date: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16ReserveNowProcessorBody
   */
  id_tag: string;
  /**
   *
   * @type {number}
   * @memberof OCPP16ReserveNowProcessorBody
   */
  reservation_id: number;
  /**
   *
   * @type {string}
   * @memberof OCPP16ReserveNowProcessorBody
   */
  parent_id_tag?: string;
}
/**
 *
 * @export
 * @interface OCPP16ResetProcessorBody
 */
export interface OCPP16ResetProcessorBody {
  /**
   *
   * @type {ResetType}
   * @memberof OCPP16ResetProcessorBody
   */
  type: ResetType;
}

/**
 *
 * @export
 * @interface OCPP16SendDataTransferCertificateInstallationProcessorBody
 */
export interface OCPP16SendDataTransferCertificateInstallationProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferCertificateInstallationProcessorBody
   */
  vendor_id: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferCertificateInstallationProcessorBody
   */
  message_id?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferCertificateInstallationProcessorBody
   */
  data?: string;
}
/**
 *
 * @export
 * @interface OCPP16SendDataTransferCertificateSignedProcessorBody
 */
export interface OCPP16SendDataTransferCertificateSignedProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferCertificateSignedProcessorBody
   */
  vendor_id: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferCertificateSignedProcessorBody
   */
  message_id?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferCertificateSignedProcessorBody
   */
  data?: string;
}
/**
 *
 * @export
 * @interface OCPP16SendDataTransferGetCertificateStatusProcessorBody
 */
export interface OCPP16SendDataTransferGetCertificateStatusProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferGetCertificateStatusProcessorBody
   */
  vendor_id: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferGetCertificateStatusProcessorBody
   */
  message_id?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferGetCertificateStatusProcessorBody
   */
  data?: string;
}
/**
 *
 * @export
 * @interface OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
 */
export interface OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
   */
  vendor_id: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
   */
  message_id?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
   */
  data?: string;
}
/**
 *
 * @export
 * @interface OCPP16SendDataTransferProcessorBody
 */
export interface OCPP16SendDataTransferProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferProcessorBody
   */
  vendor_id: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferProcessorBody
   */
  message_id?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferProcessorBody
   */
  data?: string;
}
/**
 *
 * @export
 * @interface OCPP16SendDataTransferTriggerMessageProcessorBody
 */
export interface OCPP16SendDataTransferTriggerMessageProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferTriggerMessageProcessorBody
   */
  vendor_id: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferTriggerMessageProcessorBody
   */
  message_id?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferTriggerMessageProcessorBody
   */
  data?: string;
}
/**
 *
 * @export
 * @interface OCPP16SendDataTransferV2GCertificateProcessorBody
 */
export interface OCPP16SendDataTransferV2GCertificateProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferV2GCertificateProcessorBody
   */
  vendor_id: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferV2GCertificateProcessorBody
   */
  message_id?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP16SendDataTransferV2GCertificateProcessorBody
   */
  data?: string;
}
/**
 *
 * @export
 * @interface OCPP16SendLocalListProcessorBody
 */
export interface OCPP16SendLocalListProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP16SendLocalListProcessorBody
   */
  list_version: number;
  /**
   *
   * @type {OcppV16EnumsUpdateType}
   * @memberof OCPP16SendLocalListProcessorBody
   */
  update_type: OcppV16EnumsUpdateType;
  /**
   *
   * @type {Array<any>}
   * @memberof OCPP16SendLocalListProcessorBody
   */
  local_authorization_list?: Array<any>;
}

/**
 *
 * @export
 * @interface OCPP16SetChargingProfileProcessorBody
 */
export interface OCPP16SetChargingProfileProcessorBody {
  /**
   *
   * @type {any}
   * @memberof OCPP16SetChargingProfileProcessorBody
   */
  connector_id?: any;
  /**
   *
   * @type {any}
   * @memberof OCPP16SetChargingProfileProcessorBody
   */
  charging_profile?: any;
}
/**
 *
 * @export
 * @interface OCPP16TriggerMessageProcessorBody
 */
export interface OCPP16TriggerMessageProcessorBody {
  /**
   *
   * @type {MessageTrigger}
   * @memberof OCPP16TriggerMessageProcessorBody
   */
  requested_message: MessageTrigger;
  /**
   *
   * @type {number}
   * @memberof OCPP16TriggerMessageProcessorBody
   */
  connector_id: number;
}

/**
 *
 * @export
 * @interface OCPP16UnlockConnectorProcessorBody
 */
export interface OCPP16UnlockConnectorProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP16UnlockConnectorProcessorBody
   */
  connector_id: number;
}
/**
 *
 * @export
 * @interface OCPP20CancelReservationProcessorBody
 */
export interface OCPP20CancelReservationProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP20CancelReservationProcessorBody
   */
  reservation_id: number;
  /**
   *
   * @type {object}
   * @memberof OCPP20CancelReservationProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20ChangeAvailabilityProcessorBody
 */
export interface OCPP20ChangeAvailabilityProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP20ChangeAvailabilityProcessorBody
   */
  operational_status: string;
  /**
   *
   * @type {object}
   * @memberof OCPP20ChangeAvailabilityProcessorBody
   */
  evse: object | null;
  /**
   *
   * @type {object}
   * @memberof OCPP20ChangeAvailabilityProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20ClearChargingProfileProcessorBody
 */
export interface OCPP20ClearChargingProfileProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP20ClearChargingProfileProcessorBody
   */
  charging_profile_id?: number | null;
  /**
   *
   * @type {object}
   * @memberof OCPP20ClearChargingProfileProcessorBody
   */
  charging_profile_criteria?: object | null;
  /**
   *
   * @type {object}
   * @memberof OCPP20ClearChargingProfileProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20GetBaseReportProcessorBody
 */
export interface OCPP20GetBaseReportProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP20GetBaseReportProcessorBody
   */
  request_id: number;
  /**
   *
   * @type {string}
   * @memberof OCPP20GetBaseReportProcessorBody
   */
  report_base: string;
  /**
   *
   * @type {object}
   * @memberof OCPP20GetBaseReportProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20GetLocalListVersionProcessorBody
 */
export interface OCPP20GetLocalListVersionProcessorBody {
  /**
   *
   * @type {object}
   * @memberof OCPP20GetLocalListVersionProcessorBody
   */
  custom_data?: object | null;
}
/**
 *
 * @export
 * @interface OCPP20GetReportProcessorBody
 */
export interface OCPP20GetReportProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP20GetReportProcessorBody
   */
  request_id: number;
  /**
   *
   * @type {Array<any>}
   * @memberof OCPP20GetReportProcessorBody
   */
  component_variable?: Array<any> | null;
  /**
   *
   * @type {Array<any>}
   * @memberof OCPP20GetReportProcessorBody
   */
  component_criteria?: Array<any> | null;
  /**
   *
   * @type {object}
   * @memberof OCPP20GetReportProcessorBody
   */
  custom_data?: object | null;
}
/**
 *
 * @export
 * @interface OCPP20GetVariablesProcessorBody
 */
export interface OCPP20GetVariablesProcessorBody {
  /**
   *
   * @type {Array<any>}
   * @memberof OCPP20GetVariablesProcessorBody
   */
  get_variable_data?: Array<any>;
  /**
   *
   * @type {object}
   * @memberof OCPP20GetVariablesProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20RemoteStartTransactionProcessorBody
 */
export interface OCPP20RemoteStartTransactionProcessorBody {
  /**
   *
   * @type {object}
   * @memberof OCPP20RemoteStartTransactionProcessorBody
   */
  id_token: object;
  /**
   *
   * @type {number}
   * @memberof OCPP20RemoteStartTransactionProcessorBody
   */
  remote_start_id: number;
  /**
   *
   * @type {number}
   * @memberof OCPP20RemoteStartTransactionProcessorBody
   */
  evse_id?: number;
  /**
   *
   * @type {object}
   * @memberof OCPP20RemoteStartTransactionProcessorBody
   */
  group_id_token?: object;
  /**
   *
   * @type {object}
   * @memberof OCPP20RemoteStartTransactionProcessorBody
   */
  charging_profile?: object;
  /**
   *
   * @type {object}
   * @memberof OCPP20RemoteStartTransactionProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20RemoteStopTransactionProcessorBody
 */
export interface OCPP20RemoteStopTransactionProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP20RemoteStopTransactionProcessorBody
   */
  transaction_id: string;
  /**
   *
   * @type {object}
   * @memberof OCPP20RemoteStopTransactionProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20ReserveNowProcessorBody
 */
export interface OCPP20ReserveNowProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP20ReserveNowProcessorBody
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof OCPP20ReserveNowProcessorBody
   */
  expiry_date_time: string;
  /**
   *
   * @type {object}
   * @memberof OCPP20ReserveNowProcessorBody
   */
  id_token: object;
  /**
   *
   * @type {string}
   * @memberof OCPP20ReserveNowProcessorBody
   */
  connector_type?: string;
  /**
   *
   * @type {number}
   * @memberof OCPP20ReserveNowProcessorBody
   */
  evse_id?: number;
  /**
   *
   * @type {object}
   * @memberof OCPP20ReserveNowProcessorBody
   */
  group_id_token?: object;
  /**
   *
   * @type {object}
   * @memberof OCPP20ReserveNowProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20ResetProcessorBody
 */
export interface OCPP20ResetProcessorBody {
  /**
   *
   * @type {ResetType}
   * @memberof OCPP20ResetProcessorBody
   */
  type: ResetType;
  /**
   *
   * @type {number}
   * @memberof OCPP20ResetProcessorBody
   */
  evse_id?: number | null;
  /**
   *
   * @type {object}
   * @memberof OCPP20ResetProcessorBody
   */
  custom_data?: object;
}

/**
 *
 * @export
 * @interface OCPP20SendDataTransferProcessorBody
 */
export interface OCPP20SendDataTransferProcessorBody {
  /**
   *
   * @type {string}
   * @memberof OCPP20SendDataTransferProcessorBody
   */
  vendor_id: string;
  /**
   *
   * @type {string}
   * @memberof OCPP20SendDataTransferProcessorBody
   */
  message_id?: string;
  /**
   *
   * @type {string}
   * @memberof OCPP20SendDataTransferProcessorBody
   */
  data?: string;
  /**
   *
   * @type {object}
   * @memberof OCPP20SendDataTransferProcessorBody
   */
  custom_data?: object;
}
/**
 *
 * @export
 * @interface OCPP20SendLocalListProcessorBody
 */
export interface OCPP20SendLocalListProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP20SendLocalListProcessorBody
   */
  list_version: number;
  /**
   *
   * @type {OcppV201EnumsUpdateType}
   * @memberof OCPP20SendLocalListProcessorBody
   */
  update_type: OcppV201EnumsUpdateType;
  /**
   *
   * @type {Array<any>}
   * @memberof OCPP20SendLocalListProcessorBody
   */
  local_authorization_list?: Array<any>;
  /**
   *
   * @type {object}
   * @memberof OCPP20SendLocalListProcessorBody
   */
  custom_data?: object | null;
}

/**
 *
 * @export
 * @interface OCPP20SetVariablesProcessorBody
 */
export interface OCPP20SetVariablesProcessorBody {
  /**
   *
   * @type {Array<any>}
   * @memberof OCPP20SetVariablesProcessorBody
   */
  set_variable_data: Array<any>;
  /**
   *
   * @type {object}
   * @memberof OCPP20SetVariablesProcessorBody
   */
  custom_data?: object | null;
}
/**
 *
 * @export
 * @interface OCPP20UnlockConnectorProcessorBody
 */
export interface OCPP20UnlockConnectorProcessorBody {
  /**
   *
   * @type {number}
   * @memberof OCPP20UnlockConnectorProcessorBody
   */
  evse_id: number;
  /**
   *
   * @type {number}
   * @memberof OCPP20UnlockConnectorProcessorBody
   */
  connector_id: number;
  /**
   *
   * @type {object}
   * @memberof OCPP20UnlockConnectorProcessorBody
   */
  custom_data?: object | null;
}
/**
 * Type of update for a SendLocalList.req.
 * @export
 * @enum {string}
 */

export const OcppV16EnumsUpdateType = {
  Differential: "Differential",
  Full: "Full",
} as const;

export type OcppV16EnumsUpdateType =
  (typeof OcppV16EnumsUpdateType)[keyof typeof OcppV16EnumsUpdateType];

/**
 * Type of update for a SendLocalList Request.
 * @export
 * @enum {string}
 */

export const OcppV201EnumsUpdateType = {
  Differential: "Differential",
  Full: "Full",
} as const;

export type OcppV201EnumsUpdateType =
  (typeof OcppV201EnumsUpdateType)[keyof typeof OcppV201EnumsUpdateType];

/**
 * Type of reset requested by Reset.req
 * @export
 * @enum {string}
 */

export const ResetType = {
  Hard: "Hard",
  Soft: "Soft",
} as const;

export type ResetType = (typeof ResetType)[keyof typeof ResetType];

/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<ValidationErrorLocInner>}
   * @memberof ValidationError
   */
  loc: Array<ValidationErrorLocInner>;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string;
}
/**
 *
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {}

/**
 * ContextApi - axios parameter creator
 * @export
 */
export const ContextApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextContextContextIdGet: async (
      contextId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contextId' is not null or undefined
      assertParamExists("contextContextContextIdGet", "contextId", contextId);
      const localVarPath = `/context/{context_id}`.replace(
        `{${"context_id"}}`,
        encodeURIComponent(String(contextId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context Errors
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextErrorsContextContextIdErrorsGet: async (
      contextId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contextId' is not null or undefined
      assertParamExists(
        "contextErrorsContextContextIdErrorsGet",
        "contextId",
        contextId
      );
      const localVarPath = `/context/{context_id}/errors`.replace(
        `{${"context_id"}}`,
        encodeURIComponent(String(contextId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values  Args:     context_id: the context ID from the path     fields: list of fields to extract from the context data  Returns:     A dict containing either all of the context data (if fields is empty)     or a subset of the data filtered by `fields`.
     * @summary Context Field
     * @param {string} contextId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextFieldContextContextIdDataPost: async (
      contextId: string,
      requestBody: Array<string>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contextId' is not null or undefined
      assertParamExists(
        "contextFieldContextContextIdDataPost",
        "contextId",
        contextId
      );
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        "contextFieldContextContextIdDataPost",
        "requestBody",
        requestBody
      );
      const localVarPath = `/context/{context_id}/data`.replace(
        `{${"context_id"}}`,
        encodeURIComponent(String(contextId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context Messages
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextMessagesContextContextIdMessagesGet: async (
      contextId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contextId' is not null or undefined
      assertParamExists(
        "contextMessagesContextContextIdMessagesGet",
        "contextId",
        contextId
      );
      const localVarPath = `/context/{context_id}/messages`.replace(
        `{${"context_id"}}`,
        encodeURIComponent(String(contextId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List all csms contexts and return as json response Args:     id (str): the id to match to a specific csms context Returns:     aiohttp.web_response: the csms contexts as a json dictionary wrapped in a aiohttp web_response
     * @summary List Contexts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContextsContextGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/context`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ContextApi - functional programming interface
 * @export
 */
export const ContextApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ContextApiAxiosParamCreator(configuration);
  return {
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contextContextContextIdGet(
      contextId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contextContextContextIdGet(
          contextId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContextApi.contextContextContextIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context Errors
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contextErrorsContextContextIdErrorsGet(
      contextId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contextErrorsContextContextIdErrorsGet(
          contextId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ContextApi.contextErrorsContextContextIdErrorsGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values  Args:     context_id: the context ID from the path     fields: list of fields to extract from the context data  Returns:     A dict containing either all of the context data (if fields is empty)     or a subset of the data filtered by `fields`.
     * @summary Context Field
     * @param {string} contextId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contextFieldContextContextIdDataPost(
      contextId: string,
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contextFieldContextContextIdDataPost(
          contextId,
          requestBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContextApi.contextFieldContextContextIdDataPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context Messages
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async contextMessagesContextContextIdMessagesGet(
      contextId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.contextMessagesContextContextIdMessagesGet(
          contextId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ContextApi.contextMessagesContextContextIdMessagesGet"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List all csms contexts and return as json response Args:     id (str): the id to match to a specific csms context Returns:     aiohttp.web_response: the csms contexts as a json dictionary wrapped in a aiohttp web_response
     * @summary List Contexts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listContextsContextGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listContextsContextGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContextApi.listContextsContextGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ContextApi - factory interface
 * @export
 */
export const ContextApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContextApiFp(configuration);
  return {
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextContextContextIdGet(
      contextId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .contextContextContextIdGet(contextId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context Errors
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextErrorsContextContextIdErrorsGet(
      contextId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .contextErrorsContextContextIdErrorsGet(contextId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values  Args:     context_id: the context ID from the path     fields: list of fields to extract from the context data  Returns:     A dict containing either all of the context data (if fields is empty)     or a subset of the data filtered by `fields`.
     * @summary Context Field
     * @param {string} contextId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextFieldContextContextIdDataPost(
      contextId: string,
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .contextFieldContextContextIdDataPost(contextId, requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
     * @summary Context Messages
     * @param {string} contextId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contextMessagesContextContextIdMessagesGet(
      contextId: string,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .contextMessagesContextContextIdMessagesGet(contextId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List all csms contexts and return as json response Args:     id (str): the id to match to a specific csms context Returns:     aiohttp.web_response: the csms contexts as a json dictionary wrapped in a aiohttp web_response
     * @summary List Contexts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContextsContextGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
      return localVarFp
        .listContextsContextGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ContextApi - object-oriented interface
 * @export
 * @class ContextApi
 * @extends {BaseAPI}
 */
export class ContextApi extends BaseAPI {
  /**
   * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
   * @summary Context
   * @param {string} contextId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContextApi
   */
  public contextContextContextIdGet(
    contextId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ContextApiFp(this.configuration)
      .contextContextContextIdGet(contextId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
   * @summary Context Errors
   * @param {string} contextId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContextApi
   */
  public contextErrorsContextContextIdErrorsGet(
    contextId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ContextApiFp(this.configuration)
      .contextErrorsContextContextIdErrorsGet(contextId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Handle a specific route for a given request based on matched id and extracted values  Args:     context_id: the context ID from the path     fields: list of fields to extract from the context data  Returns:     A dict containing either all of the context data (if fields is empty)     or a subset of the data filtered by `fields`.
   * @summary Context Field
   * @param {string} contextId
   * @param {Array<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContextApi
   */
  public contextFieldContextContextIdDataPost(
    contextId: string,
    requestBody: Array<string>,
    options?: RawAxiosRequestConfig
  ) {
    return ContextApiFp(this.configuration)
      .contextFieldContextContextIdDataPost(contextId, requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Handle a specific route for a given request based on matched id and extracted values Args:     request: the request to handle, containing an context id Returns:     dict: the content of the current csms context for a given id
   * @summary Context Messages
   * @param {string} contextId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContextApi
   */
  public contextMessagesContextContextIdMessagesGet(
    contextId: string,
    options?: RawAxiosRequestConfig
  ) {
    return ContextApiFp(this.configuration)
      .contextMessagesContextContextIdMessagesGet(contextId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List all csms contexts and return as json response Args:     id (str): the id to match to a specific csms context Returns:     aiohttp.web_response: the csms contexts as a json dictionary wrapped in a aiohttp web_response
   * @summary List Contexts
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContextApi
   */
  public listContextsContextGet(options?: RawAxiosRequestConfig) {
    return ContextApiFp(this.configuration)
      .listContextsContextGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * LoggingApi - axios parameter creator
 * @export
 */
export const LoggingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get log entries grouped by uuid as json Args:     request: the request to handle Returns:     web.Response: logging entries as json
     * @summary Log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logLogGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/log`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get log entries grouped by uuid as json Args:     request: the request to handle Returns:     web.Response: event entries as json
     * @summary Log Uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logUuidLogUuidGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/log_uuid`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LoggingApi - functional programming interface
 * @export
 */
export const LoggingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LoggingApiAxiosParamCreator(configuration);
  return {
    /**
     * Get log entries grouped by uuid as json Args:     request: the request to handle Returns:     web.Response: logging entries as json
     * @summary Log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logLogGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.logLogGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["LoggingApi.logLogGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Get log entries grouped by uuid as json Args:     request: the request to handle Returns:     web.Response: event entries as json
     * @summary Log Uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logUuidLogUuidGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.logUuidLogUuidGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["LoggingApi.logUuidLogUuidGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * LoggingApi - factory interface
 * @export
 */
export const LoggingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LoggingApiFp(configuration);
  return {
    /**
     * Get log entries grouped by uuid as json Args:     request: the request to handle Returns:     web.Response: logging entries as json
     * @summary Log
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logLogGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
      return localVarFp
        .logLogGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get log entries grouped by uuid as json Args:     request: the request to handle Returns:     web.Response: event entries as json
     * @summary Log Uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logUuidLogUuidGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
      return localVarFp
        .logUuidLogUuidGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LoggingApi - object-oriented interface
 * @export
 * @class LoggingApi
 * @extends {BaseAPI}
 */
export class LoggingApi extends BaseAPI {
  /**
   * Get log entries grouped by uuid as json Args:     request: the request to handle Returns:     web.Response: logging entries as json
   * @summary Log
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoggingApi
   */
  public logLogGet(options?: RawAxiosRequestConfig) {
    return LoggingApiFp(this.configuration)
      .logLogGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get log entries grouped by uuid as json Args:     request: the request to handle Returns:     web.Response: event entries as json
   * @summary Log Uuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoggingApi
   */
  public logUuidLogUuidGet(options?: RawAxiosRequestConfig) {
    return LoggingApiFp(this.configuration)
      .logUuidLogUuidGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OCPPv16Api - axios parameter creator
 * @export
 */
export const OCPPv16ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16CancelReservationProcessorBody} oCPP16CancelReservationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16CancelreservationPost: async (
      id: number,
      oCPP16CancelReservationProcessorBody: OCPP16CancelReservationProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16CancelreservationPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16CancelReservationProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16CancelreservationPost",
        "oCPP16CancelReservationProcessorBody",
        oCPP16CancelReservationProcessorBody
      );
      const localVarPath = `/context/{id}/v16/cancelreservation`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16CancelReservationProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeAvailabilityProcessorBody} oCPP16ChangeAvailabilityProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ChangeavailabilityPost: async (
      id: number,
      oCPP16ChangeAvailabilityProcessorBody: OCPP16ChangeAvailabilityProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ChangeavailabilityPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16ChangeAvailabilityProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ChangeavailabilityPost",
        "oCPP16ChangeAvailabilityProcessorBody",
        oCPP16ChangeAvailabilityProcessorBody
      );
      const localVarPath = `/context/{id}/v16/changeavailability`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16ChangeAvailabilityProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeConfigurationProcessorBody} oCPP16ChangeConfigurationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ChangeconfigurationPost: async (
      id: number,
      oCPP16ChangeConfigurationProcessorBody: OCPP16ChangeConfigurationProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ChangeconfigurationPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16ChangeConfigurationProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ChangeconfigurationPost",
        "oCPP16ChangeConfigurationProcessorBody",
        oCPP16ChangeConfigurationProcessorBody
      );
      const localVarPath = `/context/{id}/v16/changeconfiguration`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16ChangeConfigurationProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ClearcachePost: async (
      id: number,
      body: object,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV16ClearcachePost", "id", id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("routeHandlerContextIdV16ClearcachePost", "body", body);
      const localVarPath = `/context/{id}/v16/clearcache`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ClearChargingProfileProcessorBody} oCPP16ClearChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ClearchargingprofilePost: async (
      id: number,
      oCPP16ClearChargingProfileProcessorBody: OCPP16ClearChargingProfileProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ClearchargingprofilePost",
        "id",
        id
      );
      // verify required parameter 'oCPP16ClearChargingProfileProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ClearchargingprofilePost",
        "oCPP16ClearChargingProfileProcessorBody",
        oCPP16ClearChargingProfileProcessorBody
      );
      const localVarPath = `/context/{id}/v16/clearchargingprofile`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16ClearChargingProfileProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferProcessorBody} oCPP16SendDataTransferProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransferPost: async (
      id: number,
      oCPP16SendDataTransferProcessorBody: OCPP16SendDataTransferProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV16DatatransferPost", "id", id);
      // verify required parameter 'oCPP16SendDataTransferProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransferPost",
        "oCPP16SendDataTransferProcessorBody",
        oCPP16SendDataTransferProcessorBody
      );
      const localVarPath = `/context/{id}/v16/datatransfer`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SendDataTransferProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ExtendedTriggerMessageProcessorBody} oCPP16ExtendedTriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ExtendedtriggermessagePost: async (
      id: number,
      oCPP16ExtendedTriggerMessageProcessorBody: OCPP16ExtendedTriggerMessageProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ExtendedtriggermessagePost",
        "id",
        id
      );
      // verify required parameter 'oCPP16ExtendedTriggerMessageProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ExtendedtriggermessagePost",
        "oCPP16ExtendedTriggerMessageProcessorBody",
        oCPP16ExtendedTriggerMessageProcessorBody
      );
      const localVarPath = `/context/{id}/v16/extendedtriggermessage`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16ExtendedTriggerMessageProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetCompositeScheduleProcessorBody} oCPP16GetCompositeScheduleProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetcompositeschedulePost: async (
      id: number,
      oCPP16GetCompositeScheduleProcessorBody: OCPP16GetCompositeScheduleProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetcompositeschedulePost",
        "id",
        id
      );
      // verify required parameter 'oCPP16GetCompositeScheduleProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetcompositeschedulePost",
        "oCPP16GetCompositeScheduleProcessorBody",
        oCPP16GetCompositeScheduleProcessorBody
      );
      const localVarPath = `/context/{id}/v16/getcompositeschedule`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16GetCompositeScheduleProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetConfigurationProcessorBody} oCPP16GetConfigurationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetconfigurationPost: async (
      id: number,
      oCPP16GetConfigurationProcessorBody: OCPP16GetConfigurationProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetconfigurationPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16GetConfigurationProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetconfigurationPost",
        "oCPP16GetConfigurationProcessorBody",
        oCPP16GetConfigurationProcessorBody
      );
      const localVarPath = `/context/{id}/v16/getconfiguration`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16GetConfigurationProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetDiagnosticsProcessorBody} oCPP16GetDiagnosticsProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetdiagnosticsPost: async (
      id: number,
      oCPP16GetDiagnosticsProcessorBody: OCPP16GetDiagnosticsProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV16GetdiagnosticsPost", "id", id);
      // verify required parameter 'oCPP16GetDiagnosticsProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetdiagnosticsPost",
        "oCPP16GetDiagnosticsProcessorBody",
        oCPP16GetDiagnosticsProcessorBody
      );
      const localVarPath = `/context/{id}/v16/getdiagnostics`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16GetDiagnosticsProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetlocallistversionPost: async (
      id: number,
      body: object,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetlocallistversionPost",
        "id",
        id
      );
      // verify required parameter 'body' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetlocallistversionPost",
        "body",
        body
      );
      const localVarPath = `/context/{id}/v16/getlocallistversion`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16HeartbeatPost: async (
      id: number,
      body: object,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV16HeartbeatPost", "id", id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("routeHandlerContextIdV16HeartbeatPost", "body", body);
      const localVarPath = `/context/{id}/v16/heartbeat`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16RemoteStartTransactionProcessorBody} oCPP16RemoteStartTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16RemotestarttransactionPost: async (
      id: number,
      oCPP16RemoteStartTransactionProcessorBody: OCPP16RemoteStartTransactionProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16RemotestarttransactionPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16RemoteStartTransactionProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16RemotestarttransactionPost",
        "oCPP16RemoteStartTransactionProcessorBody",
        oCPP16RemoteStartTransactionProcessorBody
      );
      const localVarPath = `/context/{id}/v16/remotestarttransaction`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16RemoteStartTransactionProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16RemoteStopTransactionProcessorBody} oCPP16RemoteStopTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16RemotestoptransactionPost: async (
      id: number,
      oCPP16RemoteStopTransactionProcessorBody: OCPP16RemoteStopTransactionProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16RemotestoptransactionPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16RemoteStopTransactionProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16RemotestoptransactionPost",
        "oCPP16RemoteStopTransactionProcessorBody",
        oCPP16RemoteStopTransactionProcessorBody
      );
      const localVarPath = `/context/{id}/v16/remotestoptransaction`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16RemoteStopTransactionProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ReserveNowProcessorBody} oCPP16ReserveNowProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ReservenowPost: async (
      id: number,
      oCPP16ReserveNowProcessorBody: OCPP16ReserveNowProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV16ReservenowPost", "id", id);
      // verify required parameter 'oCPP16ReserveNowProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ReservenowPost",
        "oCPP16ReserveNowProcessorBody",
        oCPP16ReserveNowProcessorBody
      );
      const localVarPath = `/context/{id}/v16/reservenow`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16ReserveNowProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ResetProcessorBody} oCPP16ResetProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ResetPost: async (
      id: number,
      oCPP16ResetProcessorBody: OCPP16ResetProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV16ResetPost", "id", id);
      // verify required parameter 'oCPP16ResetProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ResetPost",
        "oCPP16ResetProcessorBody",
        oCPP16ResetProcessorBody
      );
      const localVarPath = `/context/{id}/v16/reset`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16ResetProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendLocalListProcessorBody} oCPP16SendLocalListProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16SendlocallistPost: async (
      id: number,
      oCPP16SendLocalListProcessorBody: OCPP16SendLocalListProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV16SendlocallistPost", "id", id);
      // verify required parameter 'oCPP16SendLocalListProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16SendlocallistPost",
        "oCPP16SendLocalListProcessorBody",
        oCPP16SendLocalListProcessorBody
      );
      const localVarPath = `/context/{id}/v16/sendlocallist`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SendLocalListProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SetChargingProfileProcessorBody} oCPP16SetChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16SetchargingprofilePost: async (
      id: number,
      oCPP16SetChargingProfileProcessorBody: OCPP16SetChargingProfileProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16SetchargingprofilePost",
        "id",
        id
      );
      // verify required parameter 'oCPP16SetChargingProfileProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16SetchargingprofilePost",
        "oCPP16SetChargingProfileProcessorBody",
        oCPP16SetChargingProfileProcessorBody
      );
      const localVarPath = `/context/{id}/v16/setchargingprofile`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SetChargingProfileProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16TriggerMessageProcessorBody} oCPP16TriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16TriggermessagePost: async (
      id: number,
      oCPP16TriggerMessageProcessorBody: OCPP16TriggerMessageProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV16TriggermessagePost", "id", id);
      // verify required parameter 'oCPP16TriggerMessageProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16TriggermessagePost",
        "oCPP16TriggerMessageProcessorBody",
        oCPP16TriggerMessageProcessorBody
      );
      const localVarPath = `/context/{id}/v16/triggermessage`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16TriggerMessageProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16UnlockConnectorProcessorBody} oCPP16UnlockConnectorProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16UnlockconnectorPost: async (
      id: number,
      oCPP16UnlockConnectorProcessorBody: OCPP16UnlockConnectorProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16UnlockconnectorPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16UnlockConnectorProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16UnlockconnectorPost",
        "oCPP16UnlockConnectorProcessorBody",
        oCPP16UnlockConnectorProcessorBody
      );
      const localVarPath = `/context/{id}/v16/unlockconnector`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16UnlockConnectorProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OCPPv16Api - functional programming interface
 * @export
 */
export const OCPPv16ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OCPPv16ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16CancelReservationProcessorBody} oCPP16CancelReservationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16CancelreservationPost(
      id: number,
      oCPP16CancelReservationProcessorBody: OCPP16CancelReservationProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16CancelreservationPost(
          id,
          oCPP16CancelReservationProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16CancelreservationPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeAvailabilityProcessorBody} oCPP16ChangeAvailabilityProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16ChangeavailabilityPost(
      id: number,
      oCPP16ChangeAvailabilityProcessorBody: OCPP16ChangeAvailabilityProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16ChangeavailabilityPost(
          id,
          oCPP16ChangeAvailabilityProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16ChangeavailabilityPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeConfigurationProcessorBody} oCPP16ChangeConfigurationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16ChangeconfigurationPost(
      id: number,
      oCPP16ChangeConfigurationProcessorBody: OCPP16ChangeConfigurationProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16ChangeconfigurationPost(
          id,
          oCPP16ChangeConfigurationProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16ChangeconfigurationPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16ClearcachePost(
      id: number,
      body: object,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16ClearcachePost(
          id,
          body,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16ClearcachePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ClearChargingProfileProcessorBody} oCPP16ClearChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16ClearchargingprofilePost(
      id: number,
      oCPP16ClearChargingProfileProcessorBody: OCPP16ClearChargingProfileProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16ClearchargingprofilePost(
          id,
          oCPP16ClearChargingProfileProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16ClearchargingprofilePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferProcessorBody} oCPP16SendDataTransferProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16DatatransferPost(
      id: number,
      oCPP16SendDataTransferProcessorBody: OCPP16SendDataTransferProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16DatatransferPost(
          id,
          oCPP16SendDataTransferProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16DatatransferPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ExtendedTriggerMessageProcessorBody} oCPP16ExtendedTriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16ExtendedtriggermessagePost(
      id: number,
      oCPP16ExtendedTriggerMessageProcessorBody: OCPP16ExtendedTriggerMessageProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16ExtendedtriggermessagePost(
          id,
          oCPP16ExtendedTriggerMessageProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16ExtendedtriggermessagePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetCompositeScheduleProcessorBody} oCPP16GetCompositeScheduleProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16GetcompositeschedulePost(
      id: number,
      oCPP16GetCompositeScheduleProcessorBody: OCPP16GetCompositeScheduleProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16GetcompositeschedulePost(
          id,
          oCPP16GetCompositeScheduleProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16GetcompositeschedulePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetConfigurationProcessorBody} oCPP16GetConfigurationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16GetconfigurationPost(
      id: number,
      oCPP16GetConfigurationProcessorBody: OCPP16GetConfigurationProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16GetconfigurationPost(
          id,
          oCPP16GetConfigurationProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16GetconfigurationPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetDiagnosticsProcessorBody} oCPP16GetDiagnosticsProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16GetdiagnosticsPost(
      id: number,
      oCPP16GetDiagnosticsProcessorBody: OCPP16GetDiagnosticsProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16GetdiagnosticsPost(
          id,
          oCPP16GetDiagnosticsProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16GetdiagnosticsPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16GetlocallistversionPost(
      id: number,
      body: object,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16GetlocallistversionPost(
          id,
          body,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16GetlocallistversionPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16HeartbeatPost(
      id: number,
      body: object,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16HeartbeatPost(
          id,
          body,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16HeartbeatPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16RemoteStartTransactionProcessorBody} oCPP16RemoteStartTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16RemotestarttransactionPost(
      id: number,
      oCPP16RemoteStartTransactionProcessorBody: OCPP16RemoteStartTransactionProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16RemotestarttransactionPost(
          id,
          oCPP16RemoteStartTransactionProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16RemotestarttransactionPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16RemoteStopTransactionProcessorBody} oCPP16RemoteStopTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16RemotestoptransactionPost(
      id: number,
      oCPP16RemoteStopTransactionProcessorBody: OCPP16RemoteStopTransactionProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16RemotestoptransactionPost(
          id,
          oCPP16RemoteStopTransactionProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16RemotestoptransactionPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ReserveNowProcessorBody} oCPP16ReserveNowProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16ReservenowPost(
      id: number,
      oCPP16ReserveNowProcessorBody: OCPP16ReserveNowProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16ReservenowPost(
          id,
          oCPP16ReserveNowProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16ReservenowPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ResetProcessorBody} oCPP16ResetProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16ResetPost(
      id: number,
      oCPP16ResetProcessorBody: OCPP16ResetProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16ResetPost(
          id,
          oCPP16ResetProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OCPPv16Api.routeHandlerContextIdV16ResetPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendLocalListProcessorBody} oCPP16SendLocalListProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16SendlocallistPost(
      id: number,
      oCPP16SendLocalListProcessorBody: OCPP16SendLocalListProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16SendlocallistPost(
          id,
          oCPP16SendLocalListProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16SendlocallistPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SetChargingProfileProcessorBody} oCPP16SetChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16SetchargingprofilePost(
      id: number,
      oCPP16SetChargingProfileProcessorBody: OCPP16SetChargingProfileProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16SetchargingprofilePost(
          id,
          oCPP16SetChargingProfileProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16SetchargingprofilePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16TriggerMessageProcessorBody} oCPP16TriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16TriggermessagePost(
      id: number,
      oCPP16TriggerMessageProcessorBody: OCPP16TriggerMessageProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16TriggermessagePost(
          id,
          oCPP16TriggerMessageProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16TriggermessagePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16UnlockConnectorProcessorBody} oCPP16UnlockConnectorProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16UnlockconnectorPost(
      id: number,
      oCPP16UnlockConnectorProcessorBody: OCPP16UnlockConnectorProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16UnlockconnectorPost(
          id,
          oCPP16UnlockConnectorProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16Api.routeHandlerContextIdV16UnlockconnectorPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OCPPv16Api - factory interface
 * @export
 */
export const OCPPv16ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OCPPv16ApiFp(configuration);
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16CancelReservationProcessorBody} oCPP16CancelReservationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16CancelreservationPost(
      id: number,
      oCPP16CancelReservationProcessorBody: OCPP16CancelReservationProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16CancelreservationPost(
          id,
          oCPP16CancelReservationProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeAvailabilityProcessorBody} oCPP16ChangeAvailabilityProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ChangeavailabilityPost(
      id: number,
      oCPP16ChangeAvailabilityProcessorBody: OCPP16ChangeAvailabilityProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16ChangeavailabilityPost(
          id,
          oCPP16ChangeAvailabilityProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeConfigurationProcessorBody} oCPP16ChangeConfigurationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ChangeconfigurationPost(
      id: number,
      oCPP16ChangeConfigurationProcessorBody: OCPP16ChangeConfigurationProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16ChangeconfigurationPost(
          id,
          oCPP16ChangeConfigurationProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ClearcachePost(
      id: number,
      body: object,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16ClearcachePost(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ClearChargingProfileProcessorBody} oCPP16ClearChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ClearchargingprofilePost(
      id: number,
      oCPP16ClearChargingProfileProcessorBody: OCPP16ClearChargingProfileProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16ClearchargingprofilePost(
          id,
          oCPP16ClearChargingProfileProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferProcessorBody} oCPP16SendDataTransferProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransferPost(
      id: number,
      oCPP16SendDataTransferProcessorBody: OCPP16SendDataTransferProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16DatatransferPost(
          id,
          oCPP16SendDataTransferProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ExtendedTriggerMessageProcessorBody} oCPP16ExtendedTriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ExtendedtriggermessagePost(
      id: number,
      oCPP16ExtendedTriggerMessageProcessorBody: OCPP16ExtendedTriggerMessageProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16ExtendedtriggermessagePost(
          id,
          oCPP16ExtendedTriggerMessageProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetCompositeScheduleProcessorBody} oCPP16GetCompositeScheduleProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetcompositeschedulePost(
      id: number,
      oCPP16GetCompositeScheduleProcessorBody: OCPP16GetCompositeScheduleProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16GetcompositeschedulePost(
          id,
          oCPP16GetCompositeScheduleProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetConfigurationProcessorBody} oCPP16GetConfigurationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetconfigurationPost(
      id: number,
      oCPP16GetConfigurationProcessorBody: OCPP16GetConfigurationProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16GetconfigurationPost(
          id,
          oCPP16GetConfigurationProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetDiagnosticsProcessorBody} oCPP16GetDiagnosticsProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetdiagnosticsPost(
      id: number,
      oCPP16GetDiagnosticsProcessorBody: OCPP16GetDiagnosticsProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16GetdiagnosticsPost(
          id,
          oCPP16GetDiagnosticsProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetlocallistversionPost(
      id: number,
      body: object,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16GetlocallistversionPost(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16HeartbeatPost(
      id: number,
      body: object,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16HeartbeatPost(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16RemoteStartTransactionProcessorBody} oCPP16RemoteStartTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16RemotestarttransactionPost(
      id: number,
      oCPP16RemoteStartTransactionProcessorBody: OCPP16RemoteStartTransactionProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16RemotestarttransactionPost(
          id,
          oCPP16RemoteStartTransactionProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16RemoteStopTransactionProcessorBody} oCPP16RemoteStopTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16RemotestoptransactionPost(
      id: number,
      oCPP16RemoteStopTransactionProcessorBody: OCPP16RemoteStopTransactionProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16RemotestoptransactionPost(
          id,
          oCPP16RemoteStopTransactionProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ReserveNowProcessorBody} oCPP16ReserveNowProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ReservenowPost(
      id: number,
      oCPP16ReserveNowProcessorBody: OCPP16ReserveNowProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16ReservenowPost(
          id,
          oCPP16ReserveNowProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ResetProcessorBody} oCPP16ResetProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ResetPost(
      id: number,
      oCPP16ResetProcessorBody: OCPP16ResetProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16ResetPost(
          id,
          oCPP16ResetProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendLocalListProcessorBody} oCPP16SendLocalListProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16SendlocallistPost(
      id: number,
      oCPP16SendLocalListProcessorBody: OCPP16SendLocalListProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16SendlocallistPost(
          id,
          oCPP16SendLocalListProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SetChargingProfileProcessorBody} oCPP16SetChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16SetchargingprofilePost(
      id: number,
      oCPP16SetChargingProfileProcessorBody: OCPP16SetChargingProfileProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16SetchargingprofilePost(
          id,
          oCPP16SetChargingProfileProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16TriggerMessageProcessorBody} oCPP16TriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16TriggermessagePost(
      id: number,
      oCPP16TriggerMessageProcessorBody: OCPP16TriggerMessageProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16TriggermessagePost(
          id,
          oCPP16TriggerMessageProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16UnlockConnectorProcessorBody} oCPP16UnlockConnectorProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16UnlockconnectorPost(
      id: number,
      oCPP16UnlockConnectorProcessorBody: OCPP16UnlockConnectorProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16UnlockconnectorPost(
          id,
          oCPP16UnlockConnectorProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OCPPv16Api - object-oriented interface
 * @export
 * @class OCPPv16Api
 * @extends {BaseAPI}
 */
export class OCPPv16Api extends BaseAPI {
  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16CancelReservationProcessorBody} oCPP16CancelReservationProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16CancelreservationPost(
    id: number,
    oCPP16CancelReservationProcessorBody: OCPP16CancelReservationProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16CancelreservationPost(
        id,
        oCPP16CancelReservationProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16ChangeAvailabilityProcessorBody} oCPP16ChangeAvailabilityProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16ChangeavailabilityPost(
    id: number,
    oCPP16ChangeAvailabilityProcessorBody: OCPP16ChangeAvailabilityProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16ChangeavailabilityPost(
        id,
        oCPP16ChangeAvailabilityProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16ChangeConfigurationProcessorBody} oCPP16ChangeConfigurationProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16ChangeconfigurationPost(
    id: number,
    oCPP16ChangeConfigurationProcessorBody: OCPP16ChangeConfigurationProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16ChangeconfigurationPost(
        id,
        oCPP16ChangeConfigurationProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16ClearcachePost(
    id: number,
    body: object,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16ClearcachePost(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16ClearChargingProfileProcessorBody} oCPP16ClearChargingProfileProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16ClearchargingprofilePost(
    id: number,
    oCPP16ClearChargingProfileProcessorBody: OCPP16ClearChargingProfileProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16ClearchargingprofilePost(
        id,
        oCPP16ClearChargingProfileProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SendDataTransferProcessorBody} oCPP16SendDataTransferProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16DatatransferPost(
    id: number,
    oCPP16SendDataTransferProcessorBody: OCPP16SendDataTransferProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16DatatransferPost(
        id,
        oCPP16SendDataTransferProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16ExtendedTriggerMessageProcessorBody} oCPP16ExtendedTriggerMessageProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16ExtendedtriggermessagePost(
    id: number,
    oCPP16ExtendedTriggerMessageProcessorBody: OCPP16ExtendedTriggerMessageProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16ExtendedtriggermessagePost(
        id,
        oCPP16ExtendedTriggerMessageProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16GetCompositeScheduleProcessorBody} oCPP16GetCompositeScheduleProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16GetcompositeschedulePost(
    id: number,
    oCPP16GetCompositeScheduleProcessorBody: OCPP16GetCompositeScheduleProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16GetcompositeschedulePost(
        id,
        oCPP16GetCompositeScheduleProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16GetConfigurationProcessorBody} oCPP16GetConfigurationProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16GetconfigurationPost(
    id: number,
    oCPP16GetConfigurationProcessorBody: OCPP16GetConfigurationProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16GetconfigurationPost(
        id,
        oCPP16GetConfigurationProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16GetDiagnosticsProcessorBody} oCPP16GetDiagnosticsProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16GetdiagnosticsPost(
    id: number,
    oCPP16GetDiagnosticsProcessorBody: OCPP16GetDiagnosticsProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16GetdiagnosticsPost(
        id,
        oCPP16GetDiagnosticsProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16GetlocallistversionPost(
    id: number,
    body: object,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16GetlocallistversionPost(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16HeartbeatPost(
    id: number,
    body: object,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16HeartbeatPost(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16RemoteStartTransactionProcessorBody} oCPP16RemoteStartTransactionProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16RemotestarttransactionPost(
    id: number,
    oCPP16RemoteStartTransactionProcessorBody: OCPP16RemoteStartTransactionProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16RemotestarttransactionPost(
        id,
        oCPP16RemoteStartTransactionProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16RemoteStopTransactionProcessorBody} oCPP16RemoteStopTransactionProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16RemotestoptransactionPost(
    id: number,
    oCPP16RemoteStopTransactionProcessorBody: OCPP16RemoteStopTransactionProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16RemotestoptransactionPost(
        id,
        oCPP16RemoteStopTransactionProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16ReserveNowProcessorBody} oCPP16ReserveNowProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16ReservenowPost(
    id: number,
    oCPP16ReserveNowProcessorBody: OCPP16ReserveNowProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16ReservenowPost(
        id,
        oCPP16ReserveNowProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16ResetProcessorBody} oCPP16ResetProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16ResetPost(
    id: number,
    oCPP16ResetProcessorBody: OCPP16ResetProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16ResetPost(id, oCPP16ResetProcessorBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SendLocalListProcessorBody} oCPP16SendLocalListProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16SendlocallistPost(
    id: number,
    oCPP16SendLocalListProcessorBody: OCPP16SendLocalListProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16SendlocallistPost(
        id,
        oCPP16SendLocalListProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SetChargingProfileProcessorBody} oCPP16SetChargingProfileProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16SetchargingprofilePost(
    id: number,
    oCPP16SetChargingProfileProcessorBody: OCPP16SetChargingProfileProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16SetchargingprofilePost(
        id,
        oCPP16SetChargingProfileProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16TriggerMessageProcessorBody} oCPP16TriggerMessageProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16TriggermessagePost(
    id: number,
    oCPP16TriggerMessageProcessorBody: OCPP16TriggerMessageProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16TriggermessagePost(
        id,
        oCPP16TriggerMessageProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16UnlockConnectorProcessorBody} oCPP16UnlockConnectorProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16Api
   */
  public routeHandlerContextIdV16UnlockconnectorPost(
    id: number,
    oCPP16UnlockConnectorProcessorBody: OCPP16UnlockConnectorProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ApiFp(this.configuration)
      .routeHandlerContextIdV16UnlockconnectorPost(
        id,
        oCPP16UnlockConnectorProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OCPPv16ISO15118Api - axios parameter creator
 * @export
 */
export const OCPPv16ISO15118ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferCertificateInstallationProcessorBody} oCPP16SendDataTransferCertificateInstallationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfercertificateinstallationPost: async (
      id: number,
      oCPP16SendDataTransferCertificateInstallationProcessorBody: OCPP16SendDataTransferCertificateInstallationProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfercertificateinstallationPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16SendDataTransferCertificateInstallationProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfercertificateinstallationPost",
        "oCPP16SendDataTransferCertificateInstallationProcessorBody",
        oCPP16SendDataTransferCertificateInstallationProcessorBody
      );
      const localVarPath =
        `/context/{id}/v16/datatransfercertificateinstallation`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SendDataTransferCertificateInstallationProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferCertificateSignedProcessorBody} oCPP16SendDataTransferCertificateSignedProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfercertificatesignedPost: async (
      id: number,
      oCPP16SendDataTransferCertificateSignedProcessorBody: OCPP16SendDataTransferCertificateSignedProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfercertificatesignedPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16SendDataTransferCertificateSignedProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfercertificatesignedPost",
        "oCPP16SendDataTransferCertificateSignedProcessorBody",
        oCPP16SendDataTransferCertificateSignedProcessorBody
      );
      const localVarPath =
        `/context/{id}/v16/datatransfercertificatesigned`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SendDataTransferCertificateSignedProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferGetCertificateStatusProcessorBody} oCPP16SendDataTransferGetCertificateStatusProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfergetcertificatestatusPost: async (
      id: number,
      oCPP16SendDataTransferGetCertificateStatusProcessorBody: OCPP16SendDataTransferGetCertificateStatusProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfergetcertificatestatusPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16SendDataTransferGetCertificateStatusProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfergetcertificatestatusPost",
        "oCPP16SendDataTransferGetCertificateStatusProcessorBody",
        oCPP16SendDataTransferGetCertificateStatusProcessorBody
      );
      const localVarPath =
        `/context/{id}/v16/datatransfergetcertificatestatus`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SendDataTransferGetCertificateStatusProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody} oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost: async (
      id: number,
      oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody: OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost",
        "oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody",
        oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
      );
      const localVarPath =
        `/context/{id}/v16/datatransfergetinstalledcertificateids`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferTriggerMessageProcessorBody} oCPP16SendDataTransferTriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfertriggermessagePost: async (
      id: number,
      oCPP16SendDataTransferTriggerMessageProcessorBody: OCPP16SendDataTransferTriggerMessageProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfertriggermessagePost",
        "id",
        id
      );
      // verify required parameter 'oCPP16SendDataTransferTriggerMessageProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16DatatransfertriggermessagePost",
        "oCPP16SendDataTransferTriggerMessageProcessorBody",
        oCPP16SendDataTransferTriggerMessageProcessorBody
      );
      const localVarPath =
        `/context/{id}/v16/datatransfertriggermessage`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SendDataTransferTriggerMessageProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferV2GCertificateProcessorBody} oCPP16SendDataTransferV2GCertificateProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16Datatransferv2gcertificatePost: async (
      id: number,
      oCPP16SendDataTransferV2GCertificateProcessorBody: OCPP16SendDataTransferV2GCertificateProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16Datatransferv2gcertificatePost",
        "id",
        id
      );
      // verify required parameter 'oCPP16SendDataTransferV2GCertificateProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16Datatransferv2gcertificatePost",
        "oCPP16SendDataTransferV2GCertificateProcessorBody",
        oCPP16SendDataTransferV2GCertificateProcessorBody
      );
      const localVarPath =
        `/context/{id}/v16/datatransferv2gcertificate`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16SendDataTransferV2GCertificateProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OCPPv16ISO15118Api - functional programming interface
 * @export
 */
export const OCPPv16ISO15118ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    OCPPv16ISO15118ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferCertificateInstallationProcessorBody} oCPP16SendDataTransferCertificateInstallationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16DatatransfercertificateinstallationPost(
      id: number,
      oCPP16SendDataTransferCertificateInstallationProcessorBody: OCPP16SendDataTransferCertificateInstallationProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16DatatransfercertificateinstallationPost(
          id,
          oCPP16SendDataTransferCertificateInstallationProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16ISO15118Api.routeHandlerContextIdV16DatatransfercertificateinstallationPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferCertificateSignedProcessorBody} oCPP16SendDataTransferCertificateSignedProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16DatatransfercertificatesignedPost(
      id: number,
      oCPP16SendDataTransferCertificateSignedProcessorBody: OCPP16SendDataTransferCertificateSignedProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16DatatransfercertificatesignedPost(
          id,
          oCPP16SendDataTransferCertificateSignedProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16ISO15118Api.routeHandlerContextIdV16DatatransfercertificatesignedPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferGetCertificateStatusProcessorBody} oCPP16SendDataTransferGetCertificateStatusProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16DatatransfergetcertificatestatusPost(
      id: number,
      oCPP16SendDataTransferGetCertificateStatusProcessorBody: OCPP16SendDataTransferGetCertificateStatusProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16DatatransfergetcertificatestatusPost(
          id,
          oCPP16SendDataTransferGetCertificateStatusProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16ISO15118Api.routeHandlerContextIdV16DatatransfergetcertificatestatusPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody} oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost(
      id: number,
      oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody: OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost(
          id,
          oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16ISO15118Api.routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferTriggerMessageProcessorBody} oCPP16SendDataTransferTriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16DatatransfertriggermessagePost(
      id: number,
      oCPP16SendDataTransferTriggerMessageProcessorBody: OCPP16SendDataTransferTriggerMessageProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16DatatransfertriggermessagePost(
          id,
          oCPP16SendDataTransferTriggerMessageProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16ISO15118Api.routeHandlerContextIdV16DatatransfertriggermessagePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferV2GCertificateProcessorBody} oCPP16SendDataTransferV2GCertificateProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16Datatransferv2gcertificatePost(
      id: number,
      oCPP16SendDataTransferV2GCertificateProcessorBody: OCPP16SendDataTransferV2GCertificateProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16Datatransferv2gcertificatePost(
          id,
          oCPP16SendDataTransferV2GCertificateProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16ISO15118Api.routeHandlerContextIdV16Datatransferv2gcertificatePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OCPPv16ISO15118Api - factory interface
 * @export
 */
export const OCPPv16ISO15118ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OCPPv16ISO15118ApiFp(configuration);
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferCertificateInstallationProcessorBody} oCPP16SendDataTransferCertificateInstallationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfercertificateinstallationPost(
      id: number,
      oCPP16SendDataTransferCertificateInstallationProcessorBody: OCPP16SendDataTransferCertificateInstallationProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16DatatransfercertificateinstallationPost(
          id,
          oCPP16SendDataTransferCertificateInstallationProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferCertificateSignedProcessorBody} oCPP16SendDataTransferCertificateSignedProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfercertificatesignedPost(
      id: number,
      oCPP16SendDataTransferCertificateSignedProcessorBody: OCPP16SendDataTransferCertificateSignedProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16DatatransfercertificatesignedPost(
          id,
          oCPP16SendDataTransferCertificateSignedProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferGetCertificateStatusProcessorBody} oCPP16SendDataTransferGetCertificateStatusProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfergetcertificatestatusPost(
      id: number,
      oCPP16SendDataTransferGetCertificateStatusProcessorBody: OCPP16SendDataTransferGetCertificateStatusProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16DatatransfergetcertificatestatusPost(
          id,
          oCPP16SendDataTransferGetCertificateStatusProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody} oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost(
      id: number,
      oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody: OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost(
          id,
          oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferTriggerMessageProcessorBody} oCPP16SendDataTransferTriggerMessageProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16DatatransfertriggermessagePost(
      id: number,
      oCPP16SendDataTransferTriggerMessageProcessorBody: OCPP16SendDataTransferTriggerMessageProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16DatatransfertriggermessagePost(
          id,
          oCPP16SendDataTransferTriggerMessageProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16SendDataTransferV2GCertificateProcessorBody} oCPP16SendDataTransferV2GCertificateProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16Datatransferv2gcertificatePost(
      id: number,
      oCPP16SendDataTransferV2GCertificateProcessorBody: OCPP16SendDataTransferV2GCertificateProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16Datatransferv2gcertificatePost(
          id,
          oCPP16SendDataTransferV2GCertificateProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OCPPv16ISO15118Api - object-oriented interface
 * @export
 * @class OCPPv16ISO15118Api
 * @extends {BaseAPI}
 */
export class OCPPv16ISO15118Api extends BaseAPI {
  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SendDataTransferCertificateInstallationProcessorBody} oCPP16SendDataTransferCertificateInstallationProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16ISO15118Api
   */
  public routeHandlerContextIdV16DatatransfercertificateinstallationPost(
    id: number,
    oCPP16SendDataTransferCertificateInstallationProcessorBody: OCPP16SendDataTransferCertificateInstallationProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ISO15118ApiFp(this.configuration)
      .routeHandlerContextIdV16DatatransfercertificateinstallationPost(
        id,
        oCPP16SendDataTransferCertificateInstallationProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SendDataTransferCertificateSignedProcessorBody} oCPP16SendDataTransferCertificateSignedProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16ISO15118Api
   */
  public routeHandlerContextIdV16DatatransfercertificatesignedPost(
    id: number,
    oCPP16SendDataTransferCertificateSignedProcessorBody: OCPP16SendDataTransferCertificateSignedProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ISO15118ApiFp(this.configuration)
      .routeHandlerContextIdV16DatatransfercertificatesignedPost(
        id,
        oCPP16SendDataTransferCertificateSignedProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SendDataTransferGetCertificateStatusProcessorBody} oCPP16SendDataTransferGetCertificateStatusProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16ISO15118Api
   */
  public routeHandlerContextIdV16DatatransfergetcertificatestatusPost(
    id: number,
    oCPP16SendDataTransferGetCertificateStatusProcessorBody: OCPP16SendDataTransferGetCertificateStatusProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ISO15118ApiFp(this.configuration)
      .routeHandlerContextIdV16DatatransfergetcertificatestatusPost(
        id,
        oCPP16SendDataTransferGetCertificateStatusProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody} oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16ISO15118Api
   */
  public routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost(
    id: number,
    oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody: OCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ISO15118ApiFp(this.configuration)
      .routeHandlerContextIdV16DatatransfergetinstalledcertificateidsPost(
        id,
        oCPP16SendDataTransferGetInstalledCertificateIdsProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SendDataTransferTriggerMessageProcessorBody} oCPP16SendDataTransferTriggerMessageProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16ISO15118Api
   */
  public routeHandlerContextIdV16DatatransfertriggermessagePost(
    id: number,
    oCPP16SendDataTransferTriggerMessageProcessorBody: OCPP16SendDataTransferTriggerMessageProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ISO15118ApiFp(this.configuration)
      .routeHandlerContextIdV16DatatransfertriggermessagePost(
        id,
        oCPP16SendDataTransferTriggerMessageProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16SendDataTransferV2GCertificateProcessorBody} oCPP16SendDataTransferV2GCertificateProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16ISO15118Api
   */
  public routeHandlerContextIdV16Datatransferv2gcertificatePost(
    id: number,
    oCPP16SendDataTransferV2GCertificateProcessorBody: OCPP16SendDataTransferV2GCertificateProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16ISO15118ApiFp(this.configuration)
      .routeHandlerContextIdV16Datatransferv2gcertificatePost(
        id,
        oCPP16SendDataTransferV2GCertificateProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OCPPv16TLSAuthenticationApi - axios parameter creator
 * @export
 */
export const OCPPv16TLSAuthenticationApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeConfigurationAuthenticationProcessorBody} oCPP16ChangeConfigurationAuthenticationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ChangeconfigurationauthenticationPost: async (
      id: number,
      oCPP16ChangeConfigurationAuthenticationProcessorBody: OCPP16ChangeConfigurationAuthenticationProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ChangeconfigurationauthenticationPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16ChangeConfigurationAuthenticationProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16ChangeconfigurationauthenticationPost",
        "oCPP16ChangeConfigurationAuthenticationProcessorBody",
        oCPP16ChangeConfigurationAuthenticationProcessorBody
      );
      const localVarPath =
        `/context/{id}/v16/changeconfigurationauthentication`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16ChangeConfigurationAuthenticationProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetConfigurationAuthenticationProcessorBody} oCPP16GetConfigurationAuthenticationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetconfigurationauthenticationPost: async (
      id: number,
      oCPP16GetConfigurationAuthenticationProcessorBody: OCPP16GetConfigurationAuthenticationProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetconfigurationauthenticationPost",
        "id",
        id
      );
      // verify required parameter 'oCPP16GetConfigurationAuthenticationProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV16GetconfigurationauthenticationPost",
        "oCPP16GetConfigurationAuthenticationProcessorBody",
        oCPP16GetConfigurationAuthenticationProcessorBody
      );
      const localVarPath =
        `/context/{id}/v16/getconfigurationauthentication`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP16GetConfigurationAuthenticationProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OCPPv16TLSAuthenticationApi - functional programming interface
 * @export
 */
export const OCPPv16TLSAuthenticationApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    OCPPv16TLSAuthenticationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeConfigurationAuthenticationProcessorBody} oCPP16ChangeConfigurationAuthenticationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16ChangeconfigurationauthenticationPost(
      id: number,
      oCPP16ChangeConfigurationAuthenticationProcessorBody: OCPP16ChangeConfigurationAuthenticationProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16ChangeconfigurationauthenticationPost(
          id,
          oCPP16ChangeConfigurationAuthenticationProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16TLSAuthenticationApi.routeHandlerContextIdV16ChangeconfigurationauthenticationPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetConfigurationAuthenticationProcessorBody} oCPP16GetConfigurationAuthenticationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV16GetconfigurationauthenticationPost(
      id: number,
      oCPP16GetConfigurationAuthenticationProcessorBody: OCPP16GetConfigurationAuthenticationProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV16GetconfigurationauthenticationPost(
          id,
          oCPP16GetConfigurationAuthenticationProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv16TLSAuthenticationApi.routeHandlerContextIdV16GetconfigurationauthenticationPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OCPPv16TLSAuthenticationApi - factory interface
 * @export
 */
export const OCPPv16TLSAuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OCPPv16TLSAuthenticationApiFp(configuration);
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16ChangeConfigurationAuthenticationProcessorBody} oCPP16ChangeConfigurationAuthenticationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16ChangeconfigurationauthenticationPost(
      id: number,
      oCPP16ChangeConfigurationAuthenticationProcessorBody: OCPP16ChangeConfigurationAuthenticationProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16ChangeconfigurationauthenticationPost(
          id,
          oCPP16ChangeConfigurationAuthenticationProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP16GetConfigurationAuthenticationProcessorBody} oCPP16GetConfigurationAuthenticationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV16GetconfigurationauthenticationPost(
      id: number,
      oCPP16GetConfigurationAuthenticationProcessorBody: OCPP16GetConfigurationAuthenticationProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV16GetconfigurationauthenticationPost(
          id,
          oCPP16GetConfigurationAuthenticationProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OCPPv16TLSAuthenticationApi - object-oriented interface
 * @export
 * @class OCPPv16TLSAuthenticationApi
 * @extends {BaseAPI}
 */
export class OCPPv16TLSAuthenticationApi extends BaseAPI {
  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16ChangeConfigurationAuthenticationProcessorBody} oCPP16ChangeConfigurationAuthenticationProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16TLSAuthenticationApi
   */
  public routeHandlerContextIdV16ChangeconfigurationauthenticationPost(
    id: number,
    oCPP16ChangeConfigurationAuthenticationProcessorBody: OCPP16ChangeConfigurationAuthenticationProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16TLSAuthenticationApiFp(this.configuration)
      .routeHandlerContextIdV16ChangeconfigurationauthenticationPost(
        id,
        oCPP16ChangeConfigurationAuthenticationProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP16GetConfigurationAuthenticationProcessorBody} oCPP16GetConfigurationAuthenticationProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv16TLSAuthenticationApi
   */
  public routeHandlerContextIdV16GetconfigurationauthenticationPost(
    id: number,
    oCPP16GetConfigurationAuthenticationProcessorBody: OCPP16GetConfigurationAuthenticationProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv16TLSAuthenticationApiFp(this.configuration)
      .routeHandlerContextIdV16GetconfigurationauthenticationPost(
        id,
        oCPP16GetConfigurationAuthenticationProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OCPPv201Api - axios parameter creator
 * @export
 */
export const OCPPv201ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20CancelReservationProcessorBody} oCPP20CancelReservationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20CancelreservationPost: async (
      id: number,
      oCPP20CancelReservationProcessorBody: OCPP20CancelReservationProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20CancelreservationPost",
        "id",
        id
      );
      // verify required parameter 'oCPP20CancelReservationProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20CancelreservationPost",
        "oCPP20CancelReservationProcessorBody",
        oCPP20CancelReservationProcessorBody
      );
      const localVarPath = `/context/{id}/v20/cancelreservation`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20CancelReservationProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ChangeAvailabilityProcessorBody} oCPP20ChangeAvailabilityProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ChangeavailabilityPost: async (
      id: number,
      oCPP20ChangeAvailabilityProcessorBody: OCPP20ChangeAvailabilityProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20ChangeavailabilityPost",
        "id",
        id
      );
      // verify required parameter 'oCPP20ChangeAvailabilityProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20ChangeavailabilityPost",
        "oCPP20ChangeAvailabilityProcessorBody",
        oCPP20ChangeAvailabilityProcessorBody
      );
      const localVarPath = `/context/{id}/v20/changeavailability`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20ChangeAvailabilityProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ClearcachePost: async (
      id: number,
      body: object,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20ClearcachePost", "id", id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("routeHandlerContextIdV20ClearcachePost", "body", body);
      const localVarPath = `/context/{id}/v20/clearcache`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ClearChargingProfileProcessorBody} oCPP20ClearChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ClearchargingprofilePost: async (
      id: number,
      oCPP20ClearChargingProfileProcessorBody: OCPP20ClearChargingProfileProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20ClearchargingprofilePost",
        "id",
        id
      );
      // verify required parameter 'oCPP20ClearChargingProfileProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20ClearchargingprofilePost",
        "oCPP20ClearChargingProfileProcessorBody",
        oCPP20ClearChargingProfileProcessorBody
      );
      const localVarPath = `/context/{id}/v20/clearchargingprofile`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20ClearChargingProfileProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SendDataTransferProcessorBody} oCPP20SendDataTransferProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20DatatransferPost: async (
      id: number,
      oCPP20SendDataTransferProcessorBody: OCPP20SendDataTransferProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20DatatransferPost", "id", id);
      // verify required parameter 'oCPP20SendDataTransferProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20DatatransferPost",
        "oCPP20SendDataTransferProcessorBody",
        oCPP20SendDataTransferProcessorBody
      );
      const localVarPath = `/context/{id}/v20/datatransfer`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20SendDataTransferProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetBaseReportProcessorBody} oCPP20GetBaseReportProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20GetbasereportPost: async (
      id: number,
      oCPP20GetBaseReportProcessorBody: OCPP20GetBaseReportProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20GetbasereportPost", "id", id);
      // verify required parameter 'oCPP20GetBaseReportProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20GetbasereportPost",
        "oCPP20GetBaseReportProcessorBody",
        oCPP20GetBaseReportProcessorBody
      );
      const localVarPath = `/context/{id}/v20/getbasereport`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20GetBaseReportProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetLocalListVersionProcessorBody} oCPP20GetLocalListVersionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20GetlocallistversionPost: async (
      id: number,
      oCPP20GetLocalListVersionProcessorBody: OCPP20GetLocalListVersionProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20GetlocallistversionPost",
        "id",
        id
      );
      // verify required parameter 'oCPP20GetLocalListVersionProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20GetlocallistversionPost",
        "oCPP20GetLocalListVersionProcessorBody",
        oCPP20GetLocalListVersionProcessorBody
      );
      const localVarPath = `/context/{id}/v20/getlocallistversion`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20GetLocalListVersionProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetReportProcessorBody} oCPP20GetReportProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20GetreportPost: async (
      id: number,
      oCPP20GetReportProcessorBody: OCPP20GetReportProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20GetreportPost", "id", id);
      // verify required parameter 'oCPP20GetReportProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20GetreportPost",
        "oCPP20GetReportProcessorBody",
        oCPP20GetReportProcessorBody
      );
      const localVarPath = `/context/{id}/v20/getreport`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20GetReportProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetVariablesProcessorBody} oCPP20GetVariablesProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20GetvariablesPost: async (
      id: number,
      oCPP20GetVariablesProcessorBody: OCPP20GetVariablesProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20GetvariablesPost", "id", id);
      // verify required parameter 'oCPP20GetVariablesProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20GetvariablesPost",
        "oCPP20GetVariablesProcessorBody",
        oCPP20GetVariablesProcessorBody
      );
      const localVarPath = `/context/{id}/v20/getvariables`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20GetVariablesProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20RemoteStartTransactionProcessorBody} oCPP20RemoteStartTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20RequeststarttransactionPost: async (
      id: number,
      oCPP20RemoteStartTransactionProcessorBody: OCPP20RemoteStartTransactionProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20RequeststarttransactionPost",
        "id",
        id
      );
      // verify required parameter 'oCPP20RemoteStartTransactionProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20RequeststarttransactionPost",
        "oCPP20RemoteStartTransactionProcessorBody",
        oCPP20RemoteStartTransactionProcessorBody
      );
      const localVarPath = `/context/{id}/v20/requeststarttransaction`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20RemoteStartTransactionProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20RemoteStopTransactionProcessorBody} oCPP20RemoteStopTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20RequeststoptransactionPost: async (
      id: number,
      oCPP20RemoteStopTransactionProcessorBody: OCPP20RemoteStopTransactionProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20RequeststoptransactionPost",
        "id",
        id
      );
      // verify required parameter 'oCPP20RemoteStopTransactionProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20RequeststoptransactionPost",
        "oCPP20RemoteStopTransactionProcessorBody",
        oCPP20RemoteStopTransactionProcessorBody
      );
      const localVarPath = `/context/{id}/v20/requeststoptransaction`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20RemoteStopTransactionProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ReserveNowProcessorBody} oCPP20ReserveNowProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ReservenowPost: async (
      id: number,
      oCPP20ReserveNowProcessorBody: OCPP20ReserveNowProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20ReservenowPost", "id", id);
      // verify required parameter 'oCPP20ReserveNowProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20ReservenowPost",
        "oCPP20ReserveNowProcessorBody",
        oCPP20ReserveNowProcessorBody
      );
      const localVarPath = `/context/{id}/v20/reservenow`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20ReserveNowProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ResetProcessorBody} oCPP20ResetProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ResetPost: async (
      id: number,
      oCPP20ResetProcessorBody: OCPP20ResetProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20ResetPost", "id", id);
      // verify required parameter 'oCPP20ResetProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20ResetPost",
        "oCPP20ResetProcessorBody",
        oCPP20ResetProcessorBody
      );
      const localVarPath = `/context/{id}/v20/reset`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20ResetProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SendLocalListProcessorBody} oCPP20SendLocalListProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20SendlocallistPost: async (
      id: number,
      oCPP20SendLocalListProcessorBody: OCPP20SendLocalListProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20SendlocallistPost", "id", id);
      // verify required parameter 'oCPP20SendLocalListProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20SendlocallistPost",
        "oCPP20SendLocalListProcessorBody",
        oCPP20SendLocalListProcessorBody
      );
      const localVarPath = `/context/{id}/v20/sendlocallist`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20SendLocalListProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SetVariablesProcessorBody} oCPP20SetVariablesProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20SetvariablesPost: async (
      id: number,
      oCPP20SetVariablesProcessorBody: OCPP20SetVariablesProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("routeHandlerContextIdV20SetvariablesPost", "id", id);
      // verify required parameter 'oCPP20SetVariablesProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20SetvariablesPost",
        "oCPP20SetVariablesProcessorBody",
        oCPP20SetVariablesProcessorBody
      );
      const localVarPath = `/context/{id}/v20/setvariables`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20SetVariablesProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20UnlockConnectorProcessorBody} oCPP20UnlockConnectorProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20UnlockconnectorPost: async (
      id: number,
      oCPP20UnlockConnectorProcessorBody: OCPP20UnlockConnectorProcessorBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20UnlockconnectorPost",
        "id",
        id
      );
      // verify required parameter 'oCPP20UnlockConnectorProcessorBody' is not null or undefined
      assertParamExists(
        "routeHandlerContextIdV20UnlockconnectorPost",
        "oCPP20UnlockConnectorProcessorBody",
        oCPP20UnlockConnectorProcessorBody
      );
      const localVarPath = `/context/{id}/v20/unlockconnector`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        oCPP20UnlockConnectorProcessorBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OCPPv201Api - functional programming interface
 * @export
 */
export const OCPPv201ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OCPPv201ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20CancelReservationProcessorBody} oCPP20CancelReservationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20CancelreservationPost(
      id: number,
      oCPP20CancelReservationProcessorBody: OCPP20CancelReservationProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20CancelreservationPost(
          id,
          oCPP20CancelReservationProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20CancelreservationPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ChangeAvailabilityProcessorBody} oCPP20ChangeAvailabilityProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20ChangeavailabilityPost(
      id: number,
      oCPP20ChangeAvailabilityProcessorBody: OCPP20ChangeAvailabilityProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20ChangeavailabilityPost(
          id,
          oCPP20ChangeAvailabilityProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20ChangeavailabilityPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20ClearcachePost(
      id: number,
      body: object,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20ClearcachePost(
          id,
          body,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20ClearcachePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ClearChargingProfileProcessorBody} oCPP20ClearChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20ClearchargingprofilePost(
      id: number,
      oCPP20ClearChargingProfileProcessorBody: OCPP20ClearChargingProfileProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20ClearchargingprofilePost(
          id,
          oCPP20ClearChargingProfileProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20ClearchargingprofilePost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SendDataTransferProcessorBody} oCPP20SendDataTransferProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20DatatransferPost(
      id: number,
      oCPP20SendDataTransferProcessorBody: OCPP20SendDataTransferProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20DatatransferPost(
          id,
          oCPP20SendDataTransferProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20DatatransferPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetBaseReportProcessorBody} oCPP20GetBaseReportProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20GetbasereportPost(
      id: number,
      oCPP20GetBaseReportProcessorBody: OCPP20GetBaseReportProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20GetbasereportPost(
          id,
          oCPP20GetBaseReportProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20GetbasereportPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetLocalListVersionProcessorBody} oCPP20GetLocalListVersionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20GetlocallistversionPost(
      id: number,
      oCPP20GetLocalListVersionProcessorBody: OCPP20GetLocalListVersionProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20GetlocallistversionPost(
          id,
          oCPP20GetLocalListVersionProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20GetlocallistversionPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetReportProcessorBody} oCPP20GetReportProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20GetreportPost(
      id: number,
      oCPP20GetReportProcessorBody: OCPP20GetReportProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20GetreportPost(
          id,
          oCPP20GetReportProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20GetreportPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetVariablesProcessorBody} oCPP20GetVariablesProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20GetvariablesPost(
      id: number,
      oCPP20GetVariablesProcessorBody: OCPP20GetVariablesProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20GetvariablesPost(
          id,
          oCPP20GetVariablesProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20GetvariablesPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20RemoteStartTransactionProcessorBody} oCPP20RemoteStartTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20RequeststarttransactionPost(
      id: number,
      oCPP20RemoteStartTransactionProcessorBody: OCPP20RemoteStartTransactionProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20RequeststarttransactionPost(
          id,
          oCPP20RemoteStartTransactionProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20RequeststarttransactionPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20RemoteStopTransactionProcessorBody} oCPP20RemoteStopTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20RequeststoptransactionPost(
      id: number,
      oCPP20RemoteStopTransactionProcessorBody: OCPP20RemoteStopTransactionProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20RequeststoptransactionPost(
          id,
          oCPP20RemoteStopTransactionProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20RequeststoptransactionPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ReserveNowProcessorBody} oCPP20ReserveNowProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20ReservenowPost(
      id: number,
      oCPP20ReserveNowProcessorBody: OCPP20ReserveNowProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20ReservenowPost(
          id,
          oCPP20ReserveNowProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20ReservenowPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ResetProcessorBody} oCPP20ResetProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20ResetPost(
      id: number,
      oCPP20ResetProcessorBody: OCPP20ResetProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20ResetPost(
          id,
          oCPP20ResetProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OCPPv201Api.routeHandlerContextIdV20ResetPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SendLocalListProcessorBody} oCPP20SendLocalListProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20SendlocallistPost(
      id: number,
      oCPP20SendLocalListProcessorBody: OCPP20SendLocalListProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20SendlocallistPost(
          id,
          oCPP20SendLocalListProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20SendlocallistPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SetVariablesProcessorBody} oCPP20SetVariablesProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20SetvariablesPost(
      id: number,
      oCPP20SetVariablesProcessorBody: OCPP20SetVariablesProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20SetvariablesPost(
          id,
          oCPP20SetVariablesProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20SetvariablesPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20UnlockConnectorProcessorBody} oCPP20UnlockConnectorProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async routeHandlerContextIdV20UnlockconnectorPost(
      id: number,
      oCPP20UnlockConnectorProcessorBody: OCPP20UnlockConnectorProcessorBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.routeHandlerContextIdV20UnlockconnectorPost(
          id,
          oCPP20UnlockConnectorProcessorBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "OCPPv201Api.routeHandlerContextIdV20UnlockconnectorPost"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OCPPv201Api - factory interface
 * @export
 */
export const OCPPv201ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OCPPv201ApiFp(configuration);
  return {
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20CancelReservationProcessorBody} oCPP20CancelReservationProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20CancelreservationPost(
      id: number,
      oCPP20CancelReservationProcessorBody: OCPP20CancelReservationProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20CancelreservationPost(
          id,
          oCPP20CancelReservationProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ChangeAvailabilityProcessorBody} oCPP20ChangeAvailabilityProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ChangeavailabilityPost(
      id: number,
      oCPP20ChangeAvailabilityProcessorBody: OCPP20ChangeAvailabilityProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20ChangeavailabilityPost(
          id,
          oCPP20ChangeAvailabilityProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ClearcachePost(
      id: number,
      body: object,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20ClearcachePost(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ClearChargingProfileProcessorBody} oCPP20ClearChargingProfileProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ClearchargingprofilePost(
      id: number,
      oCPP20ClearChargingProfileProcessorBody: OCPP20ClearChargingProfileProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20ClearchargingprofilePost(
          id,
          oCPP20ClearChargingProfileProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SendDataTransferProcessorBody} oCPP20SendDataTransferProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20DatatransferPost(
      id: number,
      oCPP20SendDataTransferProcessorBody: OCPP20SendDataTransferProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20DatatransferPost(
          id,
          oCPP20SendDataTransferProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetBaseReportProcessorBody} oCPP20GetBaseReportProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20GetbasereportPost(
      id: number,
      oCPP20GetBaseReportProcessorBody: OCPP20GetBaseReportProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20GetbasereportPost(
          id,
          oCPP20GetBaseReportProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetLocalListVersionProcessorBody} oCPP20GetLocalListVersionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20GetlocallistversionPost(
      id: number,
      oCPP20GetLocalListVersionProcessorBody: OCPP20GetLocalListVersionProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20GetlocallistversionPost(
          id,
          oCPP20GetLocalListVersionProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetReportProcessorBody} oCPP20GetReportProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20GetreportPost(
      id: number,
      oCPP20GetReportProcessorBody: OCPP20GetReportProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20GetreportPost(
          id,
          oCPP20GetReportProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20GetVariablesProcessorBody} oCPP20GetVariablesProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20GetvariablesPost(
      id: number,
      oCPP20GetVariablesProcessorBody: OCPP20GetVariablesProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20GetvariablesPost(
          id,
          oCPP20GetVariablesProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20RemoteStartTransactionProcessorBody} oCPP20RemoteStartTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20RequeststarttransactionPost(
      id: number,
      oCPP20RemoteStartTransactionProcessorBody: OCPP20RemoteStartTransactionProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20RequeststarttransactionPost(
          id,
          oCPP20RemoteStartTransactionProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20RemoteStopTransactionProcessorBody} oCPP20RemoteStopTransactionProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20RequeststoptransactionPost(
      id: number,
      oCPP20RemoteStopTransactionProcessorBody: OCPP20RemoteStopTransactionProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20RequeststoptransactionPost(
          id,
          oCPP20RemoteStopTransactionProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ReserveNowProcessorBody} oCPP20ReserveNowProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ReservenowPost(
      id: number,
      oCPP20ReserveNowProcessorBody: OCPP20ReserveNowProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20ReservenowPost(
          id,
          oCPP20ReserveNowProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20ResetProcessorBody} oCPP20ResetProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20ResetPost(
      id: number,
      oCPP20ResetProcessorBody: OCPP20ResetProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20ResetPost(
          id,
          oCPP20ResetProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SendLocalListProcessorBody} oCPP20SendLocalListProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20SendlocallistPost(
      id: number,
      oCPP20SendLocalListProcessorBody: OCPP20SendLocalListProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20SendlocallistPost(
          id,
          oCPP20SendLocalListProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20SetVariablesProcessorBody} oCPP20SetVariablesProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20SetvariablesPost(
      id: number,
      oCPP20SetVariablesProcessorBody: OCPP20SetVariablesProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20SetvariablesPost(
          id,
          oCPP20SetVariablesProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Route Handler
     * @param {number} id
     * @param {OCPP20UnlockConnectorProcessorBody} oCPP20UnlockConnectorProcessorBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    routeHandlerContextIdV20UnlockconnectorPost(
      id: number,
      oCPP20UnlockConnectorProcessorBody: OCPP20UnlockConnectorProcessorBody,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<any> {
      return localVarFp
        .routeHandlerContextIdV20UnlockconnectorPost(
          id,
          oCPP20UnlockConnectorProcessorBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OCPPv201Api - object-oriented interface
 * @export
 * @class OCPPv201Api
 * @extends {BaseAPI}
 */
export class OCPPv201Api extends BaseAPI {
  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20CancelReservationProcessorBody} oCPP20CancelReservationProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20CancelreservationPost(
    id: number,
    oCPP20CancelReservationProcessorBody: OCPP20CancelReservationProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20CancelreservationPost(
        id,
        oCPP20CancelReservationProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20ChangeAvailabilityProcessorBody} oCPP20ChangeAvailabilityProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20ChangeavailabilityPost(
    id: number,
    oCPP20ChangeAvailabilityProcessorBody: OCPP20ChangeAvailabilityProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20ChangeavailabilityPost(
        id,
        oCPP20ChangeAvailabilityProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20ClearcachePost(
    id: number,
    body: object,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20ClearcachePost(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20ClearChargingProfileProcessorBody} oCPP20ClearChargingProfileProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20ClearchargingprofilePost(
    id: number,
    oCPP20ClearChargingProfileProcessorBody: OCPP20ClearChargingProfileProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20ClearchargingprofilePost(
        id,
        oCPP20ClearChargingProfileProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20SendDataTransferProcessorBody} oCPP20SendDataTransferProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20DatatransferPost(
    id: number,
    oCPP20SendDataTransferProcessorBody: OCPP20SendDataTransferProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20DatatransferPost(
        id,
        oCPP20SendDataTransferProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20GetBaseReportProcessorBody} oCPP20GetBaseReportProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20GetbasereportPost(
    id: number,
    oCPP20GetBaseReportProcessorBody: OCPP20GetBaseReportProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20GetbasereportPost(
        id,
        oCPP20GetBaseReportProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20GetLocalListVersionProcessorBody} oCPP20GetLocalListVersionProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20GetlocallistversionPost(
    id: number,
    oCPP20GetLocalListVersionProcessorBody: OCPP20GetLocalListVersionProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20GetlocallistversionPost(
        id,
        oCPP20GetLocalListVersionProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20GetReportProcessorBody} oCPP20GetReportProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20GetreportPost(
    id: number,
    oCPP20GetReportProcessorBody: OCPP20GetReportProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20GetreportPost(
        id,
        oCPP20GetReportProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20GetVariablesProcessorBody} oCPP20GetVariablesProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20GetvariablesPost(
    id: number,
    oCPP20GetVariablesProcessorBody: OCPP20GetVariablesProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20GetvariablesPost(
        id,
        oCPP20GetVariablesProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20RemoteStartTransactionProcessorBody} oCPP20RemoteStartTransactionProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20RequeststarttransactionPost(
    id: number,
    oCPP20RemoteStartTransactionProcessorBody: OCPP20RemoteStartTransactionProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20RequeststarttransactionPost(
        id,
        oCPP20RemoteStartTransactionProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20RemoteStopTransactionProcessorBody} oCPP20RemoteStopTransactionProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20RequeststoptransactionPost(
    id: number,
    oCPP20RemoteStopTransactionProcessorBody: OCPP20RemoteStopTransactionProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20RequeststoptransactionPost(
        id,
        oCPP20RemoteStopTransactionProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20ReserveNowProcessorBody} oCPP20ReserveNowProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20ReservenowPost(
    id: number,
    oCPP20ReserveNowProcessorBody: OCPP20ReserveNowProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20ReservenowPost(
        id,
        oCPP20ReserveNowProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20ResetProcessorBody} oCPP20ResetProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20ResetPost(
    id: number,
    oCPP20ResetProcessorBody: OCPP20ResetProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20ResetPost(id, oCPP20ResetProcessorBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20SendLocalListProcessorBody} oCPP20SendLocalListProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20SendlocallistPost(
    id: number,
    oCPP20SendLocalListProcessorBody: OCPP20SendLocalListProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20SendlocallistPost(
        id,
        oCPP20SendLocalListProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20SetVariablesProcessorBody} oCPP20SetVariablesProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20SetvariablesPost(
    id: number,
    oCPP20SetVariablesProcessorBody: OCPP20SetVariablesProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20SetvariablesPost(
        id,
        oCPP20SetVariablesProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Route Handler
   * @param {number} id
   * @param {OCPP20UnlockConnectorProcessorBody} oCPP20UnlockConnectorProcessorBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OCPPv201Api
   */
  public routeHandlerContextIdV20UnlockconnectorPost(
    id: number,
    oCPP20UnlockConnectorProcessorBody: OCPP20UnlockConnectorProcessorBody,
    options?: RawAxiosRequestConfig
  ) {
    return OCPPv201ApiFp(this.configuration)
      .routeHandlerContextIdV20UnlockconnectorPost(
        id,
        oCPP20UnlockConnectorProcessorBody,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
